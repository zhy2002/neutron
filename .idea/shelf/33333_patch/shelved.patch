Index: src/main/java/zhy2002/neutron/next/UiNode.java
===================================================================
--- src/main/java/zhy2002/neutron/next/UiNode.java	
+++ src/main/java/zhy2002/neutron/next/UiNode.java	
@@ -0,0 +1,64 @@
+package zhy2002.neutron.next;
+
+import javax.validation.constraints.NotNull;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Base class for all ui nodes.
+ */
+public abstract class UiNode<P extends ParentUiNode<?>> {
+
+    /**
+     * The parent ui node.
+     */
+    private final P parent;
+    /**
+     * The context instance shared by the whole UiNode tree.
+     */
+    private final UiNodeContext context;
+    /**
+     * A map used to store current values of state properties.
+     */
+    private final Map<String, ? super Object> state = new HashMap<>();
+
+    /**
+     * The constructor for a child node.
+     *
+     * @param parent the parent node.
+     */
+    protected UiNode(@NotNull P parent) {
+        this.parent = parent;
+        this.context = parent.getContext();
+    }
+
+    /**
+     * The constructor used for a root node.
+     *
+     * @param context the context instance.
+     */
+    protected UiNode(@NotNull UiNodeContext context) {
+        this.parent = null;
+        this.context = context;
+    }
+
+    public
+    @NotNull
+    P getParent() {
+        return parent;
+    }
+
+    public
+    @NotNull
+    UiNodeContext getContext() {
+        return context;
+    }
+
+    protected <T> T getStateValueInternal(String key) {
+        return (T) state.get(key);
+    }
+
+    protected void setStateValueInternal(String key, Object value) {
+        state.put(key, value);
+    }
+}
Index: src/main/java/zhy2002/neutron/next/UiNodeContext.java
===================================================================
--- src/main/java/zhy2002/neutron/next/UiNodeContext.java	
+++ src/main/java/zhy2002/neutron/next/UiNodeContext.java	
@@ -0,0 +1,7 @@
+package zhy2002.neutron.next;
+
+/**
+ * Created by john.zhang on 4/11/2016.
+ */
+public class UiNodeContext {
+}
Index: src/main/java/zhy2002/neutron/next/ListUiNode.java
===================================================================
--- src/main/java/zhy2002/neutron/next/ListUiNode.java	
+++ src/main/java/zhy2002/neutron/next/ListUiNode.java	
@@ -0,0 +1,18 @@
+package zhy2002.neutron.next;
+
+import javax.validation.constraints.NotNull;
+
+/**
+ * A ParentUiNode whose children are put in a list.
+ */
+public class ListUiNode<P extends ObjectUiNode<?>> extends ParentUiNode<P> {
+
+    /**
+     * A the type constraint indicates, a ListUiNode's parent
+     * must be an ObjectUiNode.
+     * @param parent the parent ObjectUiNode.
+     */
+    protected ListUiNode(@NotNull P parent) {
+        super(parent);
+    }
+}
Index: src/main/java/zhy2002/neutron/next/VoidUiNode.java
===================================================================
--- src/main/java/zhy2002/neutron/next/VoidUiNode.java	
+++ src/main/java/zhy2002/neutron/next/VoidUiNode.java	
@@ -0,0 +1,23 @@
+package zhy2002.neutron.next;
+
+/**
+ * The parent UiNode type for a root UiNode.
+ * This class cannot be instantiated.
+ */
+public final class VoidUiNode extends ParentUiNode<VoidUiNode> {
+
+    /**
+     * A placeholder class needed to fulfill the contact that
+     * the context super constructor parameter must not be null.
+     */
+    private final static class VoidUiNodeContext extends UiNodeContext {
+    }
+
+    /**
+     * This constructor is provided to prevent this class from being instantiated.
+     * IT SHOULD NEVER BE CALLED.
+     */
+    private VoidUiNode(){
+        super(new VoidUiNodeContext());
+    }
+}
Index: src/main/java/zhy2002/neutron/next/event/UiNodeEvent.java
===================================================================
--- src/main/java/zhy2002/neutron/next/event/UiNodeEvent.java	
+++ src/main/java/zhy2002/neutron/next/event/UiNodeEvent.java	
@@ -0,0 +1,7 @@
+package zhy2002.neutron.next.event;
+
+/**
+ * The base class for all UiNode events.
+ */
+public abstract class UiNodeEvent {
+}
Index: src/main/java/zhy2002/neutron/next/event/ChangeMode.java
===================================================================
--- src/main/java/zhy2002/neutron/next/event/ChangeMode.java	
+++ src/main/java/zhy2002/neutron/next/event/ChangeMode.java	
@@ -0,0 +1,23 @@
+package zhy2002.neutron.next.event;
+
+/**
+ * Created by john.zhang on 4/11/2016.
+ */
+public enum ChangeMode {
+    /**
+     * All changes cause other changes (trigger rules).
+     */
+    CASCADE,
+    /**
+     * All changes do not cause other changes.
+     */
+    DIRECT,
+    /**
+     * All changes are ignored.
+     */
+    IGNORED,
+    /**
+     * All changes are prohibited (cause exception and everything in the current cycle will rollback).
+     */
+    PROHIBITED
+}
Index: src/main/java/zhy2002/neutron/next/event/NodeLoadEvent.java
===================================================================
--- src/main/java/zhy2002/neutron/next/event/NodeLoadEvent.java	
+++ src/main/java/zhy2002/neutron/next/event/NodeLoadEvent.java	
@@ -0,0 +1,7 @@
+package zhy2002.neutron.next.event;
+
+/**
+ * Created by john.zhang on 4/11/2016.
+ */
+public class NodeLoadEvent {
+}
Index: src/main/java/zhy2002/neutron/next/event/TickPhase.java
===================================================================
--- src/main/java/zhy2002/neutron/next/event/TickPhase.java	
+++ src/main/java/zhy2002/neutron/next/event/TickPhase.java	
@@ -0,0 +1,8 @@
+package zhy2002.neutron.next.event;
+
+/**
+ * Created by john.zhang on 4/11/2016.
+ */
+public interface TickPhase {
+    ChangeMode getChangeMode();
+}
Index: src/main/java/zhy2002/neutron/next/event/StateChangeEvent.java
===================================================================
--- src/main/java/zhy2002/neutron/next/event/StateChangeEvent.java	
+++ src/main/java/zhy2002/neutron/next/event/StateChangeEvent.java	
@@ -0,0 +1,7 @@
+package zhy2002.neutron.next.event;
+
+/**
+ * Created by john.zhang on 4/11/2016.
+ */
+public class StateChangeEvent {
+}
Index: src/main/java/zhy2002/neutron/next/event/DefaultPhases.java
===================================================================
--- src/main/java/zhy2002/neutron/next/event/DefaultPhases.java	
+++ src/main/java/zhy2002/neutron/next/event/DefaultPhases.java	
@@ -0,0 +1,25 @@
+package zhy2002.neutron.next.event;
+
+/**
+ * These are the hard coded phases in order.
+ * A phase instance is a configuration of how a tick should run.
+ * The engine does not know the phases by name.
+ */
+public enum DefaultPhases implements TickPhase {
+
+    Pre(ChangeMode.PROHIBITED),
+    Post(ChangeMode.CASCADE),
+    Validate(ChangeMode.DIRECT),
+    CleanUp(ChangeMode.IGNORED);
+
+    private final ChangeMode changeMode;
+
+    DefaultPhases(ChangeMode changeMode) {
+        this.changeMode = changeMode;
+    }
+
+    @Override
+    public ChangeMode getChangeMode() {
+        return changeMode;
+    }
+}
Index: src/main/java/zhy2002/neutron/next/ParentUiNode.java
===================================================================
--- src/main/java/zhy2002/neutron/next/ParentUiNode.java	
+++ src/main/java/zhy2002/neutron/next/ParentUiNode.java	
@@ -0,0 +1,19 @@
+package zhy2002.neutron.next;
+
+import javax.validation.constraints.NotNull;
+
+/**
+ * A UiNode that can have child UiNodes.
+ * The two known subclasses are ObjectUiNode and ListUiNode.
+ * todo Consider adding MapUiNode which maps one UiNode to another.
+ */
+public abstract class ParentUiNode<P extends ParentUiNode<?>> extends UiNode<P> {
+
+    protected ParentUiNode(@NotNull P parent) {
+        super(parent);
+    }
+
+    protected ParentUiNode(@NotNull UiNodeContext context) {
+        super(context);
+    }
+}
Index: src/main/java/zhy2002/neutron/next/event/NodeUnloadEvent.java
===================================================================
--- src/main/java/zhy2002/neutron/next/event/NodeUnloadEvent.java	
+++ src/main/java/zhy2002/neutron/next/event/NodeUnloadEvent.java	
@@ -0,0 +1,7 @@
+package zhy2002.neutron.next.event;
+
+/**
+ * Created by john.zhang on 4/11/2016.
+ */
+public class NodeUnloadEvent {
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1478204769000)
+++ pom.xml	
@@ -19,6 +19,11 @@
             <artifactId>hamcrest-all</artifactId>
             <version>1.3</version>
         </dependency>
+        <dependency>
+            <groupId>org.hibernate</groupId>
+            <artifactId>hibernate-validator</artifactId>
+            <version>5.1.1.Final</version>
+        </dependency>
     </dependencies>
 
     <build>
\ No newline at end of file
Index: src/main/java/zhy2002/neutron/next/ObjectUiNode.java
===================================================================
--- src/main/java/zhy2002/neutron/next/ObjectUiNode.java	
+++ src/main/java/zhy2002/neutron/next/ObjectUiNode.java	
@@ -0,0 +1,18 @@
+package zhy2002.neutron.next;
+
+import javax.validation.constraints.NotNull;
+
+/**
+ * A ParentUiNode whose children are exposed as properties.
+ */
+public class ObjectUiNode<P extends ParentUiNode<?>> extends ParentUiNode<P> {
+
+
+    protected ObjectUiNode(@NotNull P parent) {
+        super(parent);
+    }
+
+    protected ObjectUiNode(@NotNull UiNodeContext context) {
+        super(context);
+    }
+}
