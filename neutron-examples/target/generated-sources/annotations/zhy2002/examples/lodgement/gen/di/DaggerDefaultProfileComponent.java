package zhy2002.examples.lodgement.gen.di;

import dagger.MembersInjector;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;
import zhy2002.examples.lodgement.di.CustomModule;
import zhy2002.examples.lodgement.di.CustomModule_ProvideApplicationNodeChildProviderFactory;
import zhy2002.examples.lodgement.di.CustomModule_ProvideBaseContactNodeChildProviderFactory;
import zhy2002.examples.lodgement.di.CustomModule_ProvideEmployedNodeChildProviderFactory;
import zhy2002.examples.lodgement.di.LegalActionNodeRuleProviderImpl_Factory;
import zhy2002.examples.lodgement.di.LegalActionNodeRuleProviderImpl_MembersInjector;
import zhy2002.examples.lodgement.gen.ApplicationNodeClassRegistry;
import zhy2002.examples.lodgement.gen.ApplicationNodeClassRegistry_Factory;
import zhy2002.examples.lodgement.gen.ApplicationNodeContext;
import zhy2002.examples.lodgement.gen.ApplicationNodeContext_Factory;
import zhy2002.examples.lodgement.gen.ApplicationNodeContext_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessCompanyNameNode;
import zhy2002.examples.lodgement.gen.node.AccessCompanyNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessContactFirstNameNode;
import zhy2002.examples.lodgement.gen.node.AccessContactFirstNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessContactLastNameNode;
import zhy2002.examples.lodgement.gen.node.AccessContactLastNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessContactTitleNode;
import zhy2002.examples.lodgement.gen.node.AccessContactTitleNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessContactTypeNode;
import zhy2002.examples.lodgement.gen.node.AccessContactTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessNode;
import zhy2002.examples.lodgement.gen.node.AccessNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.AccessNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.AccessNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessOtherDescriptionNode;
import zhy2002.examples.lodgement.gen.node.AccessOtherDescriptionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccessTelephoneNode;
import zhy2002.examples.lodgement.gen.node.AccessTelephoneNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AccountHolderReferenceNode;
import zhy2002.examples.lodgement.gen.node.AccountHolderReferenceNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AdditionalCommentNode;
import zhy2002.examples.lodgement.gen.node.AdditionalCommentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AdditionalNode;
import zhy2002.examples.lodgement.gen.node.AdditionalNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.AdditionalNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.AdditionalNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AdditionalNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AddressLineNode;
import zhy2002.examples.lodgement.gen.node.AddressLineNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AddressNode;
import zhy2002.examples.lodgement.gen.node.AddressNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.AddressNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.AddressNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AddressRefListNode;
import zhy2002.examples.lodgement.gen.node.AddressRefListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.AddressRefListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.AddressRefListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AddressRefListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AddressRefNode;
import zhy2002.examples.lodgement.gen.node.AddressRefNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ApplicantReferenceNode;
import zhy2002.examples.lodgement.gen.node.ApplicantReferenceNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ApplicationNode;
import zhy2002.examples.lodgement.gen.node.ApplicationNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.ApplicationNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ApplicationTypeNode;
import zhy2002.examples.lodgement.gen.node.ApplicationTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ApprovalInPrincipleFlagNode;
import zhy2002.examples.lodgement.gen.node.ApprovalInPrincipleFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AssetsNode;
import zhy2002.examples.lodgement.gen.node.AssetsNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.AssetsNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.AssetsNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AssetsNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.AverageFlagNode;
import zhy2002.examples.lodgement.gen.node.AverageFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.BaseContactNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.BaseContactNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.BaseOtherIncomeListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.BaseOtherIncomeListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.BaseOtherIncomeListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.BasePrivacyNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.BasePrivacyNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.BasePrivacyNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.BaseResponsibleLendNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.BaseResponsibleLendNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.BaseResponsibleLendNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.BaseTrustNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.BaseTrustNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.BaseTrustNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.BeingPurchasedFlagNode;
import zhy2002.examples.lodgement.gen.node.BeingPurchasedFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.BusinessTypeNode;
import zhy2002.examples.lodgement.gen.node.BusinessTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyAbnNode;
import zhy2002.examples.lodgement.gen.node.CompanyAbnNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyAbrnNode;
import zhy2002.examples.lodgement.gen.node.CompanyAbrnNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyAcnNode;
import zhy2002.examples.lodgement.gen.node.CompanyAcnNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyApplicantTypeNode;
import zhy2002.examples.lodgement.gen.node.CompanyApplicantTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyApplicationTypeNode;
import zhy2002.examples.lodgement.gen.node.CompanyApplicationTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyContactFirstNameNode;
import zhy2002.examples.lodgement.gen.node.CompanyContactFirstNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyContactLastNameNode;
import zhy2002.examples.lodgement.gen.node.CompanyContactLastNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyContactNode;
import zhy2002.examples.lodgement.gen.node.CompanyContactNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.CompanyContactNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.CompanyContactNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyContactNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyDescriptionNode;
import zhy2002.examples.lodgement.gen.node.CompanyDescriptionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyGeneralNode;
import zhy2002.examples.lodgement.gen.node.CompanyGeneralNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.CompanyGeneralNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.CompanyGeneralNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyGeneralNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyIndustryNode;
import zhy2002.examples.lodgement.gen.node.CompanyIndustryNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyListNode;
import zhy2002.examples.lodgement.gen.node.CompanyListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.CompanyListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.CompanyListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyNode;
import zhy2002.examples.lodgement.gen.node.CompanyNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.CompanyNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.CompanyNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyOtherIncomeListNode;
import zhy2002.examples.lodgement.gen.node.CompanyOtherIncomeListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyPrimaryApplicantFlagNode;
import zhy2002.examples.lodgement.gen.node.CompanyPrimaryApplicantFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyPrivacyNode;
import zhy2002.examples.lodgement.gen.node.CompanyPrivacyNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyRegisteredNameNode;
import zhy2002.examples.lodgement.gen.node.CompanyRegisteredNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyRegistrationDateNode;
import zhy2002.examples.lodgement.gen.node.CompanyRegistrationDateNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyRegistrationStateNode;
import zhy2002.examples.lodgement.gen.node.CompanyRegistrationStateNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyResponsibleLendNode;
import zhy2002.examples.lodgement.gen.node.CompanyResponsibleLendNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanySelectBeneficialOwnerNode;
import zhy2002.examples.lodgement.gen.node.CompanySelectBeneficialOwnerNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanySelectDirectorNode;
import zhy2002.examples.lodgement.gen.node.CompanySelectDirectorNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyTrustNode;
import zhy2002.examples.lodgement.gen.node.CompanyTrustNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CompanyTypeNode;
import zhy2002.examples.lodgement.gen.node.CompanyTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ContactAddressNode;
import zhy2002.examples.lodgement.gen.node.ContactAddressNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ContactEmailNode;
import zhy2002.examples.lodgement.gen.node.ContactEmailNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ContactTelephoneNode;
import zhy2002.examples.lodgement.gen.node.ContactTelephoneNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ContractPriceNode;
import zhy2002.examples.lodgement.gen.node.ContractPriceNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CountryNode;
import zhy2002.examples.lodgement.gen.node.CountryNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardAmountOwingNode;
import zhy2002.examples.lodgement.gen.node.CreditCardAmountOwingNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardBreakCostNode;
import zhy2002.examples.lodgement.gen.node.CreditCardBreakCostNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardClearingFlagNode;
import zhy2002.examples.lodgement.gen.node.CreditCardClearingFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardLenderNameNode;
import zhy2002.examples.lodgement.gen.node.CreditCardLenderNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardLimitAmountNode;
import zhy2002.examples.lodgement.gen.node.CreditCardLimitAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardListNode;
import zhy2002.examples.lodgement.gen.node.CreditCardListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.CreditCardListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.CreditCardListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardMonthlyRepaymentNode;
import zhy2002.examples.lodgement.gen.node.CreditCardMonthlyRepaymentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardNode;
import zhy2002.examples.lodgement.gen.node.CreditCardNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.CreditCardNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.CreditCardNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCardTypeNode;
import zhy2002.examples.lodgement.gen.node.CreditCardTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditCheckFlagNode;
import zhy2002.examples.lodgement.gen.node.CreditCheckFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditHistoryListNode;
import zhy2002.examples.lodgement.gen.node.CreditHistoryListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.CreditHistoryListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.CreditHistoryListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditHistoryListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CreditHistoryNode;
import zhy2002.examples.lodgement.gen.node.CreditHistoryNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CurrentEmploymentListNode;
import zhy2002.examples.lodgement.gen.node.CurrentEmploymentListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.CurrentEmploymentListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.CurrentEmploymentListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CurrentEmploymentListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.CurrentEmploymentNode;
import zhy2002.examples.lodgement.gen.node.CurrentEmploymentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.DateOfBirthNode;
import zhy2002.examples.lodgement.gen.node.DateOfBirthNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.DefenseServiceFlagNode;
import zhy2002.examples.lodgement.gen.node.DefenseServiceFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.DobNode;
import zhy2002.examples.lodgement.gen.node.DriversLicenseNode;
import zhy2002.examples.lodgement.gen.node.DriversLicenseNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmployedNode;
import zhy2002.examples.lodgement.gen.node.EmployedNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.EmployedNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmployedNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmployerAddressNode;
import zhy2002.examples.lodgement.gen.node.EmployerAddressNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmployerNameNode;
import zhy2002.examples.lodgement.gen.node.EmployerNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmployerPhoneNode;
import zhy2002.examples.lodgement.gen.node.EmployerPhoneNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmploymentEndedNode;
import zhy2002.examples.lodgement.gen.node.EmploymentEndedNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmploymentNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.EmploymentNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.EmploymentNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmploymentStartedNode;
import zhy2002.examples.lodgement.gen.node.EmploymentStartedNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmploymentStatusNode;
import zhy2002.examples.lodgement.gen.node.EmploymentStatusNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EmploymentTypeNode;
import zhy2002.examples.lodgement.gen.node.EmploymentTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ErrorListNode;
import zhy2002.examples.lodgement.gen.node.ErrorListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.ErrorListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ErrorListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ErrorListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ErrorNode;
import zhy2002.examples.lodgement.gen.node.ErrorNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.EstimatedMarketValueNode;
import zhy2002.examples.lodgement.gen.node.EstimatedMarketValueNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageListNode;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageNode;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExistingMortgageNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExpenseDescriptionNode;
import zhy2002.examples.lodgement.gen.node.ExpenseDescriptionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExpenseListNode;
import zhy2002.examples.lodgement.gen.node.ExpenseListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.ExpenseListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ExpenseListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExpenseListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExpenseMonthlyRepaymentNode;
import zhy2002.examples.lodgement.gen.node.ExpenseMonthlyRepaymentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExpenseNode;
import zhy2002.examples.lodgement.gen.node.ExpenseNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.ExpenseNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ExpenseNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExpenseNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ExpenseTypeNode;
import zhy2002.examples.lodgement.gen.node.ExpenseTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.FinancialPositionNode;
import zhy2002.examples.lodgement.gen.node.FinancialPositionNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.FinancialPositionNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.FinancialPositionNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.FinancialPositionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.FirstHomeBuyerFlagNode;
import zhy2002.examples.lodgement.gen.node.FirstHomeBuyerFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.FirstNameNode;
import zhy2002.examples.lodgement.gen.node.FirstNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.GenderNode;
import zhy2002.examples.lodgement.gen.node.GenderNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.GrossYearlySalaryNode;
import zhy2002.examples.lodgement.gen.node.GrossYearlySalaryNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.HouseDutiesFlagNode;
import zhy2002.examples.lodgement.gen.node.HouseDutiesFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.HousingStatusNode;
import zhy2002.examples.lodgement.gen.node.HousingStatusNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LastNameNode;
import zhy2002.examples.lodgement.gen.node.LastNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LegalActionNode;
import zhy2002.examples.lodgement.gen.node.LegalActionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LiabilitiesNode;
import zhy2002.examples.lodgement.gen.node.LiabilitiesNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.LiabilitiesNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.LiabilitiesNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LiabilitiesNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanBreakCostNode;
import zhy2002.examples.lodgement.gen.node.LoanBreakCostNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanClearingFlagNode;
import zhy2002.examples.lodgement.gen.node.LoanClearingFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanLenderNameNode;
import zhy2002.examples.lodgement.gen.node.LoanLenderNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanLimitAmountNode;
import zhy2002.examples.lodgement.gen.node.LoanLimitAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanListNode;
import zhy2002.examples.lodgement.gen.node.LoanListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.LoanListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.LoanListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanMonthlyRepaymentNode;
import zhy2002.examples.lodgement.gen.node.LoanMonthlyRepaymentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanNode;
import zhy2002.examples.lodgement.gen.node.LoanNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.LoanNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.LoanNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanOwingAmountNode;
import zhy2002.examples.lodgement.gen.node.LoanOwingAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.LoanTypeNode;
import zhy2002.examples.lodgement.gen.node.LoanTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MaritalStatusNode;
import zhy2002.examples.lodgement.gen.node.MaritalStatusNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MobileNumberNode;
import zhy2002.examples.lodgement.gen.node.MobileNumberNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MonthNode;
import zhy2002.examples.lodgement.gen.node.MonthNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MonthYearNode;
import zhy2002.examples.lodgement.gen.node.MonthYearNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.MonthYearNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.MonthYearNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageBorrowerRateNode;
import zhy2002.examples.lodgement.gen.node.MortgageBorrowerRateNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageBreakFeeNode;
import zhy2002.examples.lodgement.gen.node.MortgageBreakFeeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageChargePositionNode;
import zhy2002.examples.lodgement.gen.node.MortgageChargePositionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageClearingFlagNode;
import zhy2002.examples.lodgement.gen.node.MortgageClearingFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageInterestOnlyExpiryDateNode;
import zhy2002.examples.lodgement.gen.node.MortgageInterestOnlyExpiryDateNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageInterestOnlyRemainingPeriodNode;
import zhy2002.examples.lodgement.gen.node.MortgageInterestOnlyRemainingPeriodNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageLenderInstitutionNode;
import zhy2002.examples.lodgement.gen.node.MortgageLenderInstitutionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageLimitAmountNode;
import zhy2002.examples.lodgement.gen.node.MortgageLimitAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageLoanTermExpiryDateNode;
import zhy2002.examples.lodgement.gen.node.MortgageLoanTermExpiryDateNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageLoanTypeNode;
import zhy2002.examples.lodgement.gen.node.MortgageLoanTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageMonthlyRepaymentNode;
import zhy2002.examples.lodgement.gen.node.MortgageMonthlyRepaymentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgageTermRemainingPeriodNode;
import zhy2002.examples.lodgement.gen.node.MortgageTermRemainingPeriodNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MortgqageUnpaidBalanceNode;
import zhy2002.examples.lodgement.gen.node.MortgqageUnpaidBalanceNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MotorVehicleListNode;
import zhy2002.examples.lodgement.gen.node.MotorVehicleListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.MotorVehicleListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.MotorVehicleListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MotorVehicleListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MotorVehicleNode;
import zhy2002.examples.lodgement.gen.node.MotorVehicleNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.MotorVehicleNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.MotorVehicleNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MotorVehicleNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MovedFromPreviousAddressNode;
import zhy2002.examples.lodgement.gen.node.MovedFromPreviousAddressNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MovedToCurrentAddressNode;
import zhy2002.examples.lodgement.gen.node.MovedToCurrentAddressNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.MovedToPreviousAddressNode;
import zhy2002.examples.lodgement.gen.node.MovedToPreviousAddressNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OccupationNode;
import zhy2002.examples.lodgement.gen.node.OccupationNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherAssetDescriptionNode;
import zhy2002.examples.lodgement.gen.node.OtherAssetDescriptionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherAssetListNode;
import zhy2002.examples.lodgement.gen.node.OtherAssetListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.OtherAssetListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.OtherAssetListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherAssetListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherAssetMarketValueNode;
import zhy2002.examples.lodgement.gen.node.OtherAssetMarketValueNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherAssetNode;
import zhy2002.examples.lodgement.gen.node.OtherAssetNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.OtherAssetNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.OtherAssetNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherAssetNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherAssetTypeNode;
import zhy2002.examples.lodgement.gen.node.OtherAssetTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherIncomeAddBackTypeNode;
import zhy2002.examples.lodgement.gen.node.OtherIncomeAddBackTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherIncomeAmountNode;
import zhy2002.examples.lodgement.gen.node.OtherIncomeAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherIncomeDescriptionNode;
import zhy2002.examples.lodgement.gen.node.OtherIncomeDescriptionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherIncomeNode;
import zhy2002.examples.lodgement.gen.node.OtherIncomeNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.OtherIncomeNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.OtherIncomeNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherIncomeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherIncomePreviousYearNode;
import zhy2002.examples.lodgement.gen.node.OtherIncomePreviousYearNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherIncomeTypeNode;
import zhy2002.examples.lodgement.gen.node.OtherIncomeTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityAmountOwningNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityAmountOwningNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityBreakCostNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityBreakCostNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityClearingFlagNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityClearingFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityDescriptionNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityDescriptionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityLimitAmountNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityLimitAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityListNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityMonthlyRepaymentNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityMonthlyRepaymentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityTypeNode;
import zhy2002.examples.lodgement.gen.node.OtherLiabilityTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OwnedOutrightFlagNode;
import zhy2002.examples.lodgement.gen.node.OwnedOutrightFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OwnershipListNode;
import zhy2002.examples.lodgement.gen.node.OwnershipListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.OwnershipListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.OwnershipListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OwnershipNode;
import zhy2002.examples.lodgement.gen.node.OwnershipNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.OwnershipNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.OwnershipNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OwnershipNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.OwnershipPercentageNode;
import zhy2002.examples.lodgement.gen.node.OwnershipPercentageNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PayeEmployedNode;
import zhy2002.examples.lodgement.gen.node.PayeEmployedNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.PayeEmployedNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.PayeEmployedNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PayeEmployedNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PermanentResidentFlagNode;
import zhy2002.examples.lodgement.gen.node.PermanentResidentFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonApplicantTypeNode;
import zhy2002.examples.lodgement.gen.node.PersonApplicantTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonContactNode;
import zhy2002.examples.lodgement.gen.node.PersonContactNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.PersonContactNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.PersonContactNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonContactNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonGeneralNode;
import zhy2002.examples.lodgement.gen.node.PersonGeneralNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.PersonGeneralNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.PersonGeneralNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonGeneralNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonHomePhoneNode;
import zhy2002.examples.lodgement.gen.node.PersonHomePhoneNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonListNode;
import zhy2002.examples.lodgement.gen.node.PersonListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.PersonListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.PersonListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonNode;
import zhy2002.examples.lodgement.gen.node.PersonNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.PersonNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.PersonNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonOtherIncomeListNode;
import zhy2002.examples.lodgement.gen.node.PersonOtherIncomeListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonPrivacyNode;
import zhy2002.examples.lodgement.gen.node.PersonPrivacyNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonResponsibleLendNode;
import zhy2002.examples.lodgement.gen.node.PersonResponsibleLendNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PersonTrustNode;
import zhy2002.examples.lodgement.gen.node.PersonTrustNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PostcodeNode;
import zhy2002.examples.lodgement.gen.node.PostcodeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PreviousEmploymentListNode;
import zhy2002.examples.lodgement.gen.node.PreviousEmploymentListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.PreviousEmploymentListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.PreviousEmploymentListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PreviousEmploymentListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PreviousEmploymentNode;
import zhy2002.examples.lodgement.gen.node.PreviousEmploymentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PrimaryApplicantFlagNode;
import zhy2002.examples.lodgement.gen.node.PrimaryApplicantFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PrimarySecurityFlagNode;
import zhy2002.examples.lodgement.gen.node.PrimarySecurityFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.Product100PercentOffsetFlagNode;
import zhy2002.examples.lodgement.gen.node.Product100PercentOffsetFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductAccountHolderListNode;
import zhy2002.examples.lodgement.gen.node.ProductAccountHolderListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductCardHodlerNameNode;
import zhy2002.examples.lodgement.gen.node.ProductCardHodlerNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductCardHolderNode;
import zhy2002.examples.lodgement.gen.node.ProductCardHolderNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.ProductCardHolderNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ProductCardHolderNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductCardHolderNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductConsolidationFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductConsolidationFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductConstructionApplicationFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductConstructionApplicationFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductCostRecuctionFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductCostRecuctionFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductCreditCardFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductCreditCardFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductCreditCardLimitNode;
import zhy2002.examples.lodgement.gen.node.ProductCreditCardLimitNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductCreditCardTypeNode;
import zhy2002.examples.lodgement.gen.node.ProductCreditCardTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductCustomerContributionNode;
import zhy2002.examples.lodgement.gen.node.ProductCustomerContributionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductDescriptionNode;
import zhy2002.examples.lodgement.gen.node.ProductDescriptionNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.ProductDescriptionNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ProductDescriptionNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductDescriptionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductDissatisfactionFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductDissatisfactionFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductExpressConsentFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductExpressConsentFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductFeaturesNode;
import zhy2002.examples.lodgement.gen.node.ProductFeaturesNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.ProductFeaturesNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ProductFeaturesNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductFeaturesNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductFeesNode;
import zhy2002.examples.lodgement.gen.node.ProductFeesNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductFixedTermNode;
import zhy2002.examples.lodgement.gen.node.ProductFixedTermNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductGroupNode;
import zhy2002.examples.lodgement.gen.node.ProductGroupNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductInterestOnlyTermNode;
import zhy2002.examples.lodgement.gen.node.ProductInterestOnlyTermNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductLendingPurposeNode;
import zhy2002.examples.lodgement.gen.node.ProductLendingPurposeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductListNode;
import zhy2002.examples.lodgement.gen.node.ProductListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.ProductListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ProductListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductLoanPrimaryPurposeNode;
import zhy2002.examples.lodgement.gen.node.ProductLoanPrimaryPurposeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductLoanTypeNode;
import zhy2002.examples.lodgement.gen.node.ProductLoanTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductNameNode;
import zhy2002.examples.lodgement.gen.node.ProductNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductNode;
import zhy2002.examples.lodgement.gen.node.ProductNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.ProductNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ProductNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductOptOutReasonNode;
import zhy2002.examples.lodgement.gen.node.ProductOptOutReasonNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductPackageNameNode;
import zhy2002.examples.lodgement.gen.node.ProductPackageNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductPaymentTypeNode;
import zhy2002.examples.lodgement.gen.node.ProductPaymentTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductRateLockFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductRateLockFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductRepaymentFrequencyNode;
import zhy2002.examples.lodgement.gen.node.ProductRepaymentFrequencyNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductRequestedAmountNode;
import zhy2002.examples.lodgement.gen.node.ProductRequestedAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductRewardsMembershipNode;
import zhy2002.examples.lodgement.gen.node.ProductRewardsMembershipNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductRewardsProgramNode;
import zhy2002.examples.lodgement.gen.node.ProductRewardsProgramNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductSpecificFeaturesFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductSpecificFeaturesFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductTotalLoanAmountNode;
import zhy2002.examples.lodgement.gen.node.ProductTotalLoanAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductTotalLoanLmiAmountNode;
import zhy2002.examples.lodgement.gen.node.ProductTotalLoanLmiAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductTotalLoanTermNode;
import zhy2002.examples.lodgement.gen.node.ProductTotalLoanTermNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductTotalLvrLmiNode;
import zhy2002.examples.lodgement.gen.node.ProductTotalLvrLmiNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductTotalLvrNode;
import zhy2002.examples.lodgement.gen.node.ProductTotalLvrNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductTotalSecurityAmountNode;
import zhy2002.examples.lodgement.gen.node.ProductTotalSecurityAmountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductTransactionAccountFlagNode;
import zhy2002.examples.lodgement.gen.node.ProductTransactionAccountFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductsNode;
import zhy2002.examples.lodgement.gen.node.ProductsNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.ProductsNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.ProductsNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProductsNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProfitPreviousYearNode;
import zhy2002.examples.lodgement.gen.node.ProfitPreviousYearNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ProfitThisYearNode;
import zhy2002.examples.lodgement.gen.node.ProfitThisYearNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PropertyAddressNode;
import zhy2002.examples.lodgement.gen.node.PropertyAddressNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PropertyNode;
import zhy2002.examples.lodgement.gen.node.PropertyNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.PropertyNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.PropertyNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PropertyNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PropertyOwnershipListNode;
import zhy2002.examples.lodgement.gen.node.PropertyOwnershipListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PropertyPurseNode;
import zhy2002.examples.lodgement.gen.node.PropertyPurseNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PropertySubTypeNode;
import zhy2002.examples.lodgement.gen.node.PropertySubTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PropertyTypeNode;
import zhy2002.examples.lodgement.gen.node.PropertyTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.PropertyWeeklyRentNode;
import zhy2002.examples.lodgement.gen.node.PropertyWeeklyRentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RealEstateListNode;
import zhy2002.examples.lodgement.gen.node.RealEstateListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.RealEstateListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.RealEstateListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RealEstateListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RealEstateNode;
import zhy2002.examples.lodgement.gen.node.RealEstateNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.RealEstateNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.RealEstateNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RealEstateNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RelatedPartyListNode;
import zhy2002.examples.lodgement.gen.node.RelatedPartyListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.RelatedPartyListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.RelatedPartyListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RelatedPartyListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RelatedPartyNode;
import zhy2002.examples.lodgement.gen.node.RelatedPartyNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.RelatedPartyNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.RelatedPartyNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RelatedPartyNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RelatedPersonReferenceNode;
import zhy2002.examples.lodgement.gen.node.RelatedPersonReferenceNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RentedFlagNode;
import zhy2002.examples.lodgement.gen.node.RentedFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ResponsibleMitigationMethodNode;
import zhy2002.examples.lodgement.gen.node.ResponsibleMitigationMethodNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ResponsibleRepaymentDifficultyNode;
import zhy2002.examples.lodgement.gen.node.ResponsibleRepaymentDifficultyNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ResponsibleSignificantChangeFlagNode;
import zhy2002.examples.lodgement.gen.node.ResponsibleSignificantChangeFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ResponsibleTypeOfChangeNode;
import zhy2002.examples.lodgement.gen.node.ResponsibleTypeOfChangeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RetiredEmploymentNode;
import zhy2002.examples.lodgement.gen.node.RetiredEmploymentNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.RetiredEmploymentNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.RetiredEmploymentNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RetiredEmploymentNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RetiredOnBenefitFlagNode;
import zhy2002.examples.lodgement.gen.node.RetiredOnBenefitFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.RetiredSinceNode;
import zhy2002.examples.lodgement.gen.node.RetiredSinceNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsAccountListNode;
import zhy2002.examples.lodgement.gen.node.SavingsAccountListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.SavingsAccountListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.SavingsAccountListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsAccountListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNameNode;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNoNode;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNoNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNode;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsAccountNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsBalanceNode;
import zhy2002.examples.lodgement.gen.node.SavingsBalanceNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsBsbNoNode;
import zhy2002.examples.lodgement.gen.node.SavingsBsbNoNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsInstitutionNameNode;
import zhy2002.examples.lodgement.gen.node.SavingsInstitutionNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsOwnershipListNode;
import zhy2002.examples.lodgement.gen.node.SavingsOwnershipListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SavingsTypeNode;
import zhy2002.examples.lodgement.gen.node.SavingsTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderFlagNode;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderNode;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelectAccountHolderNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonFlagNode;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonNode;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelectRelatedPersonNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelfEmployedNode;
import zhy2002.examples.lodgement.gen.node.SelfEmployedNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.SelfEmployedNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.SelfEmployedNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SelfEmployedNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SettlementDateNode;
import zhy2002.examples.lodgement.gen.node.SettlementDateNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SpouseNode;
import zhy2002.examples.lodgement.gen.node.SpouseNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.StudentFlagNode;
import zhy2002.examples.lodgement.gen.node.StudentFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.StudentTypeNode;
import zhy2002.examples.lodgement.gen.node.StudentTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SubmissionNode;
import zhy2002.examples.lodgement.gen.node.SubmissionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.SuburbNode;
import zhy2002.examples.lodgement.gen.node.SuburbNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TelephoneNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyAddressNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyAddressNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyCompanyNameNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyCompanyNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyDescriptionNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyDescriptionNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyDisclosureFlagNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyDisclosureFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyDobNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyDobNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyEmailNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyEmailNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyFirstNameNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyFirstNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyLastNameNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyLastNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyTitleNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyTitleNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyTypeNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.ThirdPartyWorkPhoneNode;
import zhy2002.examples.lodgement.gen.node.ThirdPartyWorkPhoneNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TitleNode;
import zhy2002.examples.lodgement.gen.node.TitleNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TotalAssetNode;
import zhy2002.examples.lodgement.gen.node.TotalAssetNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TotalExpenseNode;
import zhy2002.examples.lodgement.gen.node.TotalExpenseNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TotalLiabilityNode;
import zhy2002.examples.lodgement.gen.node.TotalLiabilityNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustAddressNode;
import zhy2002.examples.lodgement.gen.node.TrustAddressNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustBeneficialOwnerListNode;
import zhy2002.examples.lodgement.gen.node.TrustBeneficialOwnerListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryClassListNode;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryClassListNodeItemProvider;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryClassListNodeItemProvider_Factory;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryClassListNodeItemProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryClassListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryClassNode;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryClassNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryListNode;
import zhy2002.examples.lodgement.gen.node.TrustBeneficiaryListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustCountryNode;
import zhy2002.examples.lodgement.gen.node.TrustCountryNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustIndustryNode;
import zhy2002.examples.lodgement.gen.node.TrustIndustryNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustNameNode;
import zhy2002.examples.lodgement.gen.node.TrustNameNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustRegistrationDateNode;
import zhy2002.examples.lodgement.gen.node.TrustRegistrationDateNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustSettlorListNode;
import zhy2002.examples.lodgement.gen.node.TrustSettlorListNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustSettlorNotRequiredReasonNode;
import zhy2002.examples.lodgement.gen.node.TrustSettlorNotRequiredReasonNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.TrustTypeNode;
import zhy2002.examples.lodgement.gen.node.TrustTypeNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.UnemployedNode;
import zhy2002.examples.lodgement.gen.node.UnemployedNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.UnemployedNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.UnemployedNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.UnemployedNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.UnemployedOnBenefitFlagNode;
import zhy2002.examples.lodgement.gen.node.UnemployedOnBenefitFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.UnemployedSinceNode;
import zhy2002.examples.lodgement.gen.node.UnemployedSinceNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.UsageNode;
import zhy2002.examples.lodgement.gen.node.UsageNodeChildProvider;
import zhy2002.examples.lodgement.gen.node.UsageNodeChildProvider_Factory;
import zhy2002.examples.lodgement.gen.node.UsageNodeChildProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.node.UsageNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.UsedAsSecurityFlagNode;
import zhy2002.examples.lodgement.gen.node.UsedAsSecurityFlagNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.VehicleMarketValueNode;
import zhy2002.examples.lodgement.gen.node.VehicleMarketValueNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.VehicleModelNode;
import zhy2002.examples.lodgement.gen.node.VehicleModelNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.VehicleYearNode;
import zhy2002.examples.lodgement.gen.node.VehicleYearNode_MembersInjector;
import zhy2002.examples.lodgement.gen.node.YearNode;
import zhy2002.examples.lodgement.gen.node.YearNode_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccessCompanyNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccessCompanyNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccessCompanyNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccessContactFirstNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccessContactFirstNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccessContactFirstNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccessContactLastNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccessContactLastNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccessContactLastNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccessContactTitleNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccessContactTitleNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccessContactTitleNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccessContactTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccessContactTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccessContactTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccessNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccessNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccessNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccessOtherDescriptionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccessOtherDescriptionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccessOtherDescriptionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccessTelephoneNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccessTelephoneNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccessTelephoneNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AccountHolderReferenceNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AccountHolderReferenceNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AccountHolderReferenceNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AddExistingApplicantsRule;
import zhy2002.examples.lodgement.gen.rule.AddNewCompanyApplicantRule;
import zhy2002.examples.lodgement.gen.rule.AddNewPersonApplicantRule;
import zhy2002.examples.lodgement.gen.rule.AdditionalCommentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AdditionalCommentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AdditionalCommentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AdditionalNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AdditionalNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AdditionalNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AddressLineNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AddressLineNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AddressLineNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AddressRefListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AddressRefListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AddressRefListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AddressRefNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AddressRefNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AddressRefNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ApplicantReferenceNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ApplicantReferenceNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ApplicantReferenceNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ApplicationNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ApplicationNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ApplicationNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ApplicationTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ApplicationTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ApplicationTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ApprovalInPrincipleFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ApprovalInPrincipleFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ApprovalInPrincipleFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AssetsNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AssetsNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AssetsNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.AtLeastOnePrimaryApplicantRule;
import zhy2002.examples.lodgement.gen.rule.AtMostOnePrimaryApplicantRule;
import zhy2002.examples.lodgement.gen.rule.AverageFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.AverageFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.AverageFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.BeingPurchasedFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.BeingPurchasedFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.BeingPurchasedFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.BusinessTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.BusinessTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.BusinessTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ChangeApplicationTypeRule;
import zhy2002.examples.lodgement.gen.rule.ChangeFocusErrorRule;
import zhy2002.examples.lodgement.gen.rule.CompanyAbnNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyAbnNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyAbnNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyAbrnNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyAbrnNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyAbrnNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyAcnNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyAcnNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyAcnNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyApplicantTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyApplicantTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyApplicantTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyApplicationTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyApplicationTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyApplicationTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyContactFirstNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyContactFirstNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyContactFirstNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyContactLastNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyContactLastNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyContactLastNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyContactNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyContactNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyContactNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyDescriptionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyDescriptionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyDescriptionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyGeneralNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyGeneralNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyGeneralNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyIndustryNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyIndustryNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyIndustryNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyOtherIncomeListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyOtherIncomeListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyOtherIncomeListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyPrimaryApplicantFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyPrimaryApplicantFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyPrimaryApplicantFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyPrivacyNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyPrivacyNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyPrivacyNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyRegisteredNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyRegisteredNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyRegisteredNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyRegistrationDateNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyRegistrationDateNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyRegistrationDateNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyRegistrationStateNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyRegistrationStateNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyRegistrationStateNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyResponsibleLendNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyResponsibleLendNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyResponsibleLendNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanySelectBeneficialOwnerNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanySelectBeneficialOwnerNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanySelectBeneficialOwnerNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanySelectDirectorNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanySelectDirectorNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanySelectDirectorNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyTrustNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyTrustNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyTrustNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CompanyTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CompanyTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CompanyTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ContactAddressNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ContactAddressNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ContactAddressNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ContactEmailNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ContactEmailNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ContactEmailNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ContactTelephoneNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ContactTelephoneNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ContactTelephoneNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ContractPriceNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ContractPriceNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ContractPriceNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CountryNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CountryNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CountryNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreateErrorNodeRule;
import zhy2002.examples.lodgement.gen.rule.CreditCardAmountOwingNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardAmountOwingNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardAmountOwingNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCardBreakCostNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardBreakCostNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardBreakCostNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCardClearingFlagChangedRule;
import zhy2002.examples.lodgement.gen.rule.CreditCardClearingFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardClearingFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardClearingFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCardLenderNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardLenderNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardLenderNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCardLimitAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardLimitAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardLimitAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCardListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCardMonthlyRepaymentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardMonthlyRepaymentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardMonthlyRepaymentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCardNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCardTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCardTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCardTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditCheckFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditCheckFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditCheckFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditHistoryListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditHistoryListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditHistoryListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CreditHistoryNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CreditHistoryNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CreditHistoryNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CurrentEmploymentListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CurrentEmploymentListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CurrentEmploymentListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.CurrentEmploymentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.CurrentEmploymentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.CurrentEmploymentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.DateOfBirthNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.DateOfBirthNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.DateOfBirthNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.DefenseServiceFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.DefenseServiceFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.DefenseServiceFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.DobRangeValidationRule;
import zhy2002.examples.lodgement.gen.rule.DriversLicenseNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.DriversLicenseNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.DriversLicenseNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.EmployerAddressNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.EmployerAddressNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.EmployerAddressNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.EmployerNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.EmployerNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.EmployerNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.EmployerPhoneNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.EmployerPhoneNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.EmployerPhoneNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.EmploymentEndedNoEarlierThanEmploymentStartedRule;
import zhy2002.examples.lodgement.gen.rule.EmploymentEndedNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.EmploymentEndedNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.EmploymentEndedNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.EmploymentStartedNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.EmploymentStartedNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.EmploymentStartedNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.EmploymentStatusNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.EmploymentStatusNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.EmploymentStatusNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.EmploymentTypeChangedRule;
import zhy2002.examples.lodgement.gen.rule.EmploymentTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.EmploymentTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.EmploymentTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ErrorListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ErrorListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ErrorListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ErrorNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ErrorNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ErrorNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.EstimatedMarketValueNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.EstimatedMarketValueNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.EstimatedMarketValueNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ExistingMortgageListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ExistingMortgageListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ExistingMortgageListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ExistingMortgageNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ExistingMortgageNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ExistingMortgageNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ExpenseDescriptionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ExpenseDescriptionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ExpenseDescriptionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ExpenseListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ExpenseListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ExpenseListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ExpenseMonthlyRepaymentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ExpenseMonthlyRepaymentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ExpenseMonthlyRepaymentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ExpenseNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ExpenseNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ExpenseNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ExpenseTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ExpenseTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ExpenseTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.FinancialPositionChangedRule;
import zhy2002.examples.lodgement.gen.rule.FinancialPositionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.FinancialPositionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.FinancialPositionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.FirstHomeBuyerFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.FirstHomeBuyerFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.FirstHomeBuyerFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.FirstNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.FirstNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.FirstNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.FromPreviousNoEarlierThanToPreviousRule;
import zhy2002.examples.lodgement.gen.rule.GenderNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.GenderNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.GenderNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.GrossYearlySalaryNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.GrossYearlySalaryNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.GrossYearlySalaryNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.HomeOrWorkPhoneRequiredRule;
import zhy2002.examples.lodgement.gen.rule.HouseDutiesFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.HouseDutiesFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.HouseDutiesFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.HousingStatusNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.HousingStatusNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.HousingStatusNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LastNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LastNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LastNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LegalActionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LiabilitiesNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LiabilitiesNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LiabilitiesNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanBreakCostNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanBreakCostNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanBreakCostNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanClearingFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanClearingFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanClearingFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanLenderNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanLenderNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanLenderNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanLimitAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanLimitAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanLimitAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanMonthlyRepaymentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanMonthlyRepaymentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanMonthlyRepaymentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanOwingAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanOwingAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanOwingAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.LoanTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.LoanTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.LoanTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MaritalStatusNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MaritalStatusNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MaritalStatusNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MobileNumberNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MobileNumberNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MobileNumberNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MonthNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MonthNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MonthNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MonthYearNotInFutureRule;
import zhy2002.examples.lodgement.gen.rule.MortgageBorrowerRateNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageBorrowerRateNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageBorrowerRateNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageBreakFeeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageBreakFeeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageBreakFeeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageChargePositionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageChargePositionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageChargePositionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageClearingFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageClearingFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageClearingFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageInterestOnlyExpiryDateNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageInterestOnlyExpiryDateNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageInterestOnlyExpiryDateNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageInterestOnlyRemainingPeriodNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageInterestOnlyRemainingPeriodNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageInterestOnlyRemainingPeriodNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageLenderInstitutionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageLenderInstitutionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageLenderInstitutionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageLimitAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageLimitAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageLimitAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageLoanTermExpiryDateNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageLoanTermExpiryDateNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageLoanTermExpiryDateNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageLoanTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageLoanTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageLoanTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageMonthlyRepaymentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageMonthlyRepaymentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageMonthlyRepaymentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgageTermRemainingPeriodNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgageTermRemainingPeriodNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgageTermRemainingPeriodNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MortgqageUnpaidBalanceNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MortgqageUnpaidBalanceNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MortgqageUnpaidBalanceNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MotorVehicleListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MotorVehicleListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MotorVehicleListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MotorVehicleNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MotorVehicleNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MotorVehicleNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MovedFromPreviousAddressNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MovedFromPreviousAddressNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MovedFromPreviousAddressNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MovedToCurrentAddressNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MovedToCurrentAddressNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MovedToCurrentAddressNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.MovedToPreviousAddressNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.MovedToPreviousAddressNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.MovedToPreviousAddressNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OccupationNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OccupationNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OccupationNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherAssetDescriptionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherAssetDescriptionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherAssetDescriptionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherAssetListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherAssetListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherAssetListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherAssetMarketValueNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherAssetMarketValueNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherAssetMarketValueNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherAssetNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherAssetNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherAssetNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherAssetTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherAssetTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherAssetTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeAddBackTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeAddBackTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeAddBackTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeDescriptionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeDescriptionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeDescriptionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherIncomePreviousYearNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherIncomePreviousYearNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherIncomePreviousYearNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeTypeChangeRule;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherIncomeTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityAmountOwningNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityAmountOwningNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityAmountOwningNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityBreakCostNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityBreakCostNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityBreakCostNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityClearingFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityClearingFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityClearingFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityDescriptionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityDescriptionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityDescriptionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityLimitAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityLimitAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityLimitAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityMonthlyRepaymentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityMonthlyRepaymentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityMonthlyRepaymentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OtherLiabilityTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OwnedOutrightFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OwnedOutrightFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OwnedOutrightFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OwnershipNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OwnershipNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OwnershipNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.OwnershipPercentageNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.OwnershipPercentageNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.OwnershipPercentageNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PayeEmployedNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PayeEmployedNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PayeEmployedNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PermanentResidentFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PermanentResidentFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PermanentResidentFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonApplicantTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonApplicantTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonApplicantTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonContactNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonContactNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonContactNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonGeneralNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonGeneralNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonGeneralNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonHomePhoneNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonHomePhoneNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonHomePhoneNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonOtherIncomeListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonOtherIncomeListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonOtherIncomeListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonPrivacyNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonPrivacyNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonPrivacyNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonResponsibleLendNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonResponsibleLendNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonResponsibleLendNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PersonTrustNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PersonTrustNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PersonTrustNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PostcodeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PostcodeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PostcodeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PreviousEmploymentListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PreviousEmploymentListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PreviousEmploymentListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PreviousEmploymentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PreviousEmploymentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PreviousEmploymentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PrimaryApplicantFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PrimaryApplicantFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PrimaryApplicantFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PrimarySecurityFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PrimarySecurityFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PrimarySecurityFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.Product100PercentOffsetFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.Product100PercentOffsetFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.Product100PercentOffsetFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductAccountHolderListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductAccountHolderListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductAccountHolderListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductCardHodlerNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductCardHodlerNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductCardHodlerNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductCardHolderNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductCardHolderNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductCardHolderNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductConsolidationFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductConsolidationFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductConsolidationFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductConstructionApplicationFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductConstructionApplicationFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductConstructionApplicationFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductCostRecuctionFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductCostRecuctionFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductCostRecuctionFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardLimitNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardLimitNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardLimitNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductCreditCardTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductCustomerContributionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductCustomerContributionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductCustomerContributionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductDescriptionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductDescriptionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductDescriptionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductDissatisfactionFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductDissatisfactionFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductDissatisfactionFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductExpressConsentFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductExpressConsentFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductExpressConsentFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductFeaturesNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductFeaturesNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductFeaturesNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductFeesNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductFeesNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductFeesNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductFixedTermNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductFixedTermNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductFixedTermNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductGroupNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductGroupNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductGroupNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductInterestOnlyTermNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductInterestOnlyTermNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductInterestOnlyTermNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductLendingPurposeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductLendingPurposeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductLendingPurposeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductLoanPrimaryPurposeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductLoanPrimaryPurposeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductLoanPrimaryPurposeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductLoanTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductLoanTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductLoanTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductOptOutReasonNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductOptOutReasonNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductOptOutReasonNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductPackageNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductPackageNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductPackageNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductPaymentTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductPaymentTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductPaymentTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductRateLockFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductRateLockFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductRateLockFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductRepaymentFrequencyNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductRepaymentFrequencyNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductRepaymentFrequencyNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductRequestedAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductRequestedAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductRequestedAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductRewardsMembershipNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductRewardsMembershipNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductRewardsMembershipNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductRewardsProgramNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductRewardsProgramNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductRewardsProgramNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductSpecificFeaturesFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductSpecificFeaturesFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductSpecificFeaturesFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanLmiAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanLmiAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanLmiAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanTermNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanTermNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLoanTermNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLvrLmiNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLvrLmiNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLvrLmiNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLvrNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLvrNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductTotalLvrNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductTotalSecurityAmountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductTotalSecurityAmountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductTotalSecurityAmountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductTransactionAccountFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductTransactionAccountFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductTransactionAccountFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProductsNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProductsNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProductsNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProfitPreviousYearNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProfitPreviousYearNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProfitPreviousYearNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ProfitThisYearNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ProfitThisYearNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ProfitThisYearNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PropertyAddressNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PropertyAddressNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PropertyAddressNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PropertyNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PropertyNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PropertyNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PropertyOwnershipListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PropertyOwnershipListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PropertyOwnershipListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PropertyPurseNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PropertyPurseNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PropertyPurseNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PropertySubTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PropertySubTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PropertySubTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PropertyTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PropertyTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PropertyTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.PropertyWeeklyRentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.PropertyWeeklyRentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.PropertyWeeklyRentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RealEstateListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RealEstateListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RealEstateListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RealEstateNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RealEstateNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RealEstateNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RelatedPartyListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RelatedPartyListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RelatedPartyListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RelatedPartyNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RelatedPartyNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RelatedPartyNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RelatedPersonReferenceNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RelatedPersonReferenceNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RelatedPersonReferenceNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RentedFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RentedFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RentedFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ResponsibleMitigationMethodNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ResponsibleMitigationMethodNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ResponsibleMitigationMethodNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ResponsibleRepaymentDifficultyNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ResponsibleRepaymentDifficultyNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ResponsibleRepaymentDifficultyNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ResponsibleSignificantChangeFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ResponsibleSignificantChangeFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ResponsibleSignificantChangeFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ResponsibleSignificantChangeRule;
import zhy2002.examples.lodgement.gen.rule.ResponsibleTypeOfChangeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ResponsibleTypeOfChangeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ResponsibleTypeOfChangeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RetiredEmploymentNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RetiredEmploymentNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RetiredEmploymentNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RetiredOnBenefitFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RetiredOnBenefitFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RetiredOnBenefitFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.RetiredSinceNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.RetiredSinceNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.RetiredSinceNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNoNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNoNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNoNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsAccountNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsBalanceNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsBalanceNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsBalanceNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsBsbNoNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsBsbNoNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsBsbNoNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsInstitutionNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsInstitutionNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsInstitutionNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsOwnershipListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsOwnershipListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsOwnershipListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SavingsTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SavingsTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SavingsTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SelectAccountHolderFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SelectAccountHolderFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SelectAccountHolderFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SelectAccountHolderNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SelectAccountHolderNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SelectAccountHolderNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SelectRelatedPersonFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SelectRelatedPersonFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SelectRelatedPersonFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SelectRelatedPersonNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SelectRelatedPersonNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SelectRelatedPersonNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SelfEmployedNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SelfEmployedNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SelfEmployedNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SettlementDateNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SettlementDateNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SettlementDateNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ShowErrorListRule;
import zhy2002.examples.lodgement.gen.rule.SpouseNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SpouseNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SpouseNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.StudentFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.StudentFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.StudentFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.StudentTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.StudentTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.StudentTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SubmissionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SubmissionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SubmissionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.SuburbNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.SuburbNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.SuburbNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TelephoneCompleteRule;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyAddressNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyAddressNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyAddressNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyCompanyNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyCompanyNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyCompanyNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDescriptionNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDescriptionNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDescriptionNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDisclosureFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDisclosureFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDisclosureFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDobNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDobNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyDobNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyEmailNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyEmailNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyEmailNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyFirstNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyFirstNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyFirstNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyLastNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyLastNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyLastNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyTitleNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyTitleNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyTitleNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyWorkPhoneNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyWorkPhoneNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.ThirdPartyWorkPhoneNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TitleGenderMatchRule;
import zhy2002.examples.lodgement.gen.rule.TitleNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TitleNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TitleNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.ToCurrentNoEarlierThanFromPreviousRule;
import zhy2002.examples.lodgement.gen.rule.ToCurrentNoEarlierThanToPreviousRule;
import zhy2002.examples.lodgement.gen.rule.TotalAssetNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TotalAssetNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TotalAssetNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TotalExpenseNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TotalExpenseNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TotalExpenseNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TotalLiabilityNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TotalLiabilityNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TotalLiabilityNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustAddressNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustAddressNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustAddressNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficialOwnerListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficialOwnerListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficialOwnerListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryClassListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryClassListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryClassListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryClassNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryClassNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryClassNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustBeneficiaryListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustCountryNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustCountryNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustCountryNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustIndustryNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustIndustryNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustIndustryNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustNameNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustNameNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustNameNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustRegistrationDateNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustRegistrationDateNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustRegistrationDateNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustSettlorListNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustSettlorListNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustSettlorListNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustSettlorNotRequiredReasonNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustSettlorNotRequiredReasonNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustSettlorNotRequiredReasonNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.TrustTypeChangedRule;
import zhy2002.examples.lodgement.gen.rule.TrustTypeNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.TrustTypeNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.TrustTypeNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.UnemployedNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.UnemployedNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.UnemployedNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.UnemployedOnBenefitFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.UnemployedOnBenefitFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.UnemployedOnBenefitFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.UnemployedSinceNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.UnemployedSinceNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.UnemployedSinceNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.UpdateAddressRefListRule;
import zhy2002.examples.lodgement.gen.rule.UpdatePersonNodeLabelRule;
import zhy2002.examples.lodgement.gen.rule.UsageNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.UsageNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.UsageNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.UsedAsSecurityFlagNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.UsedAsSecurityFlagNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.UsedAsSecurityFlagNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.VehicleMarketValueNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.VehicleMarketValueNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.VehicleMarketValueNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.VehicleModelNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.VehicleModelNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.VehicleModelNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.VehicleYearNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.VehicleYearNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.VehicleYearNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.gen.rule.YearNodeRuleProvider;
import zhy2002.examples.lodgement.gen.rule.YearNodeRuleProvider_Factory;
import zhy2002.examples.lodgement.gen.rule.YearNodeRuleProvider_MembersInjector;
import zhy2002.examples.lodgement.node.ApplicationNodeImpl;
import zhy2002.examples.lodgement.node.ApplicationNodeImpl_Factory;
import zhy2002.examples.lodgement.node.ApplicationNodeImpl_MembersInjector;
import zhy2002.examples.lodgement.rule.AddExistingApplicantsRuleImpl;
import zhy2002.examples.lodgement.rule.AddExistingApplicantsRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.AddNewCompanyApplicantRuleImpl;
import zhy2002.examples.lodgement.rule.AddNewCompanyApplicantRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.AddNewPersonApplicantRuleImpl;
import zhy2002.examples.lodgement.rule.AddNewPersonApplicantRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.AtLeastOnePrimaryApplicantRuleImpl;
import zhy2002.examples.lodgement.rule.AtLeastOnePrimaryApplicantRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.AtMostOnePrimaryApplicantRuleImpl;
import zhy2002.examples.lodgement.rule.AtMostOnePrimaryApplicantRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.ChangeApplicationTypeRuleImpl;
import zhy2002.examples.lodgement.rule.ChangeApplicationTypeRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.ChangeFocusErrorRuleImpl;
import zhy2002.examples.lodgement.rule.ChangeFocusErrorRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.CreateErrorNodeRuleImpl;
import zhy2002.examples.lodgement.rule.CreateErrorNodeRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.CreditCardClearingFlagChangedRuleImpl;
import zhy2002.examples.lodgement.rule.CreditCardClearingFlagChangedRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.DobRangeValidationRuleImpl;
import zhy2002.examples.lodgement.rule.DobRangeValidationRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.EmploymentEndedNoEarlierThanEmploymentStartedRuleImpl;
import zhy2002.examples.lodgement.rule.EmploymentEndedNoEarlierThanEmploymentStartedRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.EmploymentTypeChangedRuleImpl;
import zhy2002.examples.lodgement.rule.EmploymentTypeChangedRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.FinancialPositionChangedRuleImpl;
import zhy2002.examples.lodgement.rule.FinancialPositionChangedRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.FromPreviousNoEarlierThanToPreviousRuleImpl;
import zhy2002.examples.lodgement.rule.FromPreviousNoEarlierThanToPreviousRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.HomeOrWorkPhoneRequiredRuleImpl;
import zhy2002.examples.lodgement.rule.HomeOrWorkPhoneRequiredRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.MonthYearNotInFutureRuleImpl;
import zhy2002.examples.lodgement.rule.MonthYearNotInFutureRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.OtherIncomeTypeChangeRuleImpl;
import zhy2002.examples.lodgement.rule.OtherIncomeTypeChangeRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.ResponsibleSignificantChangeRuleImpl;
import zhy2002.examples.lodgement.rule.ResponsibleSignificantChangeRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.ShowErrorListRuleImpl;
import zhy2002.examples.lodgement.rule.ShowErrorListRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.TelephoneCompleteRuleImpl;
import zhy2002.examples.lodgement.rule.TelephoneCompleteRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.TitleGenderMatchRuleImpl;
import zhy2002.examples.lodgement.rule.TitleGenderMatchRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.ToCurrentNoEarlierThanFromPreviousRuleImpl;
import zhy2002.examples.lodgement.rule.ToCurrentNoEarlierThanFromPreviousRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.ToCurrentNoEarlierThanToPreviousRuleImpl;
import zhy2002.examples.lodgement.rule.ToCurrentNoEarlierThanToPreviousRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.TrustTypeChangedRuleImpl;
import zhy2002.examples.lodgement.rule.TrustTypeChangedRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.UpdateAddressRefListRuleImpl;
import zhy2002.examples.lodgement.rule.UpdateAddressRefListRuleImpl_Factory;
import zhy2002.examples.lodgement.rule.UpdatePersonNodeLabelRuleImpl;
import zhy2002.examples.lodgement.rule.UpdatePersonNodeLabelRuleImpl_Factory;
import zhy2002.neutron.ClassRegistryImpl;
import zhy2002.neutron.LeafUiNode;
import zhy2002.neutron.NodeFinder;
import zhy2002.neutron.NodeFinder_Factory;
import zhy2002.neutron.NodeReferenceRegistry;
import zhy2002.neutron.NodeReferenceRegistry_Factory;
import zhy2002.neutron.ObjectUiNode;
import zhy2002.neutron.UiNode;
import zhy2002.neutron.UiNodeChangeEngine;
import zhy2002.neutron.UiNodeChangeEngineImpl_Factory;
import zhy2002.neutron.UniqueIdGenerator;
import zhy2002.neutron.node.BigDecimalUiNode;
import zhy2002.neutron.node.BooleanUiNode;
import zhy2002.neutron.node.ReferenceUiNode;
import zhy2002.neutron.node.StringUiNode;
import zhy2002.neutron.rule.BooleanFixedValueValidationRule;
import zhy2002.neutron.rule.BooleanFixedValueValidationRule_Factory;
import zhy2002.neutron.rule.ClearErrorsForDisabledNodeRule;
import zhy2002.neutron.rule.ClearErrorsForDisabledNodeRule_Factory;
import zhy2002.neutron.rule.InvalidCharPreChangeRule;
import zhy2002.neutron.rule.InvalidCharPreChangeRule_Factory;
import zhy2002.neutron.rule.LeafValueRequiredValidationRule;
import zhy2002.neutron.rule.LeafValueRequiredValidationRule_Factory;
import zhy2002.neutron.rule.LengthValidationRule;
import zhy2002.neutron.rule.LengthValidationRule_Factory;
import zhy2002.neutron.rule.NodeReferenceChangeRule;
import zhy2002.neutron.rule.NodeReferenceChangeRule_Factory;
import zhy2002.neutron.rule.NodeReferenceChangeRule_MembersInjector;
import zhy2002.neutron.rule.NumberFormatValidationRule;
import zhy2002.neutron.rule.NumberFormatValidationRule_Factory;
import zhy2002.neutron.rule.ObjectValueRequiredValidationRule;
import zhy2002.neutron.rule.ObjectValueRequiredValidationRule_Factory;
import zhy2002.neutron.rule.PatternValidationRule;
import zhy2002.neutron.rule.PatternValidationRule_Factory;
import zhy2002.neutron.rule.RangeValidationRule;
import zhy2002.neutron.rule.RangeValidationRule_Factory;
import zhy2002.neutron.rule.StringEnableSiblingRule;
import zhy2002.neutron.rule.StringEnableSiblingRule_Factory;
import zhy2002.neutron.rule.UpdateObjectHasValueRule;
import zhy2002.neutron.rule.UpdateObjectHasValueRule_Factory;
import zhy2002.neutron.util.SequentialUniqueIdGenerator_Factory;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class DaggerDefaultProfileComponent implements DefaultProfileComponent {
  private Provider<NodeFinder> nodeFinderProvider;

  private Provider<NodeReferenceRegistry> nodeReferenceRegistryProvider;

  private Provider<ApplicationTypeNodeComponent.Builder>
      applicationTypeNodeComponentBuilderProvider;

  private MembersInjector<ApplicationTypeNode> applicationTypeNodeMembersInjector;

  private Provider<MaritalStatusNodeComponent.Builder> maritalStatusNodeComponentBuilderProvider;

  private MembersInjector<MaritalStatusNode> maritalStatusNodeMembersInjector;

  private Provider<FirstNameNodeComponent.Builder> firstNameNodeComponentBuilderProvider;

  private MembersInjector<FirstNameNode> firstNameNodeMembersInjector;

  private Provider<DateOfBirthNodeComponent.Builder> dateOfBirthNodeComponentBuilderProvider;

  private MembersInjector<DateOfBirthNode> dateOfBirthNodeMembersInjector;

  private Provider<PrimaryApplicantFlagNodeComponent.Builder>
      primaryApplicantFlagNodeComponentBuilderProvider;

  private MembersInjector<PrimaryApplicantFlagNode> primaryApplicantFlagNodeMembersInjector;

  private Provider<DriversLicenseNodeComponent.Builder> driversLicenseNodeComponentBuilderProvider;

  private MembersInjector<DriversLicenseNode> driversLicenseNodeMembersInjector;

  private Provider<HousingStatusNodeComponent.Builder> housingStatusNodeComponentBuilderProvider;

  private MembersInjector<HousingStatusNode> housingStatusNodeMembersInjector;

  private Provider<GenderNodeComponent.Builder> genderNodeComponentBuilderProvider;

  private MembersInjector<GenderNode> genderNodeMembersInjector;

  private Provider<FirstHomeBuyerFlagNodeComponent.Builder>
      firstHomeBuyerFlagNodeComponentBuilderProvider;

  private MembersInjector<FirstHomeBuyerFlagNode> firstHomeBuyerFlagNodeMembersInjector;

  private Provider<LastNameNodeComponent.Builder> lastNameNodeComponentBuilderProvider;

  private MembersInjector<LastNameNode> lastNameNodeMembersInjector;

  private Provider<PermanentResidentFlagNodeComponent.Builder>
      permanentResidentFlagNodeComponentBuilderProvider;

  private MembersInjector<PermanentResidentFlagNode> permanentResidentFlagNodeMembersInjector;

  private Provider<TitleNodeComponent.Builder> titleNodeComponentBuilderProvider;

  private MembersInjector<TitleNode> titleNodeMembersInjector;

  private Provider<SpouseNodeComponent.Builder> spouseNodeComponentBuilderProvider;

  private MembersInjector<SpouseNode> spouseNodeMembersInjector;

  private Provider<PersonApplicantTypeNodeComponent.Builder>
      personApplicantTypeNodeComponentBuilderProvider;

  private MembersInjector<PersonApplicantTypeNode> personApplicantTypeNodeMembersInjector;

  private MembersInjector<PersonGeneralNodeChildProvider>
      personGeneralNodeChildProviderMembersInjector;

  private Provider<PersonGeneralNodeChildProvider> personGeneralNodeChildProvider;

  private Provider<PersonGeneralNodeComponent.Builder> personGeneralNodeComponentBuilderProvider;

  private MembersInjector<PersonGeneralNode> personGeneralNodeMembersInjector;

  private Provider<OtherIncomeDescriptionNodeComponent.Builder>
      otherIncomeDescriptionNodeComponentBuilderProvider;

  private MembersInjector<OtherIncomeDescriptionNode> otherIncomeDescriptionNodeMembersInjector;

  private Provider<OtherIncomeTypeNodeComponent.Builder>
      otherIncomeTypeNodeComponentBuilderProvider;

  private MembersInjector<OtherIncomeTypeNode> otherIncomeTypeNodeMembersInjector;

  private Provider<OtherIncomeAmountNodeComponent.Builder>
      otherIncomeAmountNodeComponentBuilderProvider;

  private MembersInjector<OtherIncomeAmountNode> otherIncomeAmountNodeMembersInjector;

  private Provider<OtherIncomePreviousYearNodeComponent.Builder>
      otherIncomePreviousYearNodeComponentBuilderProvider;

  private MembersInjector<OtherIncomePreviousYearNode> otherIncomePreviousYearNodeMembersInjector;

  private Provider<OtherIncomeAddBackTypeNodeComponent.Builder>
      otherIncomeAddBackTypeNodeComponentBuilderProvider;

  private MembersInjector<OtherIncomeAddBackTypeNode> otherIncomeAddBackTypeNodeMembersInjector;

  private MembersInjector<OtherIncomeNodeChildProvider> otherIncomeNodeChildProviderMembersInjector;

  private Provider<OtherIncomeNodeChildProvider> otherIncomeNodeChildProvider;

  private Provider<OtherIncomeNodeComponent.Builder> otherIncomeNodeComponentBuilderProvider;

  private MembersInjector<OtherIncomeNode> otherIncomeNodeMembersInjector;

  private MembersInjector<BaseOtherIncomeListNodeItemProvider>
      baseOtherIncomeListNodeItemProviderMembersInjector;

  private Provider<BaseOtherIncomeListNodeItemProvider> baseOtherIncomeListNodeItemProvider;

  private Provider<PersonOtherIncomeListNodeComponent.Builder>
      personOtherIncomeListNodeComponentBuilderProvider;

  private MembersInjector<PersonOtherIncomeListNode> personOtherIncomeListNodeMembersInjector;

  private Provider<ResponsibleTypeOfChangeNodeComponent.Builder>
      responsibleTypeOfChangeNodeComponentBuilderProvider;

  private MembersInjector<ResponsibleTypeOfChangeNode> responsibleTypeOfChangeNodeMembersInjector;

  private Provider<ResponsibleMitigationMethodNodeComponent.Builder>
      responsibleMitigationMethodNodeComponentBuilderProvider;

  private MembersInjector<ResponsibleMitigationMethodNode>
      responsibleMitigationMethodNodeMembersInjector;

  private Provider<ResponsibleSignificantChangeFlagNodeComponent.Builder>
      responsibleSignificantChangeFlagNodeComponentBuilderProvider;

  private MembersInjector<ResponsibleSignificantChangeFlagNode>
      responsibleSignificantChangeFlagNodeMembersInjector;

  private Provider<ResponsibleRepaymentDifficultyNodeComponent.Builder>
      responsibleRepaymentDifficultyNodeComponentBuilderProvider;

  private MembersInjector<ResponsibleRepaymentDifficultyNode>
      responsibleRepaymentDifficultyNodeMembersInjector;

  private MembersInjector<BaseResponsibleLendNodeChildProvider>
      baseResponsibleLendNodeChildProviderMembersInjector;

  private Provider<BaseResponsibleLendNodeChildProvider> baseResponsibleLendNodeChildProvider;

  private Provider<PersonResponsibleLendNodeComponent.Builder>
      personResponsibleLendNodeComponentBuilderProvider;

  private MembersInjector<PersonResponsibleLendNode> personResponsibleLendNodeMembersInjector;

  private Provider<UnemployedOnBenefitFlagNodeComponent.Builder>
      unemployedOnBenefitFlagNodeComponentBuilderProvider;

  private MembersInjector<UnemployedOnBenefitFlagNode> unemployedOnBenefitFlagNodeMembersInjector;

  private Provider<StudentFlagNodeComponent.Builder> studentFlagNodeComponentBuilderProvider;

  private MembersInjector<StudentFlagNode> studentFlagNodeMembersInjector;

  private Provider<YearNodeComponent.Builder> yearNodeComponentBuilderProvider;

  private MembersInjector<YearNode> yearNodeMembersInjector;

  private Provider<MonthNodeComponent.Builder> monthNodeComponentBuilderProvider;

  private MembersInjector<MonthNode> monthNodeMembersInjector;

  private MembersInjector<MonthYearNodeChildProvider> monthYearNodeChildProviderMembersInjector;

  private Provider<MonthYearNodeChildProvider> monthYearNodeChildProvider;

  private Provider<UnemployedSinceNodeComponent.Builder>
      unemployedSinceNodeComponentBuilderProvider;

  private MembersInjector<UnemployedSinceNode> unemployedSinceNodeMembersInjector;

  private Provider<StudentTypeNodeComponent.Builder> studentTypeNodeComponentBuilderProvider;

  private MembersInjector<StudentTypeNode> studentTypeNodeMembersInjector;

  private Provider<HouseDutiesFlagNodeComponent.Builder>
      houseDutiesFlagNodeComponentBuilderProvider;

  private MembersInjector<HouseDutiesFlagNode> houseDutiesFlagNodeMembersInjector;

  private MembersInjector<UnemployedNodeChildProvider> unemployedNodeChildProviderMembersInjector;

  private Provider<UnemployedNodeChildProvider> unemployedNodeChildProvider;

  private Provider<UnemployedNodeComponent.Builder> unemployedNodeComponentBuilderProvider;

  private MembersInjector<UnemployedNode> unemployedNodeMembersInjector;

  private Provider<RetiredOnBenefitFlagNodeComponent.Builder>
      retiredOnBenefitFlagNodeComponentBuilderProvider;

  private MembersInjector<RetiredOnBenefitFlagNode> retiredOnBenefitFlagNodeMembersInjector;

  private Provider<RetiredSinceNodeComponent.Builder> retiredSinceNodeComponentBuilderProvider;

  private MembersInjector<RetiredSinceNode> retiredSinceNodeMembersInjector;

  private MembersInjector<RetiredEmploymentNodeChildProvider>
      retiredEmploymentNodeChildProviderMembersInjector;

  private Provider<RetiredEmploymentNodeChildProvider> retiredEmploymentNodeChildProvider;

  private Provider<RetiredEmploymentNodeComponent.Builder>
      retiredEmploymentNodeComponentBuilderProvider;

  private MembersInjector<RetiredEmploymentNode> retiredEmploymentNodeMembersInjector;

  private Provider<EmployerNameNodeComponent.Builder> employerNameNodeComponentBuilderProvider;

  private MembersInjector<EmployerNameNode> employerNameNodeMembersInjector;

  private Provider<AddressLineNodeComponent.Builder> addressLineNodeComponentBuilderProvider;

  private MembersInjector<AddressLineNode> addressLineNodeMembersInjector;

  private Provider<PostcodeNodeComponent.Builder> postcodeNodeComponentBuilderProvider;

  private MembersInjector<PostcodeNode> postcodeNodeMembersInjector;

  private Provider<SuburbNodeComponent.Builder> suburbNodeComponentBuilderProvider;

  private MembersInjector<SuburbNode> suburbNodeMembersInjector;

  private Provider<CountryNodeComponent.Builder> countryNodeComponentBuilderProvider;

  private MembersInjector<CountryNode> countryNodeMembersInjector;

  private MembersInjector<AddressNodeChildProvider> addressNodeChildProviderMembersInjector;

  private Provider<AddressNodeChildProvider> addressNodeChildProvider;

  private Provider<EmployerAddressNodeComponent.Builder>
      employerAddressNodeComponentBuilderProvider;

  private MembersInjector<EmployerAddressNode> employerAddressNodeMembersInjector;

  private Provider<OccupationNodeComponent.Builder> occupationNodeComponentBuilderProvider;

  private MembersInjector<OccupationNode> occupationNodeMembersInjector;

  private Provider<EmployerPhoneNodeComponent.Builder> employerPhoneNodeComponentBuilderProvider;

  private MembersInjector<EmployerPhoneNode> employerPhoneNodeMembersInjector;

  private Provider<EmploymentStatusNodeComponent.Builder>
      employmentStatusNodeComponentBuilderProvider;

  private MembersInjector<EmploymentStatusNode> employmentStatusNodeMembersInjector;

  private Provider<EmploymentStartedNodeComponent.Builder>
      employmentStartedNodeComponentBuilderProvider;

  private MembersInjector<EmploymentStartedNode> employmentStartedNodeMembersInjector;

  private Provider<EmploymentEndedNodeComponent.Builder>
      employmentEndedNodeComponentBuilderProvider;

  private MembersInjector<EmploymentEndedNode> employmentEndedNodeMembersInjector;

  private MembersInjector<EmployedNodeChildProvider> employedNodeChildProviderMembersInjector;

  private Provider<EmployedNodeChildProvider> provideEmployedNodeChildProvider;

  private Provider<GrossYearlySalaryNodeComponent.Builder>
      grossYearlySalaryNodeComponentBuilderProvider;

  private MembersInjector<GrossYearlySalaryNode> grossYearlySalaryNodeMembersInjector;

  private MembersInjector<PayeEmployedNodeChildProvider>
      payeEmployedNodeChildProviderMembersInjector;

  private Provider<PayeEmployedNodeChildProvider> payeEmployedNodeChildProvider;

  private Provider<PayeEmployedNodeComponent.Builder> payeEmployedNodeComponentBuilderProvider;

  private MembersInjector<PayeEmployedNode> payeEmployedNodeMembersInjector;

  private MembersInjector<EmployedNode> employedNodeMembersInjector;

  private Provider<ProfitPreviousYearNodeComponent.Builder>
      profitPreviousYearNodeComponentBuilderProvider;

  private MembersInjector<ProfitPreviousYearNode> profitPreviousYearNodeMembersInjector;

  private Provider<BusinessTypeNodeComponent.Builder> businessTypeNodeComponentBuilderProvider;

  private MembersInjector<BusinessTypeNode> businessTypeNodeMembersInjector;

  private Provider<ProfitThisYearNodeComponent.Builder> profitThisYearNodeComponentBuilderProvider;

  private MembersInjector<ProfitThisYearNode> profitThisYearNodeMembersInjector;

  private MembersInjector<SelfEmployedNodeChildProvider>
      selfEmployedNodeChildProviderMembersInjector;

  private Provider<SelfEmployedNodeChildProvider> selfEmployedNodeChildProvider;

  private Provider<SelfEmployedNodeComponent.Builder> selfEmployedNodeComponentBuilderProvider;

  private MembersInjector<SelfEmployedNode> selfEmployedNodeMembersInjector;

  private Provider<EmploymentTypeNodeComponent.Builder> employmentTypeNodeComponentBuilderProvider;

  private MembersInjector<EmploymentTypeNode> employmentTypeNodeMembersInjector;

  private MembersInjector<EmploymentNodeChildProvider> employmentNodeChildProviderMembersInjector;

  private Provider<EmploymentNodeChildProvider> employmentNodeChildProvider;

  private Provider<CurrentEmploymentNodeComponent.Builder>
      currentEmploymentNodeComponentBuilderProvider;

  private MembersInjector<CurrentEmploymentNode> currentEmploymentNodeMembersInjector;

  private MembersInjector<CurrentEmploymentListNodeItemProvider>
      currentEmploymentListNodeItemProviderMembersInjector;

  private Provider<CurrentEmploymentListNodeItemProvider> currentEmploymentListNodeItemProvider;

  private Provider<CurrentEmploymentListNodeComponent.Builder>
      currentEmploymentListNodeComponentBuilderProvider;

  private MembersInjector<CurrentEmploymentListNode> currentEmploymentListNodeMembersInjector;

  private Provider<ThirdPartyDisclosureFlagNodeComponent.Builder>
      thirdPartyDisclosureFlagNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyDisclosureFlagNode> thirdPartyDisclosureFlagNodeMembersInjector;

  private Provider<CreditHistoryNodeComponent.Builder> creditHistoryNodeComponentBuilderProvider;

  private MembersInjector<CreditHistoryNode> creditHistoryNodeMembersInjector;

  private MembersInjector<CreditHistoryListNodeItemProvider>
      creditHistoryListNodeItemProviderMembersInjector;

  private Provider<CreditHistoryListNodeItemProvider> creditHistoryListNodeItemProvider;

  private Provider<CreditHistoryListNodeComponent.Builder>
      creditHistoryListNodeComponentBuilderProvider;

  private MembersInjector<CreditHistoryListNode> creditHistoryListNodeMembersInjector;

  private Provider<LegalActionNodeComponent.Builder> legalActionNodeComponentBuilderProvider;

  private MembersInjector<LegalActionNode> legalActionNodeMembersInjector;

  private Provider<CreditCheckFlagNodeComponent.Builder>
      creditCheckFlagNodeComponentBuilderProvider;

  private MembersInjector<CreditCheckFlagNode> creditCheckFlagNodeMembersInjector;

  private MembersInjector<BasePrivacyNodeChildProvider> basePrivacyNodeChildProviderMembersInjector;

  private Provider<BasePrivacyNodeChildProvider> basePrivacyNodeChildProvider;

  private Provider<PersonPrivacyNodeComponent.Builder> personPrivacyNodeComponentBuilderProvider;

  private MembersInjector<PersonPrivacyNode> personPrivacyNodeMembersInjector;

  private Provider<MovedFromPreviousAddressNodeComponent.Builder>
      movedFromPreviousAddressNodeComponentBuilderProvider;

  private MembersInjector<MovedFromPreviousAddressNode> movedFromPreviousAddressNodeMembersInjector;

  private Provider<ContactAddressNodeComponent.Builder> contactAddressNodeComponentBuilderProvider;

  private MembersInjector<ContactAddressNode> contactAddressNodeMembersInjector;

  private Provider<ContactTelephoneNodeComponent.Builder>
      contactTelephoneNodeComponentBuilderProvider;

  private MembersInjector<ContactTelephoneNode> contactTelephoneNodeMembersInjector;

  private Provider<ContactEmailNodeComponent.Builder> contactEmailNodeComponentBuilderProvider;

  private MembersInjector<ContactEmailNode> contactEmailNodeMembersInjector;

  private Provider<MovedToPreviousAddressNodeComponent.Builder>
      movedToPreviousAddressNodeComponentBuilderProvider;

  private MembersInjector<MovedToPreviousAddressNode> movedToPreviousAddressNodeMembersInjector;

  private Provider<MobileNumberNodeComponent.Builder> mobileNumberNodeComponentBuilderProvider;

  private MembersInjector<MobileNumberNode> mobileNumberNodeMembersInjector;

  private Provider<MovedToCurrentAddressNodeComponent.Builder>
      movedToCurrentAddressNodeComponentBuilderProvider;

  private MembersInjector<MovedToCurrentAddressNode> movedToCurrentAddressNodeMembersInjector;

  private MembersInjector<BaseContactNodeChildProvider> baseContactNodeChildProviderMembersInjector;

  private Provider<BaseContactNodeChildProvider> provideBaseContactNodeChildProvider;

  private Provider<PersonHomePhoneNodeComponent.Builder>
      personHomePhoneNodeComponentBuilderProvider;

  private MembersInjector<PersonHomePhoneNode> personHomePhoneNodeMembersInjector;

  private MembersInjector<PersonContactNodeChildProvider>
      personContactNodeChildProviderMembersInjector;

  private Provider<PersonContactNodeChildProvider> personContactNodeChildProvider;

  private Provider<PersonContactNodeComponent.Builder> personContactNodeComponentBuilderProvider;

  private MembersInjector<PersonContactNode> personContactNodeMembersInjector;

  private Provider<PreviousEmploymentNodeComponent.Builder>
      previousEmploymentNodeComponentBuilderProvider;

  private MembersInjector<PreviousEmploymentNode> previousEmploymentNodeMembersInjector;

  private MembersInjector<PreviousEmploymentListNodeItemProvider>
      previousEmploymentListNodeItemProviderMembersInjector;

  private Provider<PreviousEmploymentListNodeItemProvider> previousEmploymentListNodeItemProvider;

  private Provider<PreviousEmploymentListNodeComponent.Builder>
      previousEmploymentListNodeComponentBuilderProvider;

  private MembersInjector<PreviousEmploymentListNode> previousEmploymentListNodeMembersInjector;

  private Provider<TrustRegistrationDateNodeComponent.Builder>
      trustRegistrationDateNodeComponentBuilderProvider;

  private MembersInjector<TrustRegistrationDateNode> trustRegistrationDateNodeMembersInjector;

  private Provider<TrustTypeNodeComponent.Builder> trustTypeNodeComponentBuilderProvider;

  private MembersInjector<TrustTypeNode> trustTypeNodeMembersInjector;

  private Provider<TrustSettlorNotRequiredReasonNodeComponent.Builder>
      trustSettlorNotRequiredReasonNodeComponentBuilderProvider;

  private MembersInjector<TrustSettlorNotRequiredReasonNode>
      trustSettlorNotRequiredReasonNodeMembersInjector;

  private Provider<TrustIndustryNodeComponent.Builder> trustIndustryNodeComponentBuilderProvider;

  private MembersInjector<TrustIndustryNode> trustIndustryNodeMembersInjector;

  private Provider<TrustAddressNodeComponent.Builder> trustAddressNodeComponentBuilderProvider;

  private MembersInjector<TrustAddressNode> trustAddressNodeMembersInjector;

  private Provider<SelectAccountHolderFlagNodeComponent.Builder>
      selectAccountHolderFlagNodeComponentBuilderProvider;

  private MembersInjector<SelectAccountHolderFlagNode> selectAccountHolderFlagNodeMembersInjector;

  private Provider<AccountHolderReferenceNodeComponent.Builder>
      accountHolderReferenceNodeComponentBuilderProvider;

  private MembersInjector<AccountHolderReferenceNode> accountHolderReferenceNodeMembersInjector;

  private MembersInjector<SelectAccountHolderNodeChildProvider>
      selectAccountHolderNodeChildProviderMembersInjector;

  private Provider<SelectAccountHolderNodeChildProvider> selectAccountHolderNodeChildProvider;

  private Provider<SelectAccountHolderNodeComponent.Builder>
      selectAccountHolderNodeComponentBuilderProvider;

  private MembersInjector<SelectAccountHolderNode> selectAccountHolderNodeMembersInjector;

  private MembersInjector<SelectAccountHolderListNodeItemProvider>
      selectAccountHolderListNodeItemProviderMembersInjector;

  private Provider<SelectAccountHolderListNodeItemProvider> selectAccountHolderListNodeItemProvider;

  private Provider<TrustBeneficiaryListNodeComponent.Builder>
      trustBeneficiaryListNodeComponentBuilderProvider;

  private MembersInjector<TrustBeneficiaryListNode> trustBeneficiaryListNodeMembersInjector;

  private Provider<TrustNameNodeComponent.Builder> trustNameNodeComponentBuilderProvider;

  private MembersInjector<TrustNameNode> trustNameNodeMembersInjector;

  private Provider<TrustBeneficiaryClassNodeComponent.Builder>
      trustBeneficiaryClassNodeComponentBuilderProvider;

  private MembersInjector<TrustBeneficiaryClassNode> trustBeneficiaryClassNodeMembersInjector;

  private MembersInjector<TrustBeneficiaryClassListNodeItemProvider>
      trustBeneficiaryClassListNodeItemProviderMembersInjector;

  private Provider<TrustBeneficiaryClassListNodeItemProvider>
      trustBeneficiaryClassListNodeItemProvider;

  private Provider<TrustBeneficiaryClassListNodeComponent.Builder>
      trustBeneficiaryClassListNodeComponentBuilderProvider;

  private MembersInjector<TrustBeneficiaryClassListNode>
      trustBeneficiaryClassListNodeMembersInjector;

  private Provider<TrustSettlorListNodeComponent.Builder>
      trustSettlorListNodeComponentBuilderProvider;

  private MembersInjector<TrustSettlorListNode> trustSettlorListNodeMembersInjector;

  private Provider<TrustCountryNodeComponent.Builder> trustCountryNodeComponentBuilderProvider;

  private MembersInjector<TrustCountryNode> trustCountryNodeMembersInjector;

  private Provider<TrustBeneficialOwnerListNodeComponent.Builder>
      trustBeneficialOwnerListNodeComponentBuilderProvider;

  private MembersInjector<TrustBeneficialOwnerListNode> trustBeneficialOwnerListNodeMembersInjector;

  private MembersInjector<BaseTrustNodeChildProvider> baseTrustNodeChildProviderMembersInjector;

  private Provider<BaseTrustNodeChildProvider> baseTrustNodeChildProvider;

  private Provider<PersonTrustNodeComponent.Builder> personTrustNodeComponentBuilderProvider;

  private MembersInjector<PersonTrustNode> personTrustNodeMembersInjector;

  private MembersInjector<PersonNodeChildProvider> personNodeChildProviderMembersInjector;

  private Provider<PersonNodeChildProvider> personNodeChildProvider;

  private Provider<PersonNodeComponent.Builder> personNodeComponentBuilderProvider;

  private MembersInjector<PersonNode> personNodeMembersInjector;

  private MembersInjector<PersonListNodeItemProvider> personListNodeItemProviderMembersInjector;

  private Provider<PersonListNodeItemProvider> personListNodeItemProvider;

  private Provider<PersonListNodeComponent.Builder> personListNodeComponentBuilderProvider;

  private MembersInjector<PersonListNode> personListNodeMembersInjector;

  private Provider<TotalLiabilityNodeComponent.Builder> totalLiabilityNodeComponentBuilderProvider;

  private MembersInjector<TotalLiabilityNode> totalLiabilityNodeMembersInjector;

  private Provider<TotalAssetNodeComponent.Builder> totalAssetNodeComponentBuilderProvider;

  private MembersInjector<TotalAssetNode> totalAssetNodeMembersInjector;

  private Provider<TotalExpenseNodeComponent.Builder> totalExpenseNodeComponentBuilderProvider;

  private MembersInjector<TotalExpenseNode> totalExpenseNodeMembersInjector;

  private Provider<ExpenseDescriptionNodeComponent.Builder>
      expenseDescriptionNodeComponentBuilderProvider;

  private MembersInjector<ExpenseDescriptionNode> expenseDescriptionNodeMembersInjector;

  private Provider<ExpenseTypeNodeComponent.Builder> expenseTypeNodeComponentBuilderProvider;

  private MembersInjector<ExpenseTypeNode> expenseTypeNodeMembersInjector;

  private Provider<ExpenseMonthlyRepaymentNodeComponent.Builder>
      expenseMonthlyRepaymentNodeComponentBuilderProvider;

  private MembersInjector<ExpenseMonthlyRepaymentNode> expenseMonthlyRepaymentNodeMembersInjector;

  private MembersInjector<ExpenseNodeChildProvider> expenseNodeChildProviderMembersInjector;

  private Provider<ExpenseNodeChildProvider> expenseNodeChildProvider;

  private Provider<ExpenseNodeComponent.Builder> expenseNodeComponentBuilderProvider;

  private MembersInjector<ExpenseNode> expenseNodeMembersInjector;

  private MembersInjector<ExpenseListNodeItemProvider> expenseListNodeItemProviderMembersInjector;

  private Provider<ExpenseListNodeItemProvider> expenseListNodeItemProvider;

  private Provider<ExpenseListNodeComponent.Builder> expenseListNodeComponentBuilderProvider;

  private MembersInjector<ExpenseListNode> expenseListNodeMembersInjector;

  private Provider<CreditCardLenderNameNodeComponent.Builder>
      creditCardLenderNameNodeComponentBuilderProvider;

  private MembersInjector<CreditCardLenderNameNode> creditCardLenderNameNodeMembersInjector;

  private Provider<CreditCardMonthlyRepaymentNodeComponent.Builder>
      creditCardMonthlyRepaymentNodeComponentBuilderProvider;

  private MembersInjector<CreditCardMonthlyRepaymentNode>
      creditCardMonthlyRepaymentNodeMembersInjector;

  private Provider<CreditCardAmountOwingNodeComponent.Builder>
      creditCardAmountOwingNodeComponentBuilderProvider;

  private MembersInjector<CreditCardAmountOwingNode> creditCardAmountOwingNodeMembersInjector;

  private Provider<CreditCardLimitAmountNodeComponent.Builder>
      creditCardLimitAmountNodeComponentBuilderProvider;

  private MembersInjector<CreditCardLimitAmountNode> creditCardLimitAmountNodeMembersInjector;

  private Provider<CreditCardTypeNodeComponent.Builder> creditCardTypeNodeComponentBuilderProvider;

  private MembersInjector<CreditCardTypeNode> creditCardTypeNodeMembersInjector;

  private Provider<CreditCardClearingFlagNodeComponent.Builder>
      creditCardClearingFlagNodeComponentBuilderProvider;

  private MembersInjector<CreditCardClearingFlagNode> creditCardClearingFlagNodeMembersInjector;

  private Provider<CreditCardBreakCostNodeComponent.Builder>
      creditCardBreakCostNodeComponentBuilderProvider;

  private MembersInjector<CreditCardBreakCostNode> creditCardBreakCostNodeMembersInjector;

  private MembersInjector<CreditCardNodeChildProvider> creditCardNodeChildProviderMembersInjector;

  private Provider<CreditCardNodeChildProvider> creditCardNodeChildProvider;

  private Provider<CreditCardNodeComponent.Builder> creditCardNodeComponentBuilderProvider;

  private MembersInjector<CreditCardNode> creditCardNodeMembersInjector;

  private MembersInjector<CreditCardListNodeItemProvider>
      creditCardListNodeItemProviderMembersInjector;

  private Provider<CreditCardListNodeItemProvider> creditCardListNodeItemProvider;

  private Provider<CreditCardListNodeComponent.Builder> creditCardListNodeComponentBuilderProvider;

  private MembersInjector<CreditCardListNode> creditCardListNodeMembersInjector;

  private Provider<OtherLiabilityAmountOwningNodeComponent.Builder>
      otherLiabilityAmountOwningNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityAmountOwningNode>
      otherLiabilityAmountOwningNodeMembersInjector;

  private Provider<OtherLiabilityBreakCostNodeComponent.Builder>
      otherLiabilityBreakCostNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityBreakCostNode> otherLiabilityBreakCostNodeMembersInjector;

  private Provider<OtherLiabilityLimitAmountNodeComponent.Builder>
      otherLiabilityLimitAmountNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityLimitAmountNode>
      otherLiabilityLimitAmountNodeMembersInjector;

  private Provider<OtherLiabilityMonthlyRepaymentNodeComponent.Builder>
      otherLiabilityMonthlyRepaymentNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityMonthlyRepaymentNode>
      otherLiabilityMonthlyRepaymentNodeMembersInjector;

  private Provider<OtherLiabilityClearingFlagNodeComponent.Builder>
      otherLiabilityClearingFlagNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityClearingFlagNode>
      otherLiabilityClearingFlagNodeMembersInjector;

  private Provider<OtherLiabilityDescriptionNodeComponent.Builder>
      otherLiabilityDescriptionNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityDescriptionNode>
      otherLiabilityDescriptionNodeMembersInjector;

  private Provider<OtherLiabilityTypeNodeComponent.Builder>
      otherLiabilityTypeNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityTypeNode> otherLiabilityTypeNodeMembersInjector;

  private MembersInjector<OtherLiabilityNodeChildProvider>
      otherLiabilityNodeChildProviderMembersInjector;

  private Provider<OtherLiabilityNodeChildProvider> otherLiabilityNodeChildProvider;

  private Provider<OtherLiabilityNodeComponent.Builder> otherLiabilityNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityNode> otherLiabilityNodeMembersInjector;

  private MembersInjector<OtherLiabilityListNodeItemProvider>
      otherLiabilityListNodeItemProviderMembersInjector;

  private Provider<OtherLiabilityListNodeItemProvider> otherLiabilityListNodeItemProvider;

  private Provider<OtherLiabilityListNodeComponent.Builder>
      otherLiabilityListNodeComponentBuilderProvider;

  private MembersInjector<OtherLiabilityListNode> otherLiabilityListNodeMembersInjector;

  private Provider<LoanLimitAmountNodeComponent.Builder>
      loanLimitAmountNodeComponentBuilderProvider;

  private MembersInjector<LoanLimitAmountNode> loanLimitAmountNodeMembersInjector;

  private Provider<LoanOwingAmountNodeComponent.Builder>
      loanOwingAmountNodeComponentBuilderProvider;

  private MembersInjector<LoanOwingAmountNode> loanOwingAmountNodeMembersInjector;

  private Provider<LoanTypeNodeComponent.Builder> loanTypeNodeComponentBuilderProvider;

  private MembersInjector<LoanTypeNode> loanTypeNodeMembersInjector;

  private Provider<LoanMonthlyRepaymentNodeComponent.Builder>
      loanMonthlyRepaymentNodeComponentBuilderProvider;

  private MembersInjector<LoanMonthlyRepaymentNode> loanMonthlyRepaymentNodeMembersInjector;

  private Provider<LoanClearingFlagNodeComponent.Builder>
      loanClearingFlagNodeComponentBuilderProvider;

  private MembersInjector<LoanClearingFlagNode> loanClearingFlagNodeMembersInjector;

  private Provider<LoanBreakCostNodeComponent.Builder> loanBreakCostNodeComponentBuilderProvider;

  private MembersInjector<LoanBreakCostNode> loanBreakCostNodeMembersInjector;

  private Provider<LoanLenderNameNodeComponent.Builder> loanLenderNameNodeComponentBuilderProvider;

  private MembersInjector<LoanLenderNameNode> loanLenderNameNodeMembersInjector;

  private MembersInjector<LoanNodeChildProvider> loanNodeChildProviderMembersInjector;

  private Provider<LoanNodeChildProvider> loanNodeChildProvider;

  private Provider<LoanNodeComponent.Builder> loanNodeComponentBuilderProvider;

  private MembersInjector<LoanNode> loanNodeMembersInjector;

  private MembersInjector<LoanListNodeItemProvider> loanListNodeItemProviderMembersInjector;

  private Provider<LoanListNodeItemProvider> loanListNodeItemProvider;

  private Provider<LoanListNodeComponent.Builder> loanListNodeComponentBuilderProvider;

  private MembersInjector<LoanListNode> loanListNodeMembersInjector;

  private MembersInjector<LiabilitiesNodeChildProvider> liabilitiesNodeChildProviderMembersInjector;

  private Provider<LiabilitiesNodeChildProvider> liabilitiesNodeChildProvider;

  private Provider<LiabilitiesNodeComponent.Builder> liabilitiesNodeComponentBuilderProvider;

  private MembersInjector<LiabilitiesNode> liabilitiesNodeMembersInjector;

  private Provider<OtherAssetDescriptionNodeComponent.Builder>
      otherAssetDescriptionNodeComponentBuilderProvider;

  private MembersInjector<OtherAssetDescriptionNode> otherAssetDescriptionNodeMembersInjector;

  private Provider<OtherAssetTypeNodeComponent.Builder> otherAssetTypeNodeComponentBuilderProvider;

  private MembersInjector<OtherAssetTypeNode> otherAssetTypeNodeMembersInjector;

  private Provider<OtherAssetMarketValueNodeComponent.Builder>
      otherAssetMarketValueNodeComponentBuilderProvider;

  private MembersInjector<OtherAssetMarketValueNode> otherAssetMarketValueNodeMembersInjector;

  private MembersInjector<OtherAssetNodeChildProvider> otherAssetNodeChildProviderMembersInjector;

  private Provider<OtherAssetNodeChildProvider> otherAssetNodeChildProvider;

  private Provider<OtherAssetNodeComponent.Builder> otherAssetNodeComponentBuilderProvider;

  private MembersInjector<OtherAssetNode> otherAssetNodeMembersInjector;

  private MembersInjector<OtherAssetListNodeItemProvider>
      otherAssetListNodeItemProviderMembersInjector;

  private Provider<OtherAssetListNodeItemProvider> otherAssetListNodeItemProvider;

  private Provider<OtherAssetListNodeComponent.Builder> otherAssetListNodeComponentBuilderProvider;

  private MembersInjector<OtherAssetListNode> otherAssetListNodeMembersInjector;

  private Provider<VehicleYearNodeComponent.Builder> vehicleYearNodeComponentBuilderProvider;

  private MembersInjector<VehicleYearNode> vehicleYearNodeMembersInjector;

  private Provider<VehicleModelNodeComponent.Builder> vehicleModelNodeComponentBuilderProvider;

  private MembersInjector<VehicleModelNode> vehicleModelNodeMembersInjector;

  private Provider<VehicleMarketValueNodeComponent.Builder>
      vehicleMarketValueNodeComponentBuilderProvider;

  private MembersInjector<VehicleMarketValueNode> vehicleMarketValueNodeMembersInjector;

  private MembersInjector<MotorVehicleNodeChildProvider>
      motorVehicleNodeChildProviderMembersInjector;

  private Provider<MotorVehicleNodeChildProvider> motorVehicleNodeChildProvider;

  private Provider<MotorVehicleNodeComponent.Builder> motorVehicleNodeComponentBuilderProvider;

  private MembersInjector<MotorVehicleNode> motorVehicleNodeMembersInjector;

  private MembersInjector<MotorVehicleListNodeItemProvider>
      motorVehicleListNodeItemProviderMembersInjector;

  private Provider<MotorVehicleListNodeItemProvider> motorVehicleListNodeItemProvider;

  private Provider<MotorVehicleListNodeComponent.Builder>
      motorVehicleListNodeComponentBuilderProvider;

  private MembersInjector<MotorVehicleListNode> motorVehicleListNodeMembersInjector;

  private Provider<SavingsTypeNodeComponent.Builder> savingsTypeNodeComponentBuilderProvider;

  private MembersInjector<SavingsTypeNode> savingsTypeNodeMembersInjector;

  private Provider<SavingsInstitutionNameNodeComponent.Builder>
      savingsInstitutionNameNodeComponentBuilderProvider;

  private MembersInjector<SavingsInstitutionNameNode> savingsInstitutionNameNodeMembersInjector;

  private Provider<SavingsBalanceNodeComponent.Builder> savingsBalanceNodeComponentBuilderProvider;

  private MembersInjector<SavingsBalanceNode> savingsBalanceNodeMembersInjector;

  private Provider<SavingsAccountNoNodeComponent.Builder>
      savingsAccountNoNodeComponentBuilderProvider;

  private MembersInjector<SavingsAccountNoNode> savingsAccountNoNodeMembersInjector;

  private Provider<SavingsAccountNameNodeComponent.Builder>
      savingsAccountNameNodeComponentBuilderProvider;

  private MembersInjector<SavingsAccountNameNode> savingsAccountNameNodeMembersInjector;

  private Provider<SavingsBsbNoNodeComponent.Builder> savingsBsbNoNodeComponentBuilderProvider;

  private MembersInjector<SavingsBsbNoNode> savingsBsbNoNodeMembersInjector;

  private Provider<ApplicantReferenceNodeComponent.Builder>
      applicantReferenceNodeComponentBuilderProvider;

  private MembersInjector<ApplicantReferenceNode> applicantReferenceNodeMembersInjector;

  private Provider<AverageFlagNodeComponent.Builder> averageFlagNodeComponentBuilderProvider;

  private MembersInjector<AverageFlagNode> averageFlagNodeMembersInjector;

  private Provider<OwnershipPercentageNodeComponent.Builder>
      ownershipPercentageNodeComponentBuilderProvider;

  private MembersInjector<OwnershipPercentageNode> ownershipPercentageNodeMembersInjector;

  private MembersInjector<OwnershipNodeChildProvider> ownershipNodeChildProviderMembersInjector;

  private Provider<OwnershipNodeChildProvider> ownershipNodeChildProvider;

  private Provider<OwnershipNodeComponent.Builder> ownershipNodeComponentBuilderProvider;

  private MembersInjector<OwnershipNode> ownershipNodeMembersInjector;

  private MembersInjector<OwnershipListNodeItemProvider>
      ownershipListNodeItemProviderMembersInjector;

  private Provider<OwnershipListNodeItemProvider> ownershipListNodeItemProvider;

  private Provider<SavingsOwnershipListNodeComponent.Builder>
      savingsOwnershipListNodeComponentBuilderProvider;

  private MembersInjector<SavingsOwnershipListNode> savingsOwnershipListNodeMembersInjector;

  private MembersInjector<SavingsAccountNodeChildProvider>
      savingsAccountNodeChildProviderMembersInjector;

  private Provider<SavingsAccountNodeChildProvider> savingsAccountNodeChildProvider;

  private Provider<SavingsAccountNodeComponent.Builder> savingsAccountNodeComponentBuilderProvider;

  private MembersInjector<SavingsAccountNode> savingsAccountNodeMembersInjector;

  private MembersInjector<SavingsAccountListNodeItemProvider>
      savingsAccountListNodeItemProviderMembersInjector;

  private Provider<SavingsAccountListNodeItemProvider> savingsAccountListNodeItemProvider;

  private Provider<SavingsAccountListNodeComponent.Builder>
      savingsAccountListNodeComponentBuilderProvider;

  private MembersInjector<SavingsAccountListNode> savingsAccountListNodeMembersInjector;

  private MembersInjector<AssetsNodeChildProvider> assetsNodeChildProviderMembersInjector;

  private Provider<AssetsNodeChildProvider> assetsNodeChildProvider;

  private Provider<AssetsNodeComponent.Builder> assetsNodeComponentBuilderProvider;

  private MembersInjector<AssetsNode> assetsNodeMembersInjector;

  private MembersInjector<FinancialPositionNodeChildProvider>
      financialPositionNodeChildProviderMembersInjector;

  private Provider<FinancialPositionNodeChildProvider> financialPositionNodeChildProvider;

  private Provider<FinancialPositionNodeComponent.Builder>
      financialPositionNodeComponentBuilderProvider;

  private MembersInjector<FinancialPositionNode> financialPositionNodeMembersInjector;

  private Provider<AddressRefNodeComponent.Builder> addressRefNodeComponentBuilderProvider;

  private MembersInjector<AddressRefNode> addressRefNodeMembersInjector;

  private MembersInjector<AddressRefListNodeItemProvider>
      addressRefListNodeItemProviderMembersInjector;

  private Provider<AddressRefListNodeItemProvider> addressRefListNodeItemProvider;

  private Provider<AddressRefListNodeComponent.Builder> addressRefListNodeComponentBuilderProvider;

  private MembersInjector<AddressRefListNode> addressRefListNodeMembersInjector;

  private Provider<SubmissionNodeComponent.Builder> submissionNodeComponentBuilderProvider;

  private MembersInjector<SubmissionNode> submissionNodeMembersInjector;

  private Provider<PropertyPurseNodeComponent.Builder> propertyPurseNodeComponentBuilderProvider;

  private MembersInjector<PropertyPurseNode> propertyPurseNodeMembersInjector;

  private Provider<EstimatedMarketValueNodeComponent.Builder>
      estimatedMarketValueNodeComponentBuilderProvider;

  private MembersInjector<EstimatedMarketValueNode> estimatedMarketValueNodeMembersInjector;

  private Provider<PropertyWeeklyRentNodeComponent.Builder>
      propertyWeeklyRentNodeComponentBuilderProvider;

  private MembersInjector<PropertyWeeklyRentNode> propertyWeeklyRentNodeMembersInjector;

  private Provider<PropertyAddressNodeComponent.Builder>
      propertyAddressNodeComponentBuilderProvider;

  private MembersInjector<PropertyAddressNode> propertyAddressNodeMembersInjector;

  private Provider<PropertyOwnershipListNodeComponent.Builder>
      propertyOwnershipListNodeComponentBuilderProvider;

  private MembersInjector<PropertyOwnershipListNode> propertyOwnershipListNodeMembersInjector;

  private Provider<RentedFlagNodeComponent.Builder> rentedFlagNodeComponentBuilderProvider;

  private MembersInjector<RentedFlagNode> rentedFlagNodeMembersInjector;

  private Provider<DefenseServiceFlagNodeComponent.Builder>
      defenseServiceFlagNodeComponentBuilderProvider;

  private MembersInjector<DefenseServiceFlagNode> defenseServiceFlagNodeMembersInjector;

  private Provider<PropertyTypeNodeComponent.Builder> propertyTypeNodeComponentBuilderProvider;

  private MembersInjector<PropertyTypeNode> propertyTypeNodeMembersInjector;

  private Provider<ContractPriceNodeComponent.Builder> contractPriceNodeComponentBuilderProvider;

  private MembersInjector<ContractPriceNode> contractPriceNodeMembersInjector;

  private Provider<PropertySubTypeNodeComponent.Builder>
      propertySubTypeNodeComponentBuilderProvider;

  private MembersInjector<PropertySubTypeNode> propertySubTypeNodeMembersInjector;

  private MembersInjector<PropertyNodeChildProvider> propertyNodeChildProviderMembersInjector;

  private Provider<PropertyNodeChildProvider> propertyNodeChildProvider;

  private Provider<PropertyNodeComponent.Builder> propertyNodeComponentBuilderProvider;

  private MembersInjector<PropertyNode> propertyNodeMembersInjector;

  private Provider<OwnedOutrightFlagNodeComponent.Builder>
      ownedOutrightFlagNodeComponentBuilderProvider;

  private MembersInjector<OwnedOutrightFlagNode> ownedOutrightFlagNodeMembersInjector;

  private Provider<ApprovalInPrincipleFlagNodeComponent.Builder>
      approvalInPrincipleFlagNodeComponentBuilderProvider;

  private MembersInjector<ApprovalInPrincipleFlagNode> approvalInPrincipleFlagNodeMembersInjector;

  private Provider<PrimarySecurityFlagNodeComponent.Builder>
      primarySecurityFlagNodeComponentBuilderProvider;

  private MembersInjector<PrimarySecurityFlagNode> primarySecurityFlagNodeMembersInjector;

  private Provider<BeingPurchasedFlagNodeComponent.Builder>
      beingPurchasedFlagNodeComponentBuilderProvider;

  private MembersInjector<BeingPurchasedFlagNode> beingPurchasedFlagNodeMembersInjector;

  private Provider<UsedAsSecurityFlagNodeComponent.Builder>
      usedAsSecurityFlagNodeComponentBuilderProvider;

  private MembersInjector<UsedAsSecurityFlagNode> usedAsSecurityFlagNodeMembersInjector;

  private Provider<MortgageLoanTypeNodeComponent.Builder>
      mortgageLoanTypeNodeComponentBuilderProvider;

  private MembersInjector<MortgageLoanTypeNode> mortgageLoanTypeNodeMembersInjector;

  private Provider<MortgageTermRemainingPeriodNodeComponent.Builder>
      mortgageTermRemainingPeriodNodeComponentBuilderProvider;

  private MembersInjector<MortgageTermRemainingPeriodNode>
      mortgageTermRemainingPeriodNodeMembersInjector;

  private Provider<MortgageLoanTermExpiryDateNodeComponent.Builder>
      mortgageLoanTermExpiryDateNodeComponentBuilderProvider;

  private MembersInjector<MortgageLoanTermExpiryDateNode>
      mortgageLoanTermExpiryDateNodeMembersInjector;

  private Provider<MortgageChargePositionNodeComponent.Builder>
      mortgageChargePositionNodeComponentBuilderProvider;

  private MembersInjector<MortgageChargePositionNode> mortgageChargePositionNodeMembersInjector;

  private Provider<MortgageInterestOnlyRemainingPeriodNodeComponent.Builder>
      mortgageInterestOnlyRemainingPeriodNodeComponentBuilderProvider;

  private MembersInjector<MortgageInterestOnlyRemainingPeriodNode>
      mortgageInterestOnlyRemainingPeriodNodeMembersInjector;

  private Provider<MortgqageUnpaidBalanceNodeComponent.Builder>
      mortgqageUnpaidBalanceNodeComponentBuilderProvider;

  private MembersInjector<MortgqageUnpaidBalanceNode> mortgqageUnpaidBalanceNodeMembersInjector;

  private Provider<MortgageLimitAmountNodeComponent.Builder>
      mortgageLimitAmountNodeComponentBuilderProvider;

  private MembersInjector<MortgageLimitAmountNode> mortgageLimitAmountNodeMembersInjector;

  private Provider<MortgageBreakFeeNodeComponent.Builder>
      mortgageBreakFeeNodeComponentBuilderProvider;

  private MembersInjector<MortgageBreakFeeNode> mortgageBreakFeeNodeMembersInjector;

  private Provider<MortgageLenderInstitutionNodeComponent.Builder>
      mortgageLenderInstitutionNodeComponentBuilderProvider;

  private MembersInjector<MortgageLenderInstitutionNode>
      mortgageLenderInstitutionNodeMembersInjector;

  private Provider<MortgageClearingFlagNodeComponent.Builder>
      mortgageClearingFlagNodeComponentBuilderProvider;

  private MembersInjector<MortgageClearingFlagNode> mortgageClearingFlagNodeMembersInjector;

  private Provider<MortgageMonthlyRepaymentNodeComponent.Builder>
      mortgageMonthlyRepaymentNodeComponentBuilderProvider;

  private MembersInjector<MortgageMonthlyRepaymentNode> mortgageMonthlyRepaymentNodeMembersInjector;

  private Provider<MortgageBorrowerRateNodeComponent.Builder>
      mortgageBorrowerRateNodeComponentBuilderProvider;

  private MembersInjector<MortgageBorrowerRateNode> mortgageBorrowerRateNodeMembersInjector;

  private Provider<MortgageInterestOnlyExpiryDateNodeComponent.Builder>
      mortgageInterestOnlyExpiryDateNodeComponentBuilderProvider;

  private MembersInjector<MortgageInterestOnlyExpiryDateNode>
      mortgageInterestOnlyExpiryDateNodeMembersInjector;

  private MembersInjector<ExistingMortgageNodeChildProvider>
      existingMortgageNodeChildProviderMembersInjector;

  private Provider<ExistingMortgageNodeChildProvider> existingMortgageNodeChildProvider;

  private Provider<ExistingMortgageNodeComponent.Builder>
      existingMortgageNodeComponentBuilderProvider;

  private MembersInjector<ExistingMortgageNode> existingMortgageNodeMembersInjector;

  private MembersInjector<ExistingMortgageListNodeItemProvider>
      existingMortgageListNodeItemProviderMembersInjector;

  private Provider<ExistingMortgageListNodeItemProvider> existingMortgageListNodeItemProvider;

  private Provider<ExistingMortgageListNodeComponent.Builder>
      existingMortgageListNodeComponentBuilderProvider;

  private MembersInjector<ExistingMortgageListNode> existingMortgageListNodeMembersInjector;

  private MembersInjector<UsageNodeChildProvider> usageNodeChildProviderMembersInjector;

  private Provider<UsageNodeChildProvider> usageNodeChildProvider;

  private Provider<UsageNodeComponent.Builder> usageNodeComponentBuilderProvider;

  private MembersInjector<UsageNode> usageNodeMembersInjector;

  private Provider<AccessContactLastNameNodeComponent.Builder>
      accessContactLastNameNodeComponentBuilderProvider;

  private MembersInjector<AccessContactLastNameNode> accessContactLastNameNodeMembersInjector;

  private Provider<AccessOtherDescriptionNodeComponent.Builder>
      accessOtherDescriptionNodeComponentBuilderProvider;

  private MembersInjector<AccessOtherDescriptionNode> accessOtherDescriptionNodeMembersInjector;

  private Provider<AccessContactFirstNameNodeComponent.Builder>
      accessContactFirstNameNodeComponentBuilderProvider;

  private MembersInjector<AccessContactFirstNameNode> accessContactFirstNameNodeMembersInjector;

  private Provider<AccessContactTypeNodeComponent.Builder>
      accessContactTypeNodeComponentBuilderProvider;

  private MembersInjector<AccessContactTypeNode> accessContactTypeNodeMembersInjector;

  private Provider<AccessContactTitleNodeComponent.Builder>
      accessContactTitleNodeComponentBuilderProvider;

  private MembersInjector<AccessContactTitleNode> accessContactTitleNodeMembersInjector;

  private Provider<AccessTelephoneNodeComponent.Builder>
      accessTelephoneNodeComponentBuilderProvider;

  private MembersInjector<AccessTelephoneNode> accessTelephoneNodeMembersInjector;

  private Provider<AccessCompanyNameNodeComponent.Builder>
      accessCompanyNameNodeComponentBuilderProvider;

  private MembersInjector<AccessCompanyNameNode> accessCompanyNameNodeMembersInjector;

  private MembersInjector<AccessNodeChildProvider> accessNodeChildProviderMembersInjector;

  private Provider<AccessNodeChildProvider> accessNodeChildProvider;

  private Provider<AccessNodeComponent.Builder> accessNodeComponentBuilderProvider;

  private MembersInjector<AccessNode> accessNodeMembersInjector;

  private MembersInjector<RealEstateNodeChildProvider> realEstateNodeChildProviderMembersInjector;

  private Provider<RealEstateNodeChildProvider> realEstateNodeChildProvider;

  private Provider<RealEstateNodeComponent.Builder> realEstateNodeComponentBuilderProvider;

  private MembersInjector<RealEstateNode> realEstateNodeMembersInjector;

  private MembersInjector<RealEstateListNodeItemProvider>
      realEstateListNodeItemProviderMembersInjector;

  private Provider<RealEstateListNodeItemProvider> realEstateListNodeItemProvider;

  private Provider<RealEstateListNodeComponent.Builder> realEstateListNodeComponentBuilderProvider;

  private MembersInjector<RealEstateListNode> realEstateListNodeMembersInjector;

  private Provider<CompanyPrivacyNodeComponent.Builder> companyPrivacyNodeComponentBuilderProvider;

  private MembersInjector<CompanyPrivacyNode> companyPrivacyNodeMembersInjector;

  private Provider<CompanyOtherIncomeListNodeComponent.Builder>
      companyOtherIncomeListNodeComponentBuilderProvider;

  private MembersInjector<CompanyOtherIncomeListNode> companyOtherIncomeListNodeMembersInjector;

  private Provider<CompanyResponsibleLendNodeComponent.Builder>
      companyResponsibleLendNodeComponentBuilderProvider;

  private MembersInjector<CompanyResponsibleLendNode> companyResponsibleLendNodeMembersInjector;

  private Provider<CompanyContactFirstNameNodeComponent.Builder>
      companyContactFirstNameNodeComponentBuilderProvider;

  private MembersInjector<CompanyContactFirstNameNode> companyContactFirstNameNodeMembersInjector;

  private Provider<CompanyContactLastNameNodeComponent.Builder>
      companyContactLastNameNodeComponentBuilderProvider;

  private MembersInjector<CompanyContactLastNameNode> companyContactLastNameNodeMembersInjector;

  private MembersInjector<CompanyContactNodeChildProvider>
      companyContactNodeChildProviderMembersInjector;

  private Provider<CompanyContactNodeChildProvider> companyContactNodeChildProvider;

  private Provider<CompanyContactNodeComponent.Builder> companyContactNodeComponentBuilderProvider;

  private MembersInjector<CompanyContactNode> companyContactNodeMembersInjector;

  private Provider<CompanyRegistrationDateNodeComponent.Builder>
      companyRegistrationDateNodeComponentBuilderProvider;

  private MembersInjector<CompanyRegistrationDateNode> companyRegistrationDateNodeMembersInjector;

  private Provider<RelatedPersonReferenceNodeComponent.Builder>
      relatedPersonReferenceNodeComponentBuilderProvider;

  private MembersInjector<RelatedPersonReferenceNode> relatedPersonReferenceNodeMembersInjector;

  private Provider<SelectRelatedPersonFlagNodeComponent.Builder>
      selectRelatedPersonFlagNodeComponentBuilderProvider;

  private MembersInjector<SelectRelatedPersonFlagNode> selectRelatedPersonFlagNodeMembersInjector;

  private MembersInjector<SelectRelatedPersonNodeChildProvider>
      selectRelatedPersonNodeChildProviderMembersInjector;

  private Provider<SelectRelatedPersonNodeChildProvider> selectRelatedPersonNodeChildProvider;

  private Provider<SelectRelatedPersonNodeComponent.Builder>
      selectRelatedPersonNodeComponentBuilderProvider;

  private MembersInjector<SelectRelatedPersonNode> selectRelatedPersonNodeMembersInjector;

  private MembersInjector<SelectRelatedPersonListNodeItemProvider>
      selectRelatedPersonListNodeItemProviderMembersInjector;

  private Provider<SelectRelatedPersonListNodeItemProvider> selectRelatedPersonListNodeItemProvider;

  private Provider<CompanySelectBeneficialOwnerNodeComponent.Builder>
      companySelectBeneficialOwnerNodeComponentBuilderProvider;

  private MembersInjector<CompanySelectBeneficialOwnerNode>
      companySelectBeneficialOwnerNodeMembersInjector;

  private Provider<CompanyAbnNodeComponent.Builder> companyAbnNodeComponentBuilderProvider;

  private MembersInjector<CompanyAbnNode> companyAbnNodeMembersInjector;

  private Provider<CompanyTypeNodeComponent.Builder> companyTypeNodeComponentBuilderProvider;

  private MembersInjector<CompanyTypeNode> companyTypeNodeMembersInjector;

  private Provider<CompanyRegistrationStateNodeComponent.Builder>
      companyRegistrationStateNodeComponentBuilderProvider;

  private MembersInjector<CompanyRegistrationStateNode> companyRegistrationStateNodeMembersInjector;

  private Provider<CompanyAbrnNodeComponent.Builder> companyAbrnNodeComponentBuilderProvider;

  private MembersInjector<CompanyAbrnNode> companyAbrnNodeMembersInjector;

  private Provider<CompanyDescriptionNodeComponent.Builder>
      companyDescriptionNodeComponentBuilderProvider;

  private MembersInjector<CompanyDescriptionNode> companyDescriptionNodeMembersInjector;

  private Provider<CompanyApplicationTypeNodeComponent.Builder>
      companyApplicationTypeNodeComponentBuilderProvider;

  private MembersInjector<CompanyApplicationTypeNode> companyApplicationTypeNodeMembersInjector;

  private Provider<CompanyIndustryNodeComponent.Builder>
      companyIndustryNodeComponentBuilderProvider;

  private MembersInjector<CompanyIndustryNode> companyIndustryNodeMembersInjector;

  private Provider<CompanySelectDirectorNodeComponent.Builder>
      companySelectDirectorNodeComponentBuilderProvider;

  private MembersInjector<CompanySelectDirectorNode> companySelectDirectorNodeMembersInjector;

  private Provider<CompanyApplicantTypeNodeComponent.Builder>
      companyApplicantTypeNodeComponentBuilderProvider;

  private MembersInjector<CompanyApplicantTypeNode> companyApplicantTypeNodeMembersInjector;

  private Provider<CompanyRegisteredNameNodeComponent.Builder>
      companyRegisteredNameNodeComponentBuilderProvider;

  private MembersInjector<CompanyRegisteredNameNode> companyRegisteredNameNodeMembersInjector;

  private Provider<CompanyPrimaryApplicantFlagNodeComponent.Builder>
      companyPrimaryApplicantFlagNodeComponentBuilderProvider;

  private MembersInjector<CompanyPrimaryApplicantFlagNode>
      companyPrimaryApplicantFlagNodeMembersInjector;

  private Provider<CompanyAcnNodeComponent.Builder> companyAcnNodeComponentBuilderProvider;

  private MembersInjector<CompanyAcnNode> companyAcnNodeMembersInjector;

  private MembersInjector<CompanyGeneralNodeChildProvider>
      companyGeneralNodeChildProviderMembersInjector;

  private Provider<CompanyGeneralNodeChildProvider> companyGeneralNodeChildProvider;

  private Provider<CompanyGeneralNodeComponent.Builder> companyGeneralNodeComponentBuilderProvider;

  private MembersInjector<CompanyGeneralNode> companyGeneralNodeMembersInjector;

  private Provider<CompanyTrustNodeComponent.Builder> companyTrustNodeComponentBuilderProvider;

  private MembersInjector<CompanyTrustNode> companyTrustNodeMembersInjector;

  private MembersInjector<CompanyNodeChildProvider> companyNodeChildProviderMembersInjector;

  private Provider<CompanyNodeChildProvider> companyNodeChildProvider;

  private Provider<CompanyNodeComponent.Builder> companyNodeComponentBuilderProvider;

  private MembersInjector<CompanyNode> companyNodeMembersInjector;

  private MembersInjector<CompanyListNodeItemProvider> companyListNodeItemProviderMembersInjector;

  private Provider<CompanyListNodeItemProvider> companyListNodeItemProvider;

  private Provider<CompanyListNodeComponent.Builder> companyListNodeComponentBuilderProvider;

  private MembersInjector<CompanyListNode> companyListNodeMembersInjector;

  private Provider<SettlementDateNodeComponent.Builder> settlementDateNodeComponentBuilderProvider;

  private MembersInjector<SettlementDateNode> settlementDateNodeMembersInjector;

  private Provider<ProductTotalSecurityAmountNodeComponent.Builder>
      productTotalSecurityAmountNodeComponentBuilderProvider;

  private MembersInjector<ProductTotalSecurityAmountNode>
      productTotalSecurityAmountNodeMembersInjector;

  private Provider<ProductLoanTypeNodeComponent.Builder>
      productLoanTypeNodeComponentBuilderProvider;

  private MembersInjector<ProductLoanTypeNode> productLoanTypeNodeMembersInjector;

  private Provider<ProductTotalLoanAmountNodeComponent.Builder>
      productTotalLoanAmountNodeComponentBuilderProvider;

  private MembersInjector<ProductTotalLoanAmountNode> productTotalLoanAmountNodeMembersInjector;

  private Provider<ProductTotalLvrLmiNodeComponent.Builder>
      productTotalLvrLmiNodeComponentBuilderProvider;

  private MembersInjector<ProductTotalLvrLmiNode> productTotalLvrLmiNodeMembersInjector;

  private Provider<ProductCustomerContributionNodeComponent.Builder>
      productCustomerContributionNodeComponentBuilderProvider;

  private MembersInjector<ProductCustomerContributionNode>
      productCustomerContributionNodeMembersInjector;

  private Provider<ProductRequestedAmountNodeComponent.Builder>
      productRequestedAmountNodeComponentBuilderProvider;

  private MembersInjector<ProductRequestedAmountNode> productRequestedAmountNodeMembersInjector;

  private Provider<ProductFixedTermNodeComponent.Builder>
      productFixedTermNodeComponentBuilderProvider;

  private MembersInjector<ProductFixedTermNode> productFixedTermNodeMembersInjector;

  private Provider<ProductGroupNodeComponent.Builder> productGroupNodeComponentBuilderProvider;

  private MembersInjector<ProductGroupNode> productGroupNodeMembersInjector;

  private Provider<ProductPaymentTypeNodeComponent.Builder>
      productPaymentTypeNodeComponentBuilderProvider;

  private MembersInjector<ProductPaymentTypeNode> productPaymentTypeNodeMembersInjector;

  private Provider<ProductLendingPurposeNodeComponent.Builder>
      productLendingPurposeNodeComponentBuilderProvider;

  private MembersInjector<ProductLendingPurposeNode> productLendingPurposeNodeMembersInjector;

  private Provider<ProductConsolidationFlagNodeComponent.Builder>
      productConsolidationFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductConsolidationFlagNode> productConsolidationFlagNodeMembersInjector;

  private Provider<ProductCostRecuctionFlagNodeComponent.Builder>
      productCostRecuctionFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductCostRecuctionFlagNode> productCostRecuctionFlagNodeMembersInjector;

  private Provider<ProductAccountHolderListNodeComponent.Builder>
      productAccountHolderListNodeComponentBuilderProvider;

  private MembersInjector<ProductAccountHolderListNode> productAccountHolderListNodeMembersInjector;

  private Provider<ProductLoanPrimaryPurposeNodeComponent.Builder>
      productLoanPrimaryPurposeNodeComponentBuilderProvider;

  private MembersInjector<ProductLoanPrimaryPurposeNode>
      productLoanPrimaryPurposeNodeMembersInjector;

  private Provider<ProductTotalLoanTermNodeComponent.Builder>
      productTotalLoanTermNodeComponentBuilderProvider;

  private MembersInjector<ProductTotalLoanTermNode> productTotalLoanTermNodeMembersInjector;

  private Provider<ProductDissatisfactionFlagNodeComponent.Builder>
      productDissatisfactionFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductDissatisfactionFlagNode>
      productDissatisfactionFlagNodeMembersInjector;

  private Provider<ProductNameNodeComponent.Builder> productNameNodeComponentBuilderProvider;

  private MembersInjector<ProductNameNode> productNameNodeMembersInjector;

  private Provider<ProductSpecificFeaturesFlagNodeComponent.Builder>
      productSpecificFeaturesFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductSpecificFeaturesFlagNode>
      productSpecificFeaturesFlagNodeMembersInjector;

  private Provider<ProductConstructionApplicationFlagNodeComponent.Builder>
      productConstructionApplicationFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductConstructionApplicationFlagNode>
      productConstructionApplicationFlagNodeMembersInjector;

  private Provider<ProductInterestOnlyTermNodeComponent.Builder>
      productInterestOnlyTermNodeComponentBuilderProvider;

  private MembersInjector<ProductInterestOnlyTermNode> productInterestOnlyTermNodeMembersInjector;

  private MembersInjector<ProductDescriptionNodeChildProvider>
      productDescriptionNodeChildProviderMembersInjector;

  private Provider<ProductDescriptionNodeChildProvider> productDescriptionNodeChildProvider;

  private Provider<ProductDescriptionNodeComponent.Builder>
      productDescriptionNodeComponentBuilderProvider;

  private MembersInjector<ProductDescriptionNode> productDescriptionNodeMembersInjector;

  private Provider<ProductRewardsMembershipNodeComponent.Builder>
      productRewardsMembershipNodeComponentBuilderProvider;

  private MembersInjector<ProductRewardsMembershipNode> productRewardsMembershipNodeMembersInjector;

  private Provider<ProductCardHodlerNameNodeComponent.Builder>
      productCardHodlerNameNodeComponentBuilderProvider;

  private MembersInjector<ProductCardHodlerNameNode> productCardHodlerNameNodeMembersInjector;

  private Provider<ProductRewardsProgramNodeComponent.Builder>
      productRewardsProgramNodeComponentBuilderProvider;

  private MembersInjector<ProductRewardsProgramNode> productRewardsProgramNodeMembersInjector;

  private MembersInjector<ProductCardHolderNodeChildProvider>
      productCardHolderNodeChildProviderMembersInjector;

  private Provider<ProductCardHolderNodeChildProvider> productCardHolderNodeChildProvider;

  private Provider<ProductCardHolderNodeComponent.Builder>
      productCardHolderNodeComponentBuilderProvider;

  private MembersInjector<ProductCardHolderNode> productCardHolderNodeMembersInjector;

  private Provider<ProductCreditCardFlagNodeComponent.Builder>
      productCreditCardFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductCreditCardFlagNode> productCreditCardFlagNodeMembersInjector;

  private Provider<ProductExpressConsentFlagNodeComponent.Builder>
      productExpressConsentFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductExpressConsentFlagNode>
      productExpressConsentFlagNodeMembersInjector;

  private Provider<Product100PercentOffsetFlagNodeComponent.Builder>
      product100PercentOffsetFlagNodeComponentBuilderProvider;

  private MembersInjector<Product100PercentOffsetFlagNode>
      product100PercentOffsetFlagNodeMembersInjector;

  private Provider<ProductCreditCardTypeNodeComponent.Builder>
      productCreditCardTypeNodeComponentBuilderProvider;

  private MembersInjector<ProductCreditCardTypeNode> productCreditCardTypeNodeMembersInjector;

  private Provider<ProductRepaymentFrequencyNodeComponent.Builder>
      productRepaymentFrequencyNodeComponentBuilderProvider;

  private MembersInjector<ProductRepaymentFrequencyNode>
      productRepaymentFrequencyNodeMembersInjector;

  private Provider<ProductPackageNameNodeComponent.Builder>
      productPackageNameNodeComponentBuilderProvider;

  private MembersInjector<ProductPackageNameNode> productPackageNameNodeMembersInjector;

  private Provider<ProductTransactionAccountFlagNodeComponent.Builder>
      productTransactionAccountFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductTransactionAccountFlagNode>
      productTransactionAccountFlagNodeMembersInjector;

  private Provider<ProductOptOutReasonNodeComponent.Builder>
      productOptOutReasonNodeComponentBuilderProvider;

  private MembersInjector<ProductOptOutReasonNode> productOptOutReasonNodeMembersInjector;

  private Provider<ProductCreditCardLimitNodeComponent.Builder>
      productCreditCardLimitNodeComponentBuilderProvider;

  private MembersInjector<ProductCreditCardLimitNode> productCreditCardLimitNodeMembersInjector;

  private Provider<ProductRateLockFlagNodeComponent.Builder>
      productRateLockFlagNodeComponentBuilderProvider;

  private MembersInjector<ProductRateLockFlagNode> productRateLockFlagNodeMembersInjector;

  private MembersInjector<ProductFeaturesNodeChildProvider>
      productFeaturesNodeChildProviderMembersInjector;

  private Provider<ProductFeaturesNodeChildProvider> productFeaturesNodeChildProvider;

  private Provider<ProductFeaturesNodeComponent.Builder>
      productFeaturesNodeComponentBuilderProvider;

  private MembersInjector<ProductFeaturesNode> productFeaturesNodeMembersInjector;

  private MembersInjector<ProductNodeChildProvider> productNodeChildProviderMembersInjector;

  private Provider<ProductNodeChildProvider> productNodeChildProvider;

  private Provider<ProductNodeComponent.Builder> productNodeComponentBuilderProvider;

  private MembersInjector<ProductNode> productNodeMembersInjector;

  private MembersInjector<ProductListNodeItemProvider> productListNodeItemProviderMembersInjector;

  private Provider<ProductListNodeItemProvider> productListNodeItemProvider;

  private Provider<ProductListNodeComponent.Builder> productListNodeComponentBuilderProvider;

  private MembersInjector<ProductListNode> productListNodeMembersInjector;

  private Provider<ProductTotalLoanLmiAmountNodeComponent.Builder>
      productTotalLoanLmiAmountNodeComponentBuilderProvider;

  private MembersInjector<ProductTotalLoanLmiAmountNode>
      productTotalLoanLmiAmountNodeMembersInjector;

  private Provider<ProductFeesNodeComponent.Builder> productFeesNodeComponentBuilderProvider;

  private MembersInjector<ProductFeesNode> productFeesNodeMembersInjector;

  private Provider<ProductTotalLvrNodeComponent.Builder>
      productTotalLvrNodeComponentBuilderProvider;

  private MembersInjector<ProductTotalLvrNode> productTotalLvrNodeMembersInjector;

  private MembersInjector<ProductsNodeChildProvider> productsNodeChildProviderMembersInjector;

  private Provider<ProductsNodeChildProvider> productsNodeChildProvider;

  private Provider<ProductsNodeComponent.Builder> productsNodeComponentBuilderProvider;

  private MembersInjector<ProductsNode> productsNodeMembersInjector;

  private Provider<ErrorNodeComponent.Builder> errorNodeComponentBuilderProvider;

  private MembersInjector<ErrorNode> errorNodeMembersInjector;

  private MembersInjector<ErrorListNodeItemProvider> errorListNodeItemProviderMembersInjector;

  private Provider<ErrorListNodeItemProvider> errorListNodeItemProvider;

  private Provider<ErrorListNodeComponent.Builder> errorListNodeComponentBuilderProvider;

  private MembersInjector<ErrorListNode> errorListNodeMembersInjector;

  private Provider<ThirdPartyDobNodeComponent.Builder> thirdPartyDobNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyDobNode> thirdPartyDobNodeMembersInjector;

  private Provider<ThirdPartyWorkPhoneNodeComponent.Builder>
      thirdPartyWorkPhoneNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyWorkPhoneNode> thirdPartyWorkPhoneNodeMembersInjector;

  private Provider<ThirdPartyLastNameNodeComponent.Builder>
      thirdPartyLastNameNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyLastNameNode> thirdPartyLastNameNodeMembersInjector;

  private Provider<ThirdPartyCompanyNameNodeComponent.Builder>
      thirdPartyCompanyNameNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyCompanyNameNode> thirdPartyCompanyNameNodeMembersInjector;

  private Provider<ThirdPartyAddressNodeComponent.Builder>
      thirdPartyAddressNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyAddressNode> thirdPartyAddressNodeMembersInjector;

  private Provider<ThirdPartyEmailNodeComponent.Builder>
      thirdPartyEmailNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyEmailNode> thirdPartyEmailNodeMembersInjector;

  private Provider<ThirdPartyTypeNodeComponent.Builder> thirdPartyTypeNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyTypeNode> thirdPartyTypeNodeMembersInjector;

  private Provider<ThirdPartyTitleNodeComponent.Builder>
      thirdPartyTitleNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyTitleNode> thirdPartyTitleNodeMembersInjector;

  private Provider<ThirdPartyDescriptionNodeComponent.Builder>
      thirdPartyDescriptionNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyDescriptionNode> thirdPartyDescriptionNodeMembersInjector;

  private Provider<ThirdPartyFirstNameNodeComponent.Builder>
      thirdPartyFirstNameNodeComponentBuilderProvider;

  private MembersInjector<ThirdPartyFirstNameNode> thirdPartyFirstNameNodeMembersInjector;

  private MembersInjector<RelatedPartyNodeChildProvider>
      relatedPartyNodeChildProviderMembersInjector;

  private Provider<RelatedPartyNodeChildProvider> relatedPartyNodeChildProvider;

  private Provider<RelatedPartyNodeComponent.Builder> relatedPartyNodeComponentBuilderProvider;

  private MembersInjector<RelatedPartyNode> relatedPartyNodeMembersInjector;

  private MembersInjector<RelatedPartyListNodeItemProvider>
      relatedPartyListNodeItemProviderMembersInjector;

  private Provider<RelatedPartyListNodeItemProvider> relatedPartyListNodeItemProvider;

  private Provider<RelatedPartyListNodeComponent.Builder>
      relatedPartyListNodeComponentBuilderProvider;

  private MembersInjector<RelatedPartyListNode> relatedPartyListNodeMembersInjector;

  private Provider<AdditionalCommentNodeComponent.Builder>
      additionalCommentNodeComponentBuilderProvider;

  private MembersInjector<AdditionalCommentNode> additionalCommentNodeMembersInjector;

  private MembersInjector<AdditionalNodeChildProvider> additionalNodeChildProviderMembersInjector;

  private Provider<AdditionalNodeChildProvider> additionalNodeChildProvider;

  private Provider<AdditionalNodeComponent.Builder> additionalNodeComponentBuilderProvider;

  private MembersInjector<AdditionalNode> additionalNodeMembersInjector;

  private MembersInjector<ApplicationNodeChildProvider> applicationNodeChildProviderMembersInjector;

  private Provider<ApplicationNodeChildProvider> provideApplicationNodeChildProvider;

  private Provider<ApplicationNodeComponent.Builder> applicationNodeComponentBuilderProvider;

  private MembersInjector<ApplicationNodeImpl> applicationNodeImplMembersInjector;

  private Provider<ApplicationNodeImpl> applicationNodeImplProvider;

  private Provider<ApplicationNode> provideApplicationNodeProvider;

  private MembersInjector<ApplicationNodeContext> applicationNodeContextMembersInjector;

  private Provider<UiNodeChangeEngine> provideUiNodeChangeEngineProvider;

  private Provider<UniqueIdGenerator> provideSequentialUniqueIdGeneratorProvider;

  private Provider<ApplicationNodeClassRegistry> applicationNodeClassRegistryProvider;

  private Provider<ClassRegistryImpl> provideClassRegistryImplProvider;

  private Provider<ApplicationNodeContext> applicationNodeContextProvider;

  private DaggerDefaultProfileComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
    initialize2(builder);
    initialize3(builder);
    initialize4(builder);
    initialize5(builder);
    initialize6(builder);
    initialize7(builder);
    initialize8(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static DefaultProfileComponent create() {
    return builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.nodeFinderProvider = DoubleCheck.provider(NodeFinder_Factory.create());

    this.nodeReferenceRegistryProvider =
        DoubleCheck.provider(NodeReferenceRegistry_Factory.create());

    this.applicationTypeNodeComponentBuilderProvider =
        new Factory<ApplicationTypeNodeComponent.Builder>() {
          @Override
          public ApplicationTypeNodeComponent.Builder get() {
            return new ApplicationTypeNodeComponentBuilder();
          }
        };

    this.applicationTypeNodeMembersInjector =
        ApplicationTypeNode_MembersInjector.create(applicationTypeNodeComponentBuilderProvider);

    this.maritalStatusNodeComponentBuilderProvider =
        new Factory<MaritalStatusNodeComponent.Builder>() {
          @Override
          public MaritalStatusNodeComponent.Builder get() {
            return new MaritalStatusNodeComponentBuilder();
          }
        };

    this.maritalStatusNodeMembersInjector =
        MaritalStatusNode_MembersInjector.create(maritalStatusNodeComponentBuilderProvider);

    this.firstNameNodeComponentBuilderProvider =
        new Factory<FirstNameNodeComponent.Builder>() {
          @Override
          public FirstNameNodeComponent.Builder get() {
            return new FirstNameNodeComponentBuilder();
          }
        };

    this.firstNameNodeMembersInjector =
        FirstNameNode_MembersInjector.create(firstNameNodeComponentBuilderProvider);

    this.dateOfBirthNodeComponentBuilderProvider =
        new Factory<DateOfBirthNodeComponent.Builder>() {
          @Override
          public DateOfBirthNodeComponent.Builder get() {
            return new DateOfBirthNodeComponentBuilder();
          }
        };

    this.dateOfBirthNodeMembersInjector =
        DateOfBirthNode_MembersInjector.create(dateOfBirthNodeComponentBuilderProvider);

    this.primaryApplicantFlagNodeComponentBuilderProvider =
        new Factory<PrimaryApplicantFlagNodeComponent.Builder>() {
          @Override
          public PrimaryApplicantFlagNodeComponent.Builder get() {
            return new PrimaryApplicantFlagNodeComponentBuilder();
          }
        };

    this.primaryApplicantFlagNodeMembersInjector =
        PrimaryApplicantFlagNode_MembersInjector.create(
            primaryApplicantFlagNodeComponentBuilderProvider);

    this.driversLicenseNodeComponentBuilderProvider =
        new Factory<DriversLicenseNodeComponent.Builder>() {
          @Override
          public DriversLicenseNodeComponent.Builder get() {
            return new DriversLicenseNodeComponentBuilder();
          }
        };

    this.driversLicenseNodeMembersInjector =
        DriversLicenseNode_MembersInjector.create(driversLicenseNodeComponentBuilderProvider);

    this.housingStatusNodeComponentBuilderProvider =
        new Factory<HousingStatusNodeComponent.Builder>() {
          @Override
          public HousingStatusNodeComponent.Builder get() {
            return new HousingStatusNodeComponentBuilder();
          }
        };

    this.housingStatusNodeMembersInjector =
        HousingStatusNode_MembersInjector.create(housingStatusNodeComponentBuilderProvider);

    this.genderNodeComponentBuilderProvider =
        new Factory<GenderNodeComponent.Builder>() {
          @Override
          public GenderNodeComponent.Builder get() {
            return new GenderNodeComponentBuilder();
          }
        };

    this.genderNodeMembersInjector =
        GenderNode_MembersInjector.create(genderNodeComponentBuilderProvider);

    this.firstHomeBuyerFlagNodeComponentBuilderProvider =
        new Factory<FirstHomeBuyerFlagNodeComponent.Builder>() {
          @Override
          public FirstHomeBuyerFlagNodeComponent.Builder get() {
            return new FirstHomeBuyerFlagNodeComponentBuilder();
          }
        };

    this.firstHomeBuyerFlagNodeMembersInjector =
        FirstHomeBuyerFlagNode_MembersInjector.create(
            firstHomeBuyerFlagNodeComponentBuilderProvider);

    this.lastNameNodeComponentBuilderProvider =
        new Factory<LastNameNodeComponent.Builder>() {
          @Override
          public LastNameNodeComponent.Builder get() {
            return new LastNameNodeComponentBuilder();
          }
        };

    this.lastNameNodeMembersInjector =
        LastNameNode_MembersInjector.create(lastNameNodeComponentBuilderProvider);

    this.permanentResidentFlagNodeComponentBuilderProvider =
        new Factory<PermanentResidentFlagNodeComponent.Builder>() {
          @Override
          public PermanentResidentFlagNodeComponent.Builder get() {
            return new PermanentResidentFlagNodeComponentBuilder();
          }
        };

    this.permanentResidentFlagNodeMembersInjector =
        PermanentResidentFlagNode_MembersInjector.create(
            permanentResidentFlagNodeComponentBuilderProvider);

    this.titleNodeComponentBuilderProvider =
        new Factory<TitleNodeComponent.Builder>() {
          @Override
          public TitleNodeComponent.Builder get() {
            return new TitleNodeComponentBuilder();
          }
        };

    this.titleNodeMembersInjector =
        TitleNode_MembersInjector.create(titleNodeComponentBuilderProvider);

    this.spouseNodeComponentBuilderProvider =
        new Factory<SpouseNodeComponent.Builder>() {
          @Override
          public SpouseNodeComponent.Builder get() {
            return new SpouseNodeComponentBuilder();
          }
        };

    this.spouseNodeMembersInjector =
        SpouseNode_MembersInjector.create(spouseNodeComponentBuilderProvider);

    this.personApplicantTypeNodeComponentBuilderProvider =
        new Factory<PersonApplicantTypeNodeComponent.Builder>() {
          @Override
          public PersonApplicantTypeNodeComponent.Builder get() {
            return new PersonApplicantTypeNodeComponentBuilder();
          }
        };

    this.personApplicantTypeNodeMembersInjector =
        PersonApplicantTypeNode_MembersInjector.create(
            personApplicantTypeNodeComponentBuilderProvider);

    this.personGeneralNodeChildProviderMembersInjector =
        PersonGeneralNodeChildProvider_MembersInjector.create(
            applicationTypeNodeMembersInjector,
            maritalStatusNodeMembersInjector,
            firstNameNodeMembersInjector,
            dateOfBirthNodeMembersInjector,
            primaryApplicantFlagNodeMembersInjector,
            driversLicenseNodeMembersInjector,
            housingStatusNodeMembersInjector,
            genderNodeMembersInjector,
            firstHomeBuyerFlagNodeMembersInjector,
            lastNameNodeMembersInjector,
            permanentResidentFlagNodeMembersInjector,
            titleNodeMembersInjector,
            spouseNodeMembersInjector,
            personApplicantTypeNodeMembersInjector);

    this.personGeneralNodeChildProvider =
        DoubleCheck.provider(
            PersonGeneralNodeChildProvider_Factory.create(
                personGeneralNodeChildProviderMembersInjector));

    this.personGeneralNodeComponentBuilderProvider =
        new Factory<PersonGeneralNodeComponent.Builder>() {
          @Override
          public PersonGeneralNodeComponent.Builder get() {
            return new PersonGeneralNodeComponentBuilder();
          }
        };

    this.personGeneralNodeMembersInjector =
        PersonGeneralNode_MembersInjector.create(
            personGeneralNodeChildProvider, personGeneralNodeComponentBuilderProvider);

    this.otherIncomeDescriptionNodeComponentBuilderProvider =
        new Factory<OtherIncomeDescriptionNodeComponent.Builder>() {
          @Override
          public OtherIncomeDescriptionNodeComponent.Builder get() {
            return new OtherIncomeDescriptionNodeComponentBuilder();
          }
        };

    this.otherIncomeDescriptionNodeMembersInjector =
        OtherIncomeDescriptionNode_MembersInjector.create(
            otherIncomeDescriptionNodeComponentBuilderProvider);

    this.otherIncomeTypeNodeComponentBuilderProvider =
        new Factory<OtherIncomeTypeNodeComponent.Builder>() {
          @Override
          public OtherIncomeTypeNodeComponent.Builder get() {
            return new OtherIncomeTypeNodeComponentBuilder();
          }
        };

    this.otherIncomeTypeNodeMembersInjector =
        OtherIncomeTypeNode_MembersInjector.create(otherIncomeTypeNodeComponentBuilderProvider);

    this.otherIncomeAmountNodeComponentBuilderProvider =
        new Factory<OtherIncomeAmountNodeComponent.Builder>() {
          @Override
          public OtherIncomeAmountNodeComponent.Builder get() {
            return new OtherIncomeAmountNodeComponentBuilder();
          }
        };

    this.otherIncomeAmountNodeMembersInjector =
        OtherIncomeAmountNode_MembersInjector.create(otherIncomeAmountNodeComponentBuilderProvider);

    this.otherIncomePreviousYearNodeComponentBuilderProvider =
        new Factory<OtherIncomePreviousYearNodeComponent.Builder>() {
          @Override
          public OtherIncomePreviousYearNodeComponent.Builder get() {
            return new OtherIncomePreviousYearNodeComponentBuilder();
          }
        };

    this.otherIncomePreviousYearNodeMembersInjector =
        OtherIncomePreviousYearNode_MembersInjector.create(
            otherIncomePreviousYearNodeComponentBuilderProvider);

    this.otherIncomeAddBackTypeNodeComponentBuilderProvider =
        new Factory<OtherIncomeAddBackTypeNodeComponent.Builder>() {
          @Override
          public OtherIncomeAddBackTypeNodeComponent.Builder get() {
            return new OtherIncomeAddBackTypeNodeComponentBuilder();
          }
        };

    this.otherIncomeAddBackTypeNodeMembersInjector =
        OtherIncomeAddBackTypeNode_MembersInjector.create(
            otherIncomeAddBackTypeNodeComponentBuilderProvider);

    this.otherIncomeNodeChildProviderMembersInjector =
        OtherIncomeNodeChildProvider_MembersInjector.create(
            otherIncomeDescriptionNodeMembersInjector,
            otherIncomeTypeNodeMembersInjector,
            otherIncomeAmountNodeMembersInjector,
            otherIncomePreviousYearNodeMembersInjector,
            otherIncomeAddBackTypeNodeMembersInjector);

    this.otherIncomeNodeChildProvider =
        DoubleCheck.provider(
            OtherIncomeNodeChildProvider_Factory.create(
                otherIncomeNodeChildProviderMembersInjector));

    this.otherIncomeNodeComponentBuilderProvider =
        new Factory<OtherIncomeNodeComponent.Builder>() {
          @Override
          public OtherIncomeNodeComponent.Builder get() {
            return new OtherIncomeNodeComponentBuilder();
          }
        };

    this.otherIncomeNodeMembersInjector =
        OtherIncomeNode_MembersInjector.create(
            otherIncomeNodeChildProvider, otherIncomeNodeComponentBuilderProvider);

    this.baseOtherIncomeListNodeItemProviderMembersInjector =
        BaseOtherIncomeListNodeItemProvider_MembersInjector.create(otherIncomeNodeMembersInjector);

    this.baseOtherIncomeListNodeItemProvider =
        DoubleCheck.provider(
            BaseOtherIncomeListNodeItemProvider_Factory.create(
                baseOtherIncomeListNodeItemProviderMembersInjector));

    this.personOtherIncomeListNodeComponentBuilderProvider =
        new Factory<PersonOtherIncomeListNodeComponent.Builder>() {
          @Override
          public PersonOtherIncomeListNodeComponent.Builder get() {
            return new PersonOtherIncomeListNodeComponentBuilder();
          }
        };

    this.personOtherIncomeListNodeMembersInjector =
        PersonOtherIncomeListNode_MembersInjector.create(
            baseOtherIncomeListNodeItemProvider, personOtherIncomeListNodeComponentBuilderProvider);

    this.responsibleTypeOfChangeNodeComponentBuilderProvider =
        new Factory<ResponsibleTypeOfChangeNodeComponent.Builder>() {
          @Override
          public ResponsibleTypeOfChangeNodeComponent.Builder get() {
            return new ResponsibleTypeOfChangeNodeComponentBuilder();
          }
        };

    this.responsibleTypeOfChangeNodeMembersInjector =
        ResponsibleTypeOfChangeNode_MembersInjector.create(
            responsibleTypeOfChangeNodeComponentBuilderProvider);

    this.responsibleMitigationMethodNodeComponentBuilderProvider =
        new Factory<ResponsibleMitigationMethodNodeComponent.Builder>() {
          @Override
          public ResponsibleMitigationMethodNodeComponent.Builder get() {
            return new ResponsibleMitigationMethodNodeComponentBuilder();
          }
        };

    this.responsibleMitigationMethodNodeMembersInjector =
        ResponsibleMitigationMethodNode_MembersInjector.create(
            responsibleMitigationMethodNodeComponentBuilderProvider);

    this.responsibleSignificantChangeFlagNodeComponentBuilderProvider =
        new Factory<ResponsibleSignificantChangeFlagNodeComponent.Builder>() {
          @Override
          public ResponsibleSignificantChangeFlagNodeComponent.Builder get() {
            return new ResponsibleSignificantChangeFlagNodeComponentBuilder();
          }
        };

    this.responsibleSignificantChangeFlagNodeMembersInjector =
        ResponsibleSignificantChangeFlagNode_MembersInjector.create(
            responsibleSignificantChangeFlagNodeComponentBuilderProvider);

    this.responsibleRepaymentDifficultyNodeComponentBuilderProvider =
        new Factory<ResponsibleRepaymentDifficultyNodeComponent.Builder>() {
          @Override
          public ResponsibleRepaymentDifficultyNodeComponent.Builder get() {
            return new ResponsibleRepaymentDifficultyNodeComponentBuilder();
          }
        };

    this.responsibleRepaymentDifficultyNodeMembersInjector =
        ResponsibleRepaymentDifficultyNode_MembersInjector.create(
            responsibleRepaymentDifficultyNodeComponentBuilderProvider);

    this.baseResponsibleLendNodeChildProviderMembersInjector =
        BaseResponsibleLendNodeChildProvider_MembersInjector.create(
            responsibleTypeOfChangeNodeMembersInjector,
            responsibleMitigationMethodNodeMembersInjector,
            responsibleSignificantChangeFlagNodeMembersInjector,
            responsibleRepaymentDifficultyNodeMembersInjector);

    this.baseResponsibleLendNodeChildProvider =
        DoubleCheck.provider(
            BaseResponsibleLendNodeChildProvider_Factory.create(
                baseResponsibleLendNodeChildProviderMembersInjector));

    this.personResponsibleLendNodeComponentBuilderProvider =
        new Factory<PersonResponsibleLendNodeComponent.Builder>() {
          @Override
          public PersonResponsibleLendNodeComponent.Builder get() {
            return new PersonResponsibleLendNodeComponentBuilder();
          }
        };

    this.personResponsibleLendNodeMembersInjector =
        PersonResponsibleLendNode_MembersInjector.create(
            baseResponsibleLendNodeChildProvider,
            personResponsibleLendNodeComponentBuilderProvider);

    this.unemployedOnBenefitFlagNodeComponentBuilderProvider =
        new Factory<UnemployedOnBenefitFlagNodeComponent.Builder>() {
          @Override
          public UnemployedOnBenefitFlagNodeComponent.Builder get() {
            return new UnemployedOnBenefitFlagNodeComponentBuilder();
          }
        };

    this.unemployedOnBenefitFlagNodeMembersInjector =
        UnemployedOnBenefitFlagNode_MembersInjector.create(
            unemployedOnBenefitFlagNodeComponentBuilderProvider);

    this.studentFlagNodeComponentBuilderProvider =
        new Factory<StudentFlagNodeComponent.Builder>() {
          @Override
          public StudentFlagNodeComponent.Builder get() {
            return new StudentFlagNodeComponentBuilder();
          }
        };

    this.studentFlagNodeMembersInjector =
        StudentFlagNode_MembersInjector.create(studentFlagNodeComponentBuilderProvider);

    this.yearNodeComponentBuilderProvider =
        new Factory<YearNodeComponent.Builder>() {
          @Override
          public YearNodeComponent.Builder get() {
            return new YearNodeComponentBuilder();
          }
        };

    this.yearNodeMembersInjector =
        YearNode_MembersInjector.create(yearNodeComponentBuilderProvider);

    this.monthNodeComponentBuilderProvider =
        new Factory<MonthNodeComponent.Builder>() {
          @Override
          public MonthNodeComponent.Builder get() {
            return new MonthNodeComponentBuilder();
          }
        };

    this.monthNodeMembersInjector =
        MonthNode_MembersInjector.create(monthNodeComponentBuilderProvider);

    this.monthYearNodeChildProviderMembersInjector =
        MonthYearNodeChildProvider_MembersInjector.create(
            yearNodeMembersInjector, monthNodeMembersInjector);

    this.monthYearNodeChildProvider =
        DoubleCheck.provider(
            MonthYearNodeChildProvider_Factory.create(monthYearNodeChildProviderMembersInjector));

    this.unemployedSinceNodeComponentBuilderProvider =
        new Factory<UnemployedSinceNodeComponent.Builder>() {
          @Override
          public UnemployedSinceNodeComponent.Builder get() {
            return new UnemployedSinceNodeComponentBuilder();
          }
        };

    this.unemployedSinceNodeMembersInjector =
        UnemployedSinceNode_MembersInjector.create(
            monthYearNodeChildProvider, unemployedSinceNodeComponentBuilderProvider);

    this.studentTypeNodeComponentBuilderProvider =
        new Factory<StudentTypeNodeComponent.Builder>() {
          @Override
          public StudentTypeNodeComponent.Builder get() {
            return new StudentTypeNodeComponentBuilder();
          }
        };

    this.studentTypeNodeMembersInjector =
        StudentTypeNode_MembersInjector.create(studentTypeNodeComponentBuilderProvider);

    this.houseDutiesFlagNodeComponentBuilderProvider =
        new Factory<HouseDutiesFlagNodeComponent.Builder>() {
          @Override
          public HouseDutiesFlagNodeComponent.Builder get() {
            return new HouseDutiesFlagNodeComponentBuilder();
          }
        };

    this.houseDutiesFlagNodeMembersInjector =
        HouseDutiesFlagNode_MembersInjector.create(houseDutiesFlagNodeComponentBuilderProvider);

    this.unemployedNodeChildProviderMembersInjector =
        UnemployedNodeChildProvider_MembersInjector.create(
            unemployedOnBenefitFlagNodeMembersInjector,
            studentFlagNodeMembersInjector,
            unemployedSinceNodeMembersInjector,
            studentTypeNodeMembersInjector,
            houseDutiesFlagNodeMembersInjector);

    this.unemployedNodeChildProvider =
        DoubleCheck.provider(
            UnemployedNodeChildProvider_Factory.create(unemployedNodeChildProviderMembersInjector));

    this.unemployedNodeComponentBuilderProvider =
        new Factory<UnemployedNodeComponent.Builder>() {
          @Override
          public UnemployedNodeComponent.Builder get() {
            return new UnemployedNodeComponentBuilder();
          }
        };

    this.unemployedNodeMembersInjector =
        UnemployedNode_MembersInjector.create(
            unemployedNodeChildProvider, unemployedNodeComponentBuilderProvider);

    this.retiredOnBenefitFlagNodeComponentBuilderProvider =
        new Factory<RetiredOnBenefitFlagNodeComponent.Builder>() {
          @Override
          public RetiredOnBenefitFlagNodeComponent.Builder get() {
            return new RetiredOnBenefitFlagNodeComponentBuilder();
          }
        };

    this.retiredOnBenefitFlagNodeMembersInjector =
        RetiredOnBenefitFlagNode_MembersInjector.create(
            retiredOnBenefitFlagNodeComponentBuilderProvider);

    this.retiredSinceNodeComponentBuilderProvider =
        new Factory<RetiredSinceNodeComponent.Builder>() {
          @Override
          public RetiredSinceNodeComponent.Builder get() {
            return new RetiredSinceNodeComponentBuilder();
          }
        };

    this.retiredSinceNodeMembersInjector =
        RetiredSinceNode_MembersInjector.create(
            monthYearNodeChildProvider, retiredSinceNodeComponentBuilderProvider);

    this.retiredEmploymentNodeChildProviderMembersInjector =
        RetiredEmploymentNodeChildProvider_MembersInjector.create(
            retiredOnBenefitFlagNodeMembersInjector, retiredSinceNodeMembersInjector);

    this.retiredEmploymentNodeChildProvider =
        DoubleCheck.provider(
            RetiredEmploymentNodeChildProvider_Factory.create(
                retiredEmploymentNodeChildProviderMembersInjector));

    this.retiredEmploymentNodeComponentBuilderProvider =
        new Factory<RetiredEmploymentNodeComponent.Builder>() {
          @Override
          public RetiredEmploymentNodeComponent.Builder get() {
            return new RetiredEmploymentNodeComponentBuilder();
          }
        };

    this.retiredEmploymentNodeMembersInjector =
        RetiredEmploymentNode_MembersInjector.create(
            retiredEmploymentNodeChildProvider, retiredEmploymentNodeComponentBuilderProvider);

    this.employerNameNodeComponentBuilderProvider =
        new Factory<EmployerNameNodeComponent.Builder>() {
          @Override
          public EmployerNameNodeComponent.Builder get() {
            return new EmployerNameNodeComponentBuilder();
          }
        };

    this.employerNameNodeMembersInjector =
        EmployerNameNode_MembersInjector.create(employerNameNodeComponentBuilderProvider);

    this.addressLineNodeComponentBuilderProvider =
        new Factory<AddressLineNodeComponent.Builder>() {
          @Override
          public AddressLineNodeComponent.Builder get() {
            return new AddressLineNodeComponentBuilder();
          }
        };

    this.addressLineNodeMembersInjector =
        AddressLineNode_MembersInjector.create(addressLineNodeComponentBuilderProvider);

    this.postcodeNodeComponentBuilderProvider =
        new Factory<PostcodeNodeComponent.Builder>() {
          @Override
          public PostcodeNodeComponent.Builder get() {
            return new PostcodeNodeComponentBuilder();
          }
        };

    this.postcodeNodeMembersInjector =
        PostcodeNode_MembersInjector.create(postcodeNodeComponentBuilderProvider);

    this.suburbNodeComponentBuilderProvider =
        new Factory<SuburbNodeComponent.Builder>() {
          @Override
          public SuburbNodeComponent.Builder get() {
            return new SuburbNodeComponentBuilder();
          }
        };

    this.suburbNodeMembersInjector =
        SuburbNode_MembersInjector.create(suburbNodeComponentBuilderProvider);
  }

  @SuppressWarnings("unchecked")
  private void initialize2(final Builder builder) {

    this.countryNodeComponentBuilderProvider =
        new Factory<CountryNodeComponent.Builder>() {
          @Override
          public CountryNodeComponent.Builder get() {
            return new CountryNodeComponentBuilder();
          }
        };

    this.countryNodeMembersInjector =
        CountryNode_MembersInjector.create(countryNodeComponentBuilderProvider);

    this.addressNodeChildProviderMembersInjector =
        AddressNodeChildProvider_MembersInjector.create(
            addressLineNodeMembersInjector,
            postcodeNodeMembersInjector,
            suburbNodeMembersInjector,
            countryNodeMembersInjector);

    this.addressNodeChildProvider =
        DoubleCheck.provider(
            AddressNodeChildProvider_Factory.create(addressNodeChildProviderMembersInjector));

    this.employerAddressNodeComponentBuilderProvider =
        new Factory<EmployerAddressNodeComponent.Builder>() {
          @Override
          public EmployerAddressNodeComponent.Builder get() {
            return new EmployerAddressNodeComponentBuilder();
          }
        };

    this.employerAddressNodeMembersInjector =
        EmployerAddressNode_MembersInjector.create(
            addressNodeChildProvider, employerAddressNodeComponentBuilderProvider);

    this.occupationNodeComponentBuilderProvider =
        new Factory<OccupationNodeComponent.Builder>() {
          @Override
          public OccupationNodeComponent.Builder get() {
            return new OccupationNodeComponentBuilder();
          }
        };

    this.occupationNodeMembersInjector =
        OccupationNode_MembersInjector.create(occupationNodeComponentBuilderProvider);

    this.employerPhoneNodeComponentBuilderProvider =
        new Factory<EmployerPhoneNodeComponent.Builder>() {
          @Override
          public EmployerPhoneNodeComponent.Builder get() {
            return new EmployerPhoneNodeComponentBuilder();
          }
        };

    this.employerPhoneNodeMembersInjector =
        EmployerPhoneNode_MembersInjector.create(employerPhoneNodeComponentBuilderProvider);

    this.employmentStatusNodeComponentBuilderProvider =
        new Factory<EmploymentStatusNodeComponent.Builder>() {
          @Override
          public EmploymentStatusNodeComponent.Builder get() {
            return new EmploymentStatusNodeComponentBuilder();
          }
        };

    this.employmentStatusNodeMembersInjector =
        EmploymentStatusNode_MembersInjector.create(employmentStatusNodeComponentBuilderProvider);

    this.employmentStartedNodeComponentBuilderProvider =
        new Factory<EmploymentStartedNodeComponent.Builder>() {
          @Override
          public EmploymentStartedNodeComponent.Builder get() {
            return new EmploymentStartedNodeComponentBuilder();
          }
        };

    this.employmentStartedNodeMembersInjector =
        EmploymentStartedNode_MembersInjector.create(
            monthYearNodeChildProvider, employmentStartedNodeComponentBuilderProvider);

    this.employmentEndedNodeComponentBuilderProvider =
        new Factory<EmploymentEndedNodeComponent.Builder>() {
          @Override
          public EmploymentEndedNodeComponent.Builder get() {
            return new EmploymentEndedNodeComponentBuilder();
          }
        };

    this.employmentEndedNodeMembersInjector =
        EmploymentEndedNode_MembersInjector.create(
            monthYearNodeChildProvider, employmentEndedNodeComponentBuilderProvider);

    this.employedNodeChildProviderMembersInjector =
        EmployedNodeChildProvider_MembersInjector.create(
            employerNameNodeMembersInjector,
            employerAddressNodeMembersInjector,
            occupationNodeMembersInjector,
            employerPhoneNodeMembersInjector,
            employmentStatusNodeMembersInjector,
            employmentStartedNodeMembersInjector,
            employmentEndedNodeMembersInjector);

    this.provideEmployedNodeChildProvider =
        DoubleCheck.provider(
            CustomModule_ProvideEmployedNodeChildProviderFactory.create(
                builder.customModule, employedNodeChildProviderMembersInjector));

    this.grossYearlySalaryNodeComponentBuilderProvider =
        new Factory<GrossYearlySalaryNodeComponent.Builder>() {
          @Override
          public GrossYearlySalaryNodeComponent.Builder get() {
            return new GrossYearlySalaryNodeComponentBuilder();
          }
        };

    this.grossYearlySalaryNodeMembersInjector =
        GrossYearlySalaryNode_MembersInjector.create(grossYearlySalaryNodeComponentBuilderProvider);

    this.payeEmployedNodeChildProviderMembersInjector =
        PayeEmployedNodeChildProvider_MembersInjector.create(grossYearlySalaryNodeMembersInjector);

    this.payeEmployedNodeChildProvider =
        DoubleCheck.provider(
            PayeEmployedNodeChildProvider_Factory.create(
                payeEmployedNodeChildProviderMembersInjector));

    this.payeEmployedNodeComponentBuilderProvider =
        new Factory<PayeEmployedNodeComponent.Builder>() {
          @Override
          public PayeEmployedNodeComponent.Builder get() {
            return new PayeEmployedNodeComponentBuilder();
          }
        };

    this.payeEmployedNodeMembersInjector =
        PayeEmployedNode_MembersInjector.create(
            provideEmployedNodeChildProvider,
            payeEmployedNodeChildProvider,
            payeEmployedNodeComponentBuilderProvider);

    this.employedNodeMembersInjector =
        EmployedNode_MembersInjector.create(provideEmployedNodeChildProvider);

    this.profitPreviousYearNodeComponentBuilderProvider =
        new Factory<ProfitPreviousYearNodeComponent.Builder>() {
          @Override
          public ProfitPreviousYearNodeComponent.Builder get() {
            return new ProfitPreviousYearNodeComponentBuilder();
          }
        };

    this.profitPreviousYearNodeMembersInjector =
        ProfitPreviousYearNode_MembersInjector.create(
            profitPreviousYearNodeComponentBuilderProvider);

    this.businessTypeNodeComponentBuilderProvider =
        new Factory<BusinessTypeNodeComponent.Builder>() {
          @Override
          public BusinessTypeNodeComponent.Builder get() {
            return new BusinessTypeNodeComponentBuilder();
          }
        };

    this.businessTypeNodeMembersInjector =
        BusinessTypeNode_MembersInjector.create(businessTypeNodeComponentBuilderProvider);

    this.profitThisYearNodeComponentBuilderProvider =
        new Factory<ProfitThisYearNodeComponent.Builder>() {
          @Override
          public ProfitThisYearNodeComponent.Builder get() {
            return new ProfitThisYearNodeComponentBuilder();
          }
        };

    this.profitThisYearNodeMembersInjector =
        ProfitThisYearNode_MembersInjector.create(profitThisYearNodeComponentBuilderProvider);

    this.selfEmployedNodeChildProviderMembersInjector =
        SelfEmployedNodeChildProvider_MembersInjector.create(
            profitPreviousYearNodeMembersInjector,
            businessTypeNodeMembersInjector,
            profitThisYearNodeMembersInjector);

    this.selfEmployedNodeChildProvider =
        DoubleCheck.provider(
            SelfEmployedNodeChildProvider_Factory.create(
                selfEmployedNodeChildProviderMembersInjector));

    this.selfEmployedNodeComponentBuilderProvider =
        new Factory<SelfEmployedNodeComponent.Builder>() {
          @Override
          public SelfEmployedNodeComponent.Builder get() {
            return new SelfEmployedNodeComponentBuilder();
          }
        };

    this.selfEmployedNodeMembersInjector =
        SelfEmployedNode_MembersInjector.create(
            provideEmployedNodeChildProvider,
            selfEmployedNodeChildProvider,
            selfEmployedNodeComponentBuilderProvider);

    this.employmentTypeNodeComponentBuilderProvider =
        new Factory<EmploymentTypeNodeComponent.Builder>() {
          @Override
          public EmploymentTypeNodeComponent.Builder get() {
            return new EmploymentTypeNodeComponentBuilder();
          }
        };

    this.employmentTypeNodeMembersInjector =
        EmploymentTypeNode_MembersInjector.create(employmentTypeNodeComponentBuilderProvider);

    this.employmentNodeChildProviderMembersInjector =
        EmploymentNodeChildProvider_MembersInjector.create(
            unemployedNodeMembersInjector,
            retiredEmploymentNodeMembersInjector,
            payeEmployedNodeMembersInjector,
            employedNodeMembersInjector,
            selfEmployedNodeMembersInjector,
            employmentTypeNodeMembersInjector);

    this.employmentNodeChildProvider =
        DoubleCheck.provider(
            EmploymentNodeChildProvider_Factory.create(employmentNodeChildProviderMembersInjector));

    this.currentEmploymentNodeComponentBuilderProvider =
        new Factory<CurrentEmploymentNodeComponent.Builder>() {
          @Override
          public CurrentEmploymentNodeComponent.Builder get() {
            return new CurrentEmploymentNodeComponentBuilder();
          }
        };

    this.currentEmploymentNodeMembersInjector =
        CurrentEmploymentNode_MembersInjector.create(
            employmentNodeChildProvider, currentEmploymentNodeComponentBuilderProvider);

    this.currentEmploymentListNodeItemProviderMembersInjector =
        CurrentEmploymentListNodeItemProvider_MembersInjector.create(
            currentEmploymentNodeMembersInjector);

    this.currentEmploymentListNodeItemProvider =
        DoubleCheck.provider(
            CurrentEmploymentListNodeItemProvider_Factory.create(
                currentEmploymentListNodeItemProviderMembersInjector));

    this.currentEmploymentListNodeComponentBuilderProvider =
        new Factory<CurrentEmploymentListNodeComponent.Builder>() {
          @Override
          public CurrentEmploymentListNodeComponent.Builder get() {
            return new CurrentEmploymentListNodeComponentBuilder();
          }
        };

    this.currentEmploymentListNodeMembersInjector =
        CurrentEmploymentListNode_MembersInjector.create(
            currentEmploymentListNodeItemProvider,
            currentEmploymentListNodeComponentBuilderProvider);

    this.thirdPartyDisclosureFlagNodeComponentBuilderProvider =
        new Factory<ThirdPartyDisclosureFlagNodeComponent.Builder>() {
          @Override
          public ThirdPartyDisclosureFlagNodeComponent.Builder get() {
            return new ThirdPartyDisclosureFlagNodeComponentBuilder();
          }
        };

    this.thirdPartyDisclosureFlagNodeMembersInjector =
        ThirdPartyDisclosureFlagNode_MembersInjector.create(
            thirdPartyDisclosureFlagNodeComponentBuilderProvider);

    this.creditHistoryNodeComponentBuilderProvider =
        new Factory<CreditHistoryNodeComponent.Builder>() {
          @Override
          public CreditHistoryNodeComponent.Builder get() {
            return new CreditHistoryNodeComponentBuilder();
          }
        };

    this.creditHistoryNodeMembersInjector =
        CreditHistoryNode_MembersInjector.create(creditHistoryNodeComponentBuilderProvider);

    this.creditHistoryListNodeItemProviderMembersInjector =
        CreditHistoryListNodeItemProvider_MembersInjector.create(creditHistoryNodeMembersInjector);

    this.creditHistoryListNodeItemProvider =
        DoubleCheck.provider(
            CreditHistoryListNodeItemProvider_Factory.create(
                creditHistoryListNodeItemProviderMembersInjector));

    this.creditHistoryListNodeComponentBuilderProvider =
        new Factory<CreditHistoryListNodeComponent.Builder>() {
          @Override
          public CreditHistoryListNodeComponent.Builder get() {
            return new CreditHistoryListNodeComponentBuilder();
          }
        };

    this.creditHistoryListNodeMembersInjector =
        CreditHistoryListNode_MembersInjector.create(
            creditHistoryListNodeItemProvider, creditHistoryListNodeComponentBuilderProvider);

    this.legalActionNodeComponentBuilderProvider =
        new Factory<LegalActionNodeComponent.Builder>() {
          @Override
          public LegalActionNodeComponent.Builder get() {
            return new LegalActionNodeComponentBuilder();
          }
        };

    this.legalActionNodeMembersInjector =
        LegalActionNode_MembersInjector.create(legalActionNodeComponentBuilderProvider);

    this.creditCheckFlagNodeComponentBuilderProvider =
        new Factory<CreditCheckFlagNodeComponent.Builder>() {
          @Override
          public CreditCheckFlagNodeComponent.Builder get() {
            return new CreditCheckFlagNodeComponentBuilder();
          }
        };

    this.creditCheckFlagNodeMembersInjector =
        CreditCheckFlagNode_MembersInjector.create(creditCheckFlagNodeComponentBuilderProvider);

    this.basePrivacyNodeChildProviderMembersInjector =
        BasePrivacyNodeChildProvider_MembersInjector.create(
            thirdPartyDisclosureFlagNodeMembersInjector,
            creditHistoryListNodeMembersInjector,
            legalActionNodeMembersInjector,
            creditCheckFlagNodeMembersInjector);

    this.basePrivacyNodeChildProvider =
        DoubleCheck.provider(
            BasePrivacyNodeChildProvider_Factory.create(
                basePrivacyNodeChildProviderMembersInjector));

    this.personPrivacyNodeComponentBuilderProvider =
        new Factory<PersonPrivacyNodeComponent.Builder>() {
          @Override
          public PersonPrivacyNodeComponent.Builder get() {
            return new PersonPrivacyNodeComponentBuilder();
          }
        };

    this.personPrivacyNodeMembersInjector =
        PersonPrivacyNode_MembersInjector.create(
            basePrivacyNodeChildProvider, personPrivacyNodeComponentBuilderProvider);

    this.movedFromPreviousAddressNodeComponentBuilderProvider =
        new Factory<MovedFromPreviousAddressNodeComponent.Builder>() {
          @Override
          public MovedFromPreviousAddressNodeComponent.Builder get() {
            return new MovedFromPreviousAddressNodeComponentBuilder();
          }
        };

    this.movedFromPreviousAddressNodeMembersInjector =
        MovedFromPreviousAddressNode_MembersInjector.create(
            monthYearNodeChildProvider, movedFromPreviousAddressNodeComponentBuilderProvider);

    this.contactAddressNodeComponentBuilderProvider =
        new Factory<ContactAddressNodeComponent.Builder>() {
          @Override
          public ContactAddressNodeComponent.Builder get() {
            return new ContactAddressNodeComponentBuilder();
          }
        };

    this.contactAddressNodeMembersInjector =
        ContactAddressNode_MembersInjector.create(
            addressNodeChildProvider, contactAddressNodeComponentBuilderProvider);

    this.contactTelephoneNodeComponentBuilderProvider =
        new Factory<ContactTelephoneNodeComponent.Builder>() {
          @Override
          public ContactTelephoneNodeComponent.Builder get() {
            return new ContactTelephoneNodeComponentBuilder();
          }
        };

    this.contactTelephoneNodeMembersInjector =
        ContactTelephoneNode_MembersInjector.create(contactTelephoneNodeComponentBuilderProvider);

    this.contactEmailNodeComponentBuilderProvider =
        new Factory<ContactEmailNodeComponent.Builder>() {
          @Override
          public ContactEmailNodeComponent.Builder get() {
            return new ContactEmailNodeComponentBuilder();
          }
        };

    this.contactEmailNodeMembersInjector =
        ContactEmailNode_MembersInjector.create(contactEmailNodeComponentBuilderProvider);

    this.movedToPreviousAddressNodeComponentBuilderProvider =
        new Factory<MovedToPreviousAddressNodeComponent.Builder>() {
          @Override
          public MovedToPreviousAddressNodeComponent.Builder get() {
            return new MovedToPreviousAddressNodeComponentBuilder();
          }
        };

    this.movedToPreviousAddressNodeMembersInjector =
        MovedToPreviousAddressNode_MembersInjector.create(
            monthYearNodeChildProvider, movedToPreviousAddressNodeComponentBuilderProvider);

    this.mobileNumberNodeComponentBuilderProvider =
        new Factory<MobileNumberNodeComponent.Builder>() {
          @Override
          public MobileNumberNodeComponent.Builder get() {
            return new MobileNumberNodeComponentBuilder();
          }
        };

    this.mobileNumberNodeMembersInjector =
        MobileNumberNode_MembersInjector.create(mobileNumberNodeComponentBuilderProvider);

    this.movedToCurrentAddressNodeComponentBuilderProvider =
        new Factory<MovedToCurrentAddressNodeComponent.Builder>() {
          @Override
          public MovedToCurrentAddressNodeComponent.Builder get() {
            return new MovedToCurrentAddressNodeComponentBuilder();
          }
        };

    this.movedToCurrentAddressNodeMembersInjector =
        MovedToCurrentAddressNode_MembersInjector.create(
            monthYearNodeChildProvider, movedToCurrentAddressNodeComponentBuilderProvider);

    this.baseContactNodeChildProviderMembersInjector =
        BaseContactNodeChildProvider_MembersInjector.create(
            movedFromPreviousAddressNodeMembersInjector,
            contactAddressNodeMembersInjector,
            contactTelephoneNodeMembersInjector,
            contactEmailNodeMembersInjector,
            movedToPreviousAddressNodeMembersInjector,
            mobileNumberNodeMembersInjector,
            movedToCurrentAddressNodeMembersInjector);

    this.provideBaseContactNodeChildProvider =
        DoubleCheck.provider(
            CustomModule_ProvideBaseContactNodeChildProviderFactory.create(
                builder.customModule, baseContactNodeChildProviderMembersInjector));

    this.personHomePhoneNodeComponentBuilderProvider =
        new Factory<PersonHomePhoneNodeComponent.Builder>() {
          @Override
          public PersonHomePhoneNodeComponent.Builder get() {
            return new PersonHomePhoneNodeComponentBuilder();
          }
        };

    this.personHomePhoneNodeMembersInjector =
        PersonHomePhoneNode_MembersInjector.create(personHomePhoneNodeComponentBuilderProvider);

    this.personContactNodeChildProviderMembersInjector =
        PersonContactNodeChildProvider_MembersInjector.create(personHomePhoneNodeMembersInjector);

    this.personContactNodeChildProvider =
        DoubleCheck.provider(
            PersonContactNodeChildProvider_Factory.create(
                personContactNodeChildProviderMembersInjector));

    this.personContactNodeComponentBuilderProvider =
        new Factory<PersonContactNodeComponent.Builder>() {
          @Override
          public PersonContactNodeComponent.Builder get() {
            return new PersonContactNodeComponentBuilder();
          }
        };

    this.personContactNodeMembersInjector =
        PersonContactNode_MembersInjector.create(
            provideBaseContactNodeChildProvider,
            personContactNodeChildProvider,
            personContactNodeComponentBuilderProvider);

    this.previousEmploymentNodeComponentBuilderProvider =
        new Factory<PreviousEmploymentNodeComponent.Builder>() {
          @Override
          public PreviousEmploymentNodeComponent.Builder get() {
            return new PreviousEmploymentNodeComponentBuilder();
          }
        };

    this.previousEmploymentNodeMembersInjector =
        PreviousEmploymentNode_MembersInjector.create(
            employmentNodeChildProvider, previousEmploymentNodeComponentBuilderProvider);

    this.previousEmploymentListNodeItemProviderMembersInjector =
        PreviousEmploymentListNodeItemProvider_MembersInjector.create(
            previousEmploymentNodeMembersInjector);

    this.previousEmploymentListNodeItemProvider =
        DoubleCheck.provider(
            PreviousEmploymentListNodeItemProvider_Factory.create(
                previousEmploymentListNodeItemProviderMembersInjector));

    this.previousEmploymentListNodeComponentBuilderProvider =
        new Factory<PreviousEmploymentListNodeComponent.Builder>() {
          @Override
          public PreviousEmploymentListNodeComponent.Builder get() {
            return new PreviousEmploymentListNodeComponentBuilder();
          }
        };

    this.previousEmploymentListNodeMembersInjector =
        PreviousEmploymentListNode_MembersInjector.create(
            previousEmploymentListNodeItemProvider,
            previousEmploymentListNodeComponentBuilderProvider);

    this.trustRegistrationDateNodeComponentBuilderProvider =
        new Factory<TrustRegistrationDateNodeComponent.Builder>() {
          @Override
          public TrustRegistrationDateNodeComponent.Builder get() {
            return new TrustRegistrationDateNodeComponentBuilder();
          }
        };

    this.trustRegistrationDateNodeMembersInjector =
        TrustRegistrationDateNode_MembersInjector.create(
            trustRegistrationDateNodeComponentBuilderProvider);

    this.trustTypeNodeComponentBuilderProvider =
        new Factory<TrustTypeNodeComponent.Builder>() {
          @Override
          public TrustTypeNodeComponent.Builder get() {
            return new TrustTypeNodeComponentBuilder();
          }
        };

    this.trustTypeNodeMembersInjector =
        TrustTypeNode_MembersInjector.create(trustTypeNodeComponentBuilderProvider);

    this.trustSettlorNotRequiredReasonNodeComponentBuilderProvider =
        new Factory<TrustSettlorNotRequiredReasonNodeComponent.Builder>() {
          @Override
          public TrustSettlorNotRequiredReasonNodeComponent.Builder get() {
            return new TrustSettlorNotRequiredReasonNodeComponentBuilder();
          }
        };

    this.trustSettlorNotRequiredReasonNodeMembersInjector =
        TrustSettlorNotRequiredReasonNode_MembersInjector.create(
            trustSettlorNotRequiredReasonNodeComponentBuilderProvider);

    this.trustIndustryNodeComponentBuilderProvider =
        new Factory<TrustIndustryNodeComponent.Builder>() {
          @Override
          public TrustIndustryNodeComponent.Builder get() {
            return new TrustIndustryNodeComponentBuilder();
          }
        };

    this.trustIndustryNodeMembersInjector =
        TrustIndustryNode_MembersInjector.create(trustIndustryNodeComponentBuilderProvider);

    this.trustAddressNodeComponentBuilderProvider =
        new Factory<TrustAddressNodeComponent.Builder>() {
          @Override
          public TrustAddressNodeComponent.Builder get() {
            return new TrustAddressNodeComponentBuilder();
          }
        };

    this.trustAddressNodeMembersInjector =
        TrustAddressNode_MembersInjector.create(
            addressNodeChildProvider, trustAddressNodeComponentBuilderProvider);

    this.selectAccountHolderFlagNodeComponentBuilderProvider =
        new Factory<SelectAccountHolderFlagNodeComponent.Builder>() {
          @Override
          public SelectAccountHolderFlagNodeComponent.Builder get() {
            return new SelectAccountHolderFlagNodeComponentBuilder();
          }
        };
  }

  @SuppressWarnings("unchecked")
  private void initialize3(final Builder builder) {

    this.selectAccountHolderFlagNodeMembersInjector =
        SelectAccountHolderFlagNode_MembersInjector.create(
            selectAccountHolderFlagNodeComponentBuilderProvider);

    this.accountHolderReferenceNodeComponentBuilderProvider =
        new Factory<AccountHolderReferenceNodeComponent.Builder>() {
          @Override
          public AccountHolderReferenceNodeComponent.Builder get() {
            return new AccountHolderReferenceNodeComponentBuilder();
          }
        };

    this.accountHolderReferenceNodeMembersInjector =
        AccountHolderReferenceNode_MembersInjector.create(
            accountHolderReferenceNodeComponentBuilderProvider);

    this.selectAccountHolderNodeChildProviderMembersInjector =
        SelectAccountHolderNodeChildProvider_MembersInjector.create(
            selectAccountHolderFlagNodeMembersInjector, accountHolderReferenceNodeMembersInjector);

    this.selectAccountHolderNodeChildProvider =
        DoubleCheck.provider(
            SelectAccountHolderNodeChildProvider_Factory.create(
                selectAccountHolderNodeChildProviderMembersInjector));

    this.selectAccountHolderNodeComponentBuilderProvider =
        new Factory<SelectAccountHolderNodeComponent.Builder>() {
          @Override
          public SelectAccountHolderNodeComponent.Builder get() {
            return new SelectAccountHolderNodeComponentBuilder();
          }
        };

    this.selectAccountHolderNodeMembersInjector =
        SelectAccountHolderNode_MembersInjector.create(
            selectAccountHolderNodeChildProvider, selectAccountHolderNodeComponentBuilderProvider);

    this.selectAccountHolderListNodeItemProviderMembersInjector =
        SelectAccountHolderListNodeItemProvider_MembersInjector.create(
            selectAccountHolderNodeMembersInjector);

    this.selectAccountHolderListNodeItemProvider =
        DoubleCheck.provider(
            SelectAccountHolderListNodeItemProvider_Factory.create(
                selectAccountHolderListNodeItemProviderMembersInjector));

    this.trustBeneficiaryListNodeComponentBuilderProvider =
        new Factory<TrustBeneficiaryListNodeComponent.Builder>() {
          @Override
          public TrustBeneficiaryListNodeComponent.Builder get() {
            return new TrustBeneficiaryListNodeComponentBuilder();
          }
        };

    this.trustBeneficiaryListNodeMembersInjector =
        TrustBeneficiaryListNode_MembersInjector.create(
            selectAccountHolderListNodeItemProvider,
            trustBeneficiaryListNodeComponentBuilderProvider);

    this.trustNameNodeComponentBuilderProvider =
        new Factory<TrustNameNodeComponent.Builder>() {
          @Override
          public TrustNameNodeComponent.Builder get() {
            return new TrustNameNodeComponentBuilder();
          }
        };

    this.trustNameNodeMembersInjector =
        TrustNameNode_MembersInjector.create(trustNameNodeComponentBuilderProvider);

    this.trustBeneficiaryClassNodeComponentBuilderProvider =
        new Factory<TrustBeneficiaryClassNodeComponent.Builder>() {
          @Override
          public TrustBeneficiaryClassNodeComponent.Builder get() {
            return new TrustBeneficiaryClassNodeComponentBuilder();
          }
        };

    this.trustBeneficiaryClassNodeMembersInjector =
        TrustBeneficiaryClassNode_MembersInjector.create(
            trustBeneficiaryClassNodeComponentBuilderProvider);

    this.trustBeneficiaryClassListNodeItemProviderMembersInjector =
        TrustBeneficiaryClassListNodeItemProvider_MembersInjector.create(
            trustBeneficiaryClassNodeMembersInjector);

    this.trustBeneficiaryClassListNodeItemProvider =
        DoubleCheck.provider(
            TrustBeneficiaryClassListNodeItemProvider_Factory.create(
                trustBeneficiaryClassListNodeItemProviderMembersInjector));

    this.trustBeneficiaryClassListNodeComponentBuilderProvider =
        new Factory<TrustBeneficiaryClassListNodeComponent.Builder>() {
          @Override
          public TrustBeneficiaryClassListNodeComponent.Builder get() {
            return new TrustBeneficiaryClassListNodeComponentBuilder();
          }
        };

    this.trustBeneficiaryClassListNodeMembersInjector =
        TrustBeneficiaryClassListNode_MembersInjector.create(
            trustBeneficiaryClassListNodeItemProvider,
            trustBeneficiaryClassListNodeComponentBuilderProvider);

    this.trustSettlorListNodeComponentBuilderProvider =
        new Factory<TrustSettlorListNodeComponent.Builder>() {
          @Override
          public TrustSettlorListNodeComponent.Builder get() {
            return new TrustSettlorListNodeComponentBuilder();
          }
        };

    this.trustSettlorListNodeMembersInjector =
        TrustSettlorListNode_MembersInjector.create(
            selectAccountHolderListNodeItemProvider, trustSettlorListNodeComponentBuilderProvider);

    this.trustCountryNodeComponentBuilderProvider =
        new Factory<TrustCountryNodeComponent.Builder>() {
          @Override
          public TrustCountryNodeComponent.Builder get() {
            return new TrustCountryNodeComponentBuilder();
          }
        };

    this.trustCountryNodeMembersInjector =
        TrustCountryNode_MembersInjector.create(trustCountryNodeComponentBuilderProvider);

    this.trustBeneficialOwnerListNodeComponentBuilderProvider =
        new Factory<TrustBeneficialOwnerListNodeComponent.Builder>() {
          @Override
          public TrustBeneficialOwnerListNodeComponent.Builder get() {
            return new TrustBeneficialOwnerListNodeComponentBuilder();
          }
        };

    this.trustBeneficialOwnerListNodeMembersInjector =
        TrustBeneficialOwnerListNode_MembersInjector.create(
            selectAccountHolderListNodeItemProvider,
            trustBeneficialOwnerListNodeComponentBuilderProvider);

    this.baseTrustNodeChildProviderMembersInjector =
        BaseTrustNodeChildProvider_MembersInjector.create(
            trustRegistrationDateNodeMembersInjector,
            trustTypeNodeMembersInjector,
            trustSettlorNotRequiredReasonNodeMembersInjector,
            trustIndustryNodeMembersInjector,
            trustAddressNodeMembersInjector,
            trustBeneficiaryListNodeMembersInjector,
            trustNameNodeMembersInjector,
            trustBeneficiaryClassListNodeMembersInjector,
            trustSettlorListNodeMembersInjector,
            trustCountryNodeMembersInjector,
            trustBeneficialOwnerListNodeMembersInjector);

    this.baseTrustNodeChildProvider =
        DoubleCheck.provider(
            BaseTrustNodeChildProvider_Factory.create(baseTrustNodeChildProviderMembersInjector));

    this.personTrustNodeComponentBuilderProvider =
        new Factory<PersonTrustNodeComponent.Builder>() {
          @Override
          public PersonTrustNodeComponent.Builder get() {
            return new PersonTrustNodeComponentBuilder();
          }
        };

    this.personTrustNodeMembersInjector =
        PersonTrustNode_MembersInjector.create(
            baseTrustNodeChildProvider, personTrustNodeComponentBuilderProvider);

    this.personNodeChildProviderMembersInjector =
        PersonNodeChildProvider_MembersInjector.create(
            personGeneralNodeMembersInjector,
            personOtherIncomeListNodeMembersInjector,
            personResponsibleLendNodeMembersInjector,
            currentEmploymentListNodeMembersInjector,
            personPrivacyNodeMembersInjector,
            personContactNodeMembersInjector,
            previousEmploymentListNodeMembersInjector,
            personTrustNodeMembersInjector);

    this.personNodeChildProvider =
        DoubleCheck.provider(
            PersonNodeChildProvider_Factory.create(personNodeChildProviderMembersInjector));

    this.personNodeComponentBuilderProvider =
        new Factory<PersonNodeComponent.Builder>() {
          @Override
          public PersonNodeComponent.Builder get() {
            return new PersonNodeComponentBuilder();
          }
        };

    this.personNodeMembersInjector =
        PersonNode_MembersInjector.create(
            personNodeChildProvider, personNodeComponentBuilderProvider);

    this.personListNodeItemProviderMembersInjector =
        PersonListNodeItemProvider_MembersInjector.create(personNodeMembersInjector);

    this.personListNodeItemProvider =
        DoubleCheck.provider(
            PersonListNodeItemProvider_Factory.create(personListNodeItemProviderMembersInjector));

    this.personListNodeComponentBuilderProvider =
        new Factory<PersonListNodeComponent.Builder>() {
          @Override
          public PersonListNodeComponent.Builder get() {
            return new PersonListNodeComponentBuilder();
          }
        };

    this.personListNodeMembersInjector =
        PersonListNode_MembersInjector.create(
            personListNodeItemProvider, personListNodeComponentBuilderProvider);

    this.totalLiabilityNodeComponentBuilderProvider =
        new Factory<TotalLiabilityNodeComponent.Builder>() {
          @Override
          public TotalLiabilityNodeComponent.Builder get() {
            return new TotalLiabilityNodeComponentBuilder();
          }
        };

    this.totalLiabilityNodeMembersInjector =
        TotalLiabilityNode_MembersInjector.create(totalLiabilityNodeComponentBuilderProvider);

    this.totalAssetNodeComponentBuilderProvider =
        new Factory<TotalAssetNodeComponent.Builder>() {
          @Override
          public TotalAssetNodeComponent.Builder get() {
            return new TotalAssetNodeComponentBuilder();
          }
        };

    this.totalAssetNodeMembersInjector =
        TotalAssetNode_MembersInjector.create(totalAssetNodeComponentBuilderProvider);

    this.totalExpenseNodeComponentBuilderProvider =
        new Factory<TotalExpenseNodeComponent.Builder>() {
          @Override
          public TotalExpenseNodeComponent.Builder get() {
            return new TotalExpenseNodeComponentBuilder();
          }
        };

    this.totalExpenseNodeMembersInjector =
        TotalExpenseNode_MembersInjector.create(totalExpenseNodeComponentBuilderProvider);

    this.expenseDescriptionNodeComponentBuilderProvider =
        new Factory<ExpenseDescriptionNodeComponent.Builder>() {
          @Override
          public ExpenseDescriptionNodeComponent.Builder get() {
            return new ExpenseDescriptionNodeComponentBuilder();
          }
        };

    this.expenseDescriptionNodeMembersInjector =
        ExpenseDescriptionNode_MembersInjector.create(
            expenseDescriptionNodeComponentBuilderProvider);

    this.expenseTypeNodeComponentBuilderProvider =
        new Factory<ExpenseTypeNodeComponent.Builder>() {
          @Override
          public ExpenseTypeNodeComponent.Builder get() {
            return new ExpenseTypeNodeComponentBuilder();
          }
        };

    this.expenseTypeNodeMembersInjector =
        ExpenseTypeNode_MembersInjector.create(expenseTypeNodeComponentBuilderProvider);

    this.expenseMonthlyRepaymentNodeComponentBuilderProvider =
        new Factory<ExpenseMonthlyRepaymentNodeComponent.Builder>() {
          @Override
          public ExpenseMonthlyRepaymentNodeComponent.Builder get() {
            return new ExpenseMonthlyRepaymentNodeComponentBuilder();
          }
        };

    this.expenseMonthlyRepaymentNodeMembersInjector =
        ExpenseMonthlyRepaymentNode_MembersInjector.create(
            expenseMonthlyRepaymentNodeComponentBuilderProvider);

    this.expenseNodeChildProviderMembersInjector =
        ExpenseNodeChildProvider_MembersInjector.create(
            expenseDescriptionNodeMembersInjector,
            expenseTypeNodeMembersInjector,
            expenseMonthlyRepaymentNodeMembersInjector);

    this.expenseNodeChildProvider =
        DoubleCheck.provider(
            ExpenseNodeChildProvider_Factory.create(expenseNodeChildProviderMembersInjector));

    this.expenseNodeComponentBuilderProvider =
        new Factory<ExpenseNodeComponent.Builder>() {
          @Override
          public ExpenseNodeComponent.Builder get() {
            return new ExpenseNodeComponentBuilder();
          }
        };

    this.expenseNodeMembersInjector =
        ExpenseNode_MembersInjector.create(
            expenseNodeChildProvider, expenseNodeComponentBuilderProvider);

    this.expenseListNodeItemProviderMembersInjector =
        ExpenseListNodeItemProvider_MembersInjector.create(expenseNodeMembersInjector);

    this.expenseListNodeItemProvider =
        DoubleCheck.provider(
            ExpenseListNodeItemProvider_Factory.create(expenseListNodeItemProviderMembersInjector));

    this.expenseListNodeComponentBuilderProvider =
        new Factory<ExpenseListNodeComponent.Builder>() {
          @Override
          public ExpenseListNodeComponent.Builder get() {
            return new ExpenseListNodeComponentBuilder();
          }
        };

    this.expenseListNodeMembersInjector =
        ExpenseListNode_MembersInjector.create(
            expenseListNodeItemProvider, expenseListNodeComponentBuilderProvider);

    this.creditCardLenderNameNodeComponentBuilderProvider =
        new Factory<CreditCardLenderNameNodeComponent.Builder>() {
          @Override
          public CreditCardLenderNameNodeComponent.Builder get() {
            return new CreditCardLenderNameNodeComponentBuilder();
          }
        };

    this.creditCardLenderNameNodeMembersInjector =
        CreditCardLenderNameNode_MembersInjector.create(
            creditCardLenderNameNodeComponentBuilderProvider);

    this.creditCardMonthlyRepaymentNodeComponentBuilderProvider =
        new Factory<CreditCardMonthlyRepaymentNodeComponent.Builder>() {
          @Override
          public CreditCardMonthlyRepaymentNodeComponent.Builder get() {
            return new CreditCardMonthlyRepaymentNodeComponentBuilder();
          }
        };

    this.creditCardMonthlyRepaymentNodeMembersInjector =
        CreditCardMonthlyRepaymentNode_MembersInjector.create(
            creditCardMonthlyRepaymentNodeComponentBuilderProvider);

    this.creditCardAmountOwingNodeComponentBuilderProvider =
        new Factory<CreditCardAmountOwingNodeComponent.Builder>() {
          @Override
          public CreditCardAmountOwingNodeComponent.Builder get() {
            return new CreditCardAmountOwingNodeComponentBuilder();
          }
        };

    this.creditCardAmountOwingNodeMembersInjector =
        CreditCardAmountOwingNode_MembersInjector.create(
            creditCardAmountOwingNodeComponentBuilderProvider);

    this.creditCardLimitAmountNodeComponentBuilderProvider =
        new Factory<CreditCardLimitAmountNodeComponent.Builder>() {
          @Override
          public CreditCardLimitAmountNodeComponent.Builder get() {
            return new CreditCardLimitAmountNodeComponentBuilder();
          }
        };

    this.creditCardLimitAmountNodeMembersInjector =
        CreditCardLimitAmountNode_MembersInjector.create(
            creditCardLimitAmountNodeComponentBuilderProvider);

    this.creditCardTypeNodeComponentBuilderProvider =
        new Factory<CreditCardTypeNodeComponent.Builder>() {
          @Override
          public CreditCardTypeNodeComponent.Builder get() {
            return new CreditCardTypeNodeComponentBuilder();
          }
        };

    this.creditCardTypeNodeMembersInjector =
        CreditCardTypeNode_MembersInjector.create(creditCardTypeNodeComponentBuilderProvider);

    this.creditCardClearingFlagNodeComponentBuilderProvider =
        new Factory<CreditCardClearingFlagNodeComponent.Builder>() {
          @Override
          public CreditCardClearingFlagNodeComponent.Builder get() {
            return new CreditCardClearingFlagNodeComponentBuilder();
          }
        };

    this.creditCardClearingFlagNodeMembersInjector =
        CreditCardClearingFlagNode_MembersInjector.create(
            creditCardClearingFlagNodeComponentBuilderProvider);

    this.creditCardBreakCostNodeComponentBuilderProvider =
        new Factory<CreditCardBreakCostNodeComponent.Builder>() {
          @Override
          public CreditCardBreakCostNodeComponent.Builder get() {
            return new CreditCardBreakCostNodeComponentBuilder();
          }
        };

    this.creditCardBreakCostNodeMembersInjector =
        CreditCardBreakCostNode_MembersInjector.create(
            creditCardBreakCostNodeComponentBuilderProvider);

    this.creditCardNodeChildProviderMembersInjector =
        CreditCardNodeChildProvider_MembersInjector.create(
            creditCardLenderNameNodeMembersInjector,
            creditCardMonthlyRepaymentNodeMembersInjector,
            creditCardAmountOwingNodeMembersInjector,
            creditCardLimitAmountNodeMembersInjector,
            creditCardTypeNodeMembersInjector,
            creditCardClearingFlagNodeMembersInjector,
            creditCardBreakCostNodeMembersInjector);

    this.creditCardNodeChildProvider =
        DoubleCheck.provider(
            CreditCardNodeChildProvider_Factory.create(creditCardNodeChildProviderMembersInjector));

    this.creditCardNodeComponentBuilderProvider =
        new Factory<CreditCardNodeComponent.Builder>() {
          @Override
          public CreditCardNodeComponent.Builder get() {
            return new CreditCardNodeComponentBuilder();
          }
        };

    this.creditCardNodeMembersInjector =
        CreditCardNode_MembersInjector.create(
            creditCardNodeChildProvider, creditCardNodeComponentBuilderProvider);

    this.creditCardListNodeItemProviderMembersInjector =
        CreditCardListNodeItemProvider_MembersInjector.create(creditCardNodeMembersInjector);

    this.creditCardListNodeItemProvider =
        DoubleCheck.provider(
            CreditCardListNodeItemProvider_Factory.create(
                creditCardListNodeItemProviderMembersInjector));

    this.creditCardListNodeComponentBuilderProvider =
        new Factory<CreditCardListNodeComponent.Builder>() {
          @Override
          public CreditCardListNodeComponent.Builder get() {
            return new CreditCardListNodeComponentBuilder();
          }
        };

    this.creditCardListNodeMembersInjector =
        CreditCardListNode_MembersInjector.create(
            creditCardListNodeItemProvider, creditCardListNodeComponentBuilderProvider);

    this.otherLiabilityAmountOwningNodeComponentBuilderProvider =
        new Factory<OtherLiabilityAmountOwningNodeComponent.Builder>() {
          @Override
          public OtherLiabilityAmountOwningNodeComponent.Builder get() {
            return new OtherLiabilityAmountOwningNodeComponentBuilder();
          }
        };

    this.otherLiabilityAmountOwningNodeMembersInjector =
        OtherLiabilityAmountOwningNode_MembersInjector.create(
            otherLiabilityAmountOwningNodeComponentBuilderProvider);

    this.otherLiabilityBreakCostNodeComponentBuilderProvider =
        new Factory<OtherLiabilityBreakCostNodeComponent.Builder>() {
          @Override
          public OtherLiabilityBreakCostNodeComponent.Builder get() {
            return new OtherLiabilityBreakCostNodeComponentBuilder();
          }
        };

    this.otherLiabilityBreakCostNodeMembersInjector =
        OtherLiabilityBreakCostNode_MembersInjector.create(
            otherLiabilityBreakCostNodeComponentBuilderProvider);

    this.otherLiabilityLimitAmountNodeComponentBuilderProvider =
        new Factory<OtherLiabilityLimitAmountNodeComponent.Builder>() {
          @Override
          public OtherLiabilityLimitAmountNodeComponent.Builder get() {
            return new OtherLiabilityLimitAmountNodeComponentBuilder();
          }
        };

    this.otherLiabilityLimitAmountNodeMembersInjector =
        OtherLiabilityLimitAmountNode_MembersInjector.create(
            otherLiabilityLimitAmountNodeComponentBuilderProvider);

    this.otherLiabilityMonthlyRepaymentNodeComponentBuilderProvider =
        new Factory<OtherLiabilityMonthlyRepaymentNodeComponent.Builder>() {
          @Override
          public OtherLiabilityMonthlyRepaymentNodeComponent.Builder get() {
            return new OtherLiabilityMonthlyRepaymentNodeComponentBuilder();
          }
        };

    this.otherLiabilityMonthlyRepaymentNodeMembersInjector =
        OtherLiabilityMonthlyRepaymentNode_MembersInjector.create(
            otherLiabilityMonthlyRepaymentNodeComponentBuilderProvider);

    this.otherLiabilityClearingFlagNodeComponentBuilderProvider =
        new Factory<OtherLiabilityClearingFlagNodeComponent.Builder>() {
          @Override
          public OtherLiabilityClearingFlagNodeComponent.Builder get() {
            return new OtherLiabilityClearingFlagNodeComponentBuilder();
          }
        };

    this.otherLiabilityClearingFlagNodeMembersInjector =
        OtherLiabilityClearingFlagNode_MembersInjector.create(
            otherLiabilityClearingFlagNodeComponentBuilderProvider);

    this.otherLiabilityDescriptionNodeComponentBuilderProvider =
        new Factory<OtherLiabilityDescriptionNodeComponent.Builder>() {
          @Override
          public OtherLiabilityDescriptionNodeComponent.Builder get() {
            return new OtherLiabilityDescriptionNodeComponentBuilder();
          }
        };

    this.otherLiabilityDescriptionNodeMembersInjector =
        OtherLiabilityDescriptionNode_MembersInjector.create(
            otherLiabilityDescriptionNodeComponentBuilderProvider);

    this.otherLiabilityTypeNodeComponentBuilderProvider =
        new Factory<OtherLiabilityTypeNodeComponent.Builder>() {
          @Override
          public OtherLiabilityTypeNodeComponent.Builder get() {
            return new OtherLiabilityTypeNodeComponentBuilder();
          }
        };

    this.otherLiabilityTypeNodeMembersInjector =
        OtherLiabilityTypeNode_MembersInjector.create(
            otherLiabilityTypeNodeComponentBuilderProvider);

    this.otherLiabilityNodeChildProviderMembersInjector =
        OtherLiabilityNodeChildProvider_MembersInjector.create(
            otherLiabilityAmountOwningNodeMembersInjector,
            otherLiabilityBreakCostNodeMembersInjector,
            otherLiabilityLimitAmountNodeMembersInjector,
            otherLiabilityMonthlyRepaymentNodeMembersInjector,
            otherLiabilityClearingFlagNodeMembersInjector,
            otherLiabilityDescriptionNodeMembersInjector,
            otherLiabilityTypeNodeMembersInjector);

    this.otherLiabilityNodeChildProvider =
        DoubleCheck.provider(
            OtherLiabilityNodeChildProvider_Factory.create(
                otherLiabilityNodeChildProviderMembersInjector));

    this.otherLiabilityNodeComponentBuilderProvider =
        new Factory<OtherLiabilityNodeComponent.Builder>() {
          @Override
          public OtherLiabilityNodeComponent.Builder get() {
            return new OtherLiabilityNodeComponentBuilder();
          }
        };

    this.otherLiabilityNodeMembersInjector =
        OtherLiabilityNode_MembersInjector.create(
            otherLiabilityNodeChildProvider, otherLiabilityNodeComponentBuilderProvider);

    this.otherLiabilityListNodeItemProviderMembersInjector =
        OtherLiabilityListNodeItemProvider_MembersInjector.create(
            otherLiabilityNodeMembersInjector);

    this.otherLiabilityListNodeItemProvider =
        DoubleCheck.provider(
            OtherLiabilityListNodeItemProvider_Factory.create(
                otherLiabilityListNodeItemProviderMembersInjector));

    this.otherLiabilityListNodeComponentBuilderProvider =
        new Factory<OtherLiabilityListNodeComponent.Builder>() {
          @Override
          public OtherLiabilityListNodeComponent.Builder get() {
            return new OtherLiabilityListNodeComponentBuilder();
          }
        };
  }

  @SuppressWarnings("unchecked")
  private void initialize4(final Builder builder) {

    this.otherLiabilityListNodeMembersInjector =
        OtherLiabilityListNode_MembersInjector.create(
            otherLiabilityListNodeItemProvider, otherLiabilityListNodeComponentBuilderProvider);

    this.loanLimitAmountNodeComponentBuilderProvider =
        new Factory<LoanLimitAmountNodeComponent.Builder>() {
          @Override
          public LoanLimitAmountNodeComponent.Builder get() {
            return new LoanLimitAmountNodeComponentBuilder();
          }
        };

    this.loanLimitAmountNodeMembersInjector =
        LoanLimitAmountNode_MembersInjector.create(loanLimitAmountNodeComponentBuilderProvider);

    this.loanOwingAmountNodeComponentBuilderProvider =
        new Factory<LoanOwingAmountNodeComponent.Builder>() {
          @Override
          public LoanOwingAmountNodeComponent.Builder get() {
            return new LoanOwingAmountNodeComponentBuilder();
          }
        };

    this.loanOwingAmountNodeMembersInjector =
        LoanOwingAmountNode_MembersInjector.create(loanOwingAmountNodeComponentBuilderProvider);

    this.loanTypeNodeComponentBuilderProvider =
        new Factory<LoanTypeNodeComponent.Builder>() {
          @Override
          public LoanTypeNodeComponent.Builder get() {
            return new LoanTypeNodeComponentBuilder();
          }
        };

    this.loanTypeNodeMembersInjector =
        LoanTypeNode_MembersInjector.create(loanTypeNodeComponentBuilderProvider);

    this.loanMonthlyRepaymentNodeComponentBuilderProvider =
        new Factory<LoanMonthlyRepaymentNodeComponent.Builder>() {
          @Override
          public LoanMonthlyRepaymentNodeComponent.Builder get() {
            return new LoanMonthlyRepaymentNodeComponentBuilder();
          }
        };

    this.loanMonthlyRepaymentNodeMembersInjector =
        LoanMonthlyRepaymentNode_MembersInjector.create(
            loanMonthlyRepaymentNodeComponentBuilderProvider);

    this.loanClearingFlagNodeComponentBuilderProvider =
        new Factory<LoanClearingFlagNodeComponent.Builder>() {
          @Override
          public LoanClearingFlagNodeComponent.Builder get() {
            return new LoanClearingFlagNodeComponentBuilder();
          }
        };

    this.loanClearingFlagNodeMembersInjector =
        LoanClearingFlagNode_MembersInjector.create(loanClearingFlagNodeComponentBuilderProvider);

    this.loanBreakCostNodeComponentBuilderProvider =
        new Factory<LoanBreakCostNodeComponent.Builder>() {
          @Override
          public LoanBreakCostNodeComponent.Builder get() {
            return new LoanBreakCostNodeComponentBuilder();
          }
        };

    this.loanBreakCostNodeMembersInjector =
        LoanBreakCostNode_MembersInjector.create(loanBreakCostNodeComponentBuilderProvider);

    this.loanLenderNameNodeComponentBuilderProvider =
        new Factory<LoanLenderNameNodeComponent.Builder>() {
          @Override
          public LoanLenderNameNodeComponent.Builder get() {
            return new LoanLenderNameNodeComponentBuilder();
          }
        };

    this.loanLenderNameNodeMembersInjector =
        LoanLenderNameNode_MembersInjector.create(loanLenderNameNodeComponentBuilderProvider);

    this.loanNodeChildProviderMembersInjector =
        LoanNodeChildProvider_MembersInjector.create(
            loanLimitAmountNodeMembersInjector,
            loanOwingAmountNodeMembersInjector,
            loanTypeNodeMembersInjector,
            loanMonthlyRepaymentNodeMembersInjector,
            loanClearingFlagNodeMembersInjector,
            loanBreakCostNodeMembersInjector,
            loanLenderNameNodeMembersInjector);

    this.loanNodeChildProvider =
        DoubleCheck.provider(
            LoanNodeChildProvider_Factory.create(loanNodeChildProviderMembersInjector));

    this.loanNodeComponentBuilderProvider =
        new Factory<LoanNodeComponent.Builder>() {
          @Override
          public LoanNodeComponent.Builder get() {
            return new LoanNodeComponentBuilder();
          }
        };

    this.loanNodeMembersInjector =
        LoanNode_MembersInjector.create(loanNodeChildProvider, loanNodeComponentBuilderProvider);

    this.loanListNodeItemProviderMembersInjector =
        LoanListNodeItemProvider_MembersInjector.create(loanNodeMembersInjector);

    this.loanListNodeItemProvider =
        DoubleCheck.provider(
            LoanListNodeItemProvider_Factory.create(loanListNodeItemProviderMembersInjector));

    this.loanListNodeComponentBuilderProvider =
        new Factory<LoanListNodeComponent.Builder>() {
          @Override
          public LoanListNodeComponent.Builder get() {
            return new LoanListNodeComponentBuilder();
          }
        };

    this.loanListNodeMembersInjector =
        LoanListNode_MembersInjector.create(
            loanListNodeItemProvider, loanListNodeComponentBuilderProvider);

    this.liabilitiesNodeChildProviderMembersInjector =
        LiabilitiesNodeChildProvider_MembersInjector.create(
            creditCardListNodeMembersInjector,
            otherLiabilityListNodeMembersInjector,
            loanListNodeMembersInjector);

    this.liabilitiesNodeChildProvider =
        DoubleCheck.provider(
            LiabilitiesNodeChildProvider_Factory.create(
                liabilitiesNodeChildProviderMembersInjector));

    this.liabilitiesNodeComponentBuilderProvider =
        new Factory<LiabilitiesNodeComponent.Builder>() {
          @Override
          public LiabilitiesNodeComponent.Builder get() {
            return new LiabilitiesNodeComponentBuilder();
          }
        };

    this.liabilitiesNodeMembersInjector =
        LiabilitiesNode_MembersInjector.create(
            liabilitiesNodeChildProvider, liabilitiesNodeComponentBuilderProvider);

    this.otherAssetDescriptionNodeComponentBuilderProvider =
        new Factory<OtherAssetDescriptionNodeComponent.Builder>() {
          @Override
          public OtherAssetDescriptionNodeComponent.Builder get() {
            return new OtherAssetDescriptionNodeComponentBuilder();
          }
        };

    this.otherAssetDescriptionNodeMembersInjector =
        OtherAssetDescriptionNode_MembersInjector.create(
            otherAssetDescriptionNodeComponentBuilderProvider);

    this.otherAssetTypeNodeComponentBuilderProvider =
        new Factory<OtherAssetTypeNodeComponent.Builder>() {
          @Override
          public OtherAssetTypeNodeComponent.Builder get() {
            return new OtherAssetTypeNodeComponentBuilder();
          }
        };

    this.otherAssetTypeNodeMembersInjector =
        OtherAssetTypeNode_MembersInjector.create(otherAssetTypeNodeComponentBuilderProvider);

    this.otherAssetMarketValueNodeComponentBuilderProvider =
        new Factory<OtherAssetMarketValueNodeComponent.Builder>() {
          @Override
          public OtherAssetMarketValueNodeComponent.Builder get() {
            return new OtherAssetMarketValueNodeComponentBuilder();
          }
        };

    this.otherAssetMarketValueNodeMembersInjector =
        OtherAssetMarketValueNode_MembersInjector.create(
            otherAssetMarketValueNodeComponentBuilderProvider);

    this.otherAssetNodeChildProviderMembersInjector =
        OtherAssetNodeChildProvider_MembersInjector.create(
            otherAssetDescriptionNodeMembersInjector,
            otherAssetTypeNodeMembersInjector,
            otherAssetMarketValueNodeMembersInjector);

    this.otherAssetNodeChildProvider =
        DoubleCheck.provider(
            OtherAssetNodeChildProvider_Factory.create(otherAssetNodeChildProviderMembersInjector));

    this.otherAssetNodeComponentBuilderProvider =
        new Factory<OtherAssetNodeComponent.Builder>() {
          @Override
          public OtherAssetNodeComponent.Builder get() {
            return new OtherAssetNodeComponentBuilder();
          }
        };

    this.otherAssetNodeMembersInjector =
        OtherAssetNode_MembersInjector.create(
            otherAssetNodeChildProvider, otherAssetNodeComponentBuilderProvider);

    this.otherAssetListNodeItemProviderMembersInjector =
        OtherAssetListNodeItemProvider_MembersInjector.create(otherAssetNodeMembersInjector);

    this.otherAssetListNodeItemProvider =
        DoubleCheck.provider(
            OtherAssetListNodeItemProvider_Factory.create(
                otherAssetListNodeItemProviderMembersInjector));

    this.otherAssetListNodeComponentBuilderProvider =
        new Factory<OtherAssetListNodeComponent.Builder>() {
          @Override
          public OtherAssetListNodeComponent.Builder get() {
            return new OtherAssetListNodeComponentBuilder();
          }
        };

    this.otherAssetListNodeMembersInjector =
        OtherAssetListNode_MembersInjector.create(
            otherAssetListNodeItemProvider, otherAssetListNodeComponentBuilderProvider);

    this.vehicleYearNodeComponentBuilderProvider =
        new Factory<VehicleYearNodeComponent.Builder>() {
          @Override
          public VehicleYearNodeComponent.Builder get() {
            return new VehicleYearNodeComponentBuilder();
          }
        };

    this.vehicleYearNodeMembersInjector =
        VehicleYearNode_MembersInjector.create(vehicleYearNodeComponentBuilderProvider);

    this.vehicleModelNodeComponentBuilderProvider =
        new Factory<VehicleModelNodeComponent.Builder>() {
          @Override
          public VehicleModelNodeComponent.Builder get() {
            return new VehicleModelNodeComponentBuilder();
          }
        };

    this.vehicleModelNodeMembersInjector =
        VehicleModelNode_MembersInjector.create(vehicleModelNodeComponentBuilderProvider);

    this.vehicleMarketValueNodeComponentBuilderProvider =
        new Factory<VehicleMarketValueNodeComponent.Builder>() {
          @Override
          public VehicleMarketValueNodeComponent.Builder get() {
            return new VehicleMarketValueNodeComponentBuilder();
          }
        };

    this.vehicleMarketValueNodeMembersInjector =
        VehicleMarketValueNode_MembersInjector.create(
            vehicleMarketValueNodeComponentBuilderProvider);

    this.motorVehicleNodeChildProviderMembersInjector =
        MotorVehicleNodeChildProvider_MembersInjector.create(
            vehicleYearNodeMembersInjector,
            vehicleModelNodeMembersInjector,
            vehicleMarketValueNodeMembersInjector);

    this.motorVehicleNodeChildProvider =
        DoubleCheck.provider(
            MotorVehicleNodeChildProvider_Factory.create(
                motorVehicleNodeChildProviderMembersInjector));

    this.motorVehicleNodeComponentBuilderProvider =
        new Factory<MotorVehicleNodeComponent.Builder>() {
          @Override
          public MotorVehicleNodeComponent.Builder get() {
            return new MotorVehicleNodeComponentBuilder();
          }
        };

    this.motorVehicleNodeMembersInjector =
        MotorVehicleNode_MembersInjector.create(
            motorVehicleNodeChildProvider, motorVehicleNodeComponentBuilderProvider);

    this.motorVehicleListNodeItemProviderMembersInjector =
        MotorVehicleListNodeItemProvider_MembersInjector.create(motorVehicleNodeMembersInjector);

    this.motorVehicleListNodeItemProvider =
        DoubleCheck.provider(
            MotorVehicleListNodeItemProvider_Factory.create(
                motorVehicleListNodeItemProviderMembersInjector));

    this.motorVehicleListNodeComponentBuilderProvider =
        new Factory<MotorVehicleListNodeComponent.Builder>() {
          @Override
          public MotorVehicleListNodeComponent.Builder get() {
            return new MotorVehicleListNodeComponentBuilder();
          }
        };

    this.motorVehicleListNodeMembersInjector =
        MotorVehicleListNode_MembersInjector.create(
            motorVehicleListNodeItemProvider, motorVehicleListNodeComponentBuilderProvider);

    this.savingsTypeNodeComponentBuilderProvider =
        new Factory<SavingsTypeNodeComponent.Builder>() {
          @Override
          public SavingsTypeNodeComponent.Builder get() {
            return new SavingsTypeNodeComponentBuilder();
          }
        };

    this.savingsTypeNodeMembersInjector =
        SavingsTypeNode_MembersInjector.create(savingsTypeNodeComponentBuilderProvider);

    this.savingsInstitutionNameNodeComponentBuilderProvider =
        new Factory<SavingsInstitutionNameNodeComponent.Builder>() {
          @Override
          public SavingsInstitutionNameNodeComponent.Builder get() {
            return new SavingsInstitutionNameNodeComponentBuilder();
          }
        };

    this.savingsInstitutionNameNodeMembersInjector =
        SavingsInstitutionNameNode_MembersInjector.create(
            savingsInstitutionNameNodeComponentBuilderProvider);

    this.savingsBalanceNodeComponentBuilderProvider =
        new Factory<SavingsBalanceNodeComponent.Builder>() {
          @Override
          public SavingsBalanceNodeComponent.Builder get() {
            return new SavingsBalanceNodeComponentBuilder();
          }
        };

    this.savingsBalanceNodeMembersInjector =
        SavingsBalanceNode_MembersInjector.create(savingsBalanceNodeComponentBuilderProvider);

    this.savingsAccountNoNodeComponentBuilderProvider =
        new Factory<SavingsAccountNoNodeComponent.Builder>() {
          @Override
          public SavingsAccountNoNodeComponent.Builder get() {
            return new SavingsAccountNoNodeComponentBuilder();
          }
        };

    this.savingsAccountNoNodeMembersInjector =
        SavingsAccountNoNode_MembersInjector.create(savingsAccountNoNodeComponentBuilderProvider);

    this.savingsAccountNameNodeComponentBuilderProvider =
        new Factory<SavingsAccountNameNodeComponent.Builder>() {
          @Override
          public SavingsAccountNameNodeComponent.Builder get() {
            return new SavingsAccountNameNodeComponentBuilder();
          }
        };

    this.savingsAccountNameNodeMembersInjector =
        SavingsAccountNameNode_MembersInjector.create(
            savingsAccountNameNodeComponentBuilderProvider);

    this.savingsBsbNoNodeComponentBuilderProvider =
        new Factory<SavingsBsbNoNodeComponent.Builder>() {
          @Override
          public SavingsBsbNoNodeComponent.Builder get() {
            return new SavingsBsbNoNodeComponentBuilder();
          }
        };

    this.savingsBsbNoNodeMembersInjector =
        SavingsBsbNoNode_MembersInjector.create(savingsBsbNoNodeComponentBuilderProvider);

    this.applicantReferenceNodeComponentBuilderProvider =
        new Factory<ApplicantReferenceNodeComponent.Builder>() {
          @Override
          public ApplicantReferenceNodeComponent.Builder get() {
            return new ApplicantReferenceNodeComponentBuilder();
          }
        };

    this.applicantReferenceNodeMembersInjector =
        ApplicantReferenceNode_MembersInjector.create(
            applicantReferenceNodeComponentBuilderProvider);

    this.averageFlagNodeComponentBuilderProvider =
        new Factory<AverageFlagNodeComponent.Builder>() {
          @Override
          public AverageFlagNodeComponent.Builder get() {
            return new AverageFlagNodeComponentBuilder();
          }
        };

    this.averageFlagNodeMembersInjector =
        AverageFlagNode_MembersInjector.create(averageFlagNodeComponentBuilderProvider);

    this.ownershipPercentageNodeComponentBuilderProvider =
        new Factory<OwnershipPercentageNodeComponent.Builder>() {
          @Override
          public OwnershipPercentageNodeComponent.Builder get() {
            return new OwnershipPercentageNodeComponentBuilder();
          }
        };

    this.ownershipPercentageNodeMembersInjector =
        OwnershipPercentageNode_MembersInjector.create(
            ownershipPercentageNodeComponentBuilderProvider);

    this.ownershipNodeChildProviderMembersInjector =
        OwnershipNodeChildProvider_MembersInjector.create(
            applicantReferenceNodeMembersInjector,
            averageFlagNodeMembersInjector,
            ownershipPercentageNodeMembersInjector);

    this.ownershipNodeChildProvider =
        DoubleCheck.provider(
            OwnershipNodeChildProvider_Factory.create(ownershipNodeChildProviderMembersInjector));

    this.ownershipNodeComponentBuilderProvider =
        new Factory<OwnershipNodeComponent.Builder>() {
          @Override
          public OwnershipNodeComponent.Builder get() {
            return new OwnershipNodeComponentBuilder();
          }
        };

    this.ownershipNodeMembersInjector =
        OwnershipNode_MembersInjector.create(
            ownershipNodeChildProvider, ownershipNodeComponentBuilderProvider);

    this.ownershipListNodeItemProviderMembersInjector =
        OwnershipListNodeItemProvider_MembersInjector.create(ownershipNodeMembersInjector);

    this.ownershipListNodeItemProvider =
        DoubleCheck.provider(
            OwnershipListNodeItemProvider_Factory.create(
                ownershipListNodeItemProviderMembersInjector));

    this.savingsOwnershipListNodeComponentBuilderProvider =
        new Factory<SavingsOwnershipListNodeComponent.Builder>() {
          @Override
          public SavingsOwnershipListNodeComponent.Builder get() {
            return new SavingsOwnershipListNodeComponentBuilder();
          }
        };

    this.savingsOwnershipListNodeMembersInjector =
        SavingsOwnershipListNode_MembersInjector.create(
            ownershipListNodeItemProvider, savingsOwnershipListNodeComponentBuilderProvider);

    this.savingsAccountNodeChildProviderMembersInjector =
        SavingsAccountNodeChildProvider_MembersInjector.create(
            savingsTypeNodeMembersInjector,
            savingsInstitutionNameNodeMembersInjector,
            savingsBalanceNodeMembersInjector,
            savingsAccountNoNodeMembersInjector,
            savingsAccountNameNodeMembersInjector,
            savingsBsbNoNodeMembersInjector,
            savingsOwnershipListNodeMembersInjector);

    this.savingsAccountNodeChildProvider =
        DoubleCheck.provider(
            SavingsAccountNodeChildProvider_Factory.create(
                savingsAccountNodeChildProviderMembersInjector));

    this.savingsAccountNodeComponentBuilderProvider =
        new Factory<SavingsAccountNodeComponent.Builder>() {
          @Override
          public SavingsAccountNodeComponent.Builder get() {
            return new SavingsAccountNodeComponentBuilder();
          }
        };

    this.savingsAccountNodeMembersInjector =
        SavingsAccountNode_MembersInjector.create(
            savingsAccountNodeChildProvider, savingsAccountNodeComponentBuilderProvider);

    this.savingsAccountListNodeItemProviderMembersInjector =
        SavingsAccountListNodeItemProvider_MembersInjector.create(
            savingsAccountNodeMembersInjector);

    this.savingsAccountListNodeItemProvider =
        DoubleCheck.provider(
            SavingsAccountListNodeItemProvider_Factory.create(
                savingsAccountListNodeItemProviderMembersInjector));

    this.savingsAccountListNodeComponentBuilderProvider =
        new Factory<SavingsAccountListNodeComponent.Builder>() {
          @Override
          public SavingsAccountListNodeComponent.Builder get() {
            return new SavingsAccountListNodeComponentBuilder();
          }
        };

    this.savingsAccountListNodeMembersInjector =
        SavingsAccountListNode_MembersInjector.create(
            savingsAccountListNodeItemProvider, savingsAccountListNodeComponentBuilderProvider);

    this.assetsNodeChildProviderMembersInjector =
        AssetsNodeChildProvider_MembersInjector.create(
            otherAssetListNodeMembersInjector,
            motorVehicleListNodeMembersInjector,
            savingsAccountListNodeMembersInjector);

    this.assetsNodeChildProvider =
        DoubleCheck.provider(
            AssetsNodeChildProvider_Factory.create(assetsNodeChildProviderMembersInjector));

    this.assetsNodeComponentBuilderProvider =
        new Factory<AssetsNodeComponent.Builder>() {
          @Override
          public AssetsNodeComponent.Builder get() {
            return new AssetsNodeComponentBuilder();
          }
        };

    this.assetsNodeMembersInjector =
        AssetsNode_MembersInjector.create(
            assetsNodeChildProvider, assetsNodeComponentBuilderProvider);

    this.financialPositionNodeChildProviderMembersInjector =
        FinancialPositionNodeChildProvider_MembersInjector.create(
            totalLiabilityNodeMembersInjector,
            totalAssetNodeMembersInjector,
            totalExpenseNodeMembersInjector,
            expenseListNodeMembersInjector,
            liabilitiesNodeMembersInjector,
            assetsNodeMembersInjector);

    this.financialPositionNodeChildProvider =
        DoubleCheck.provider(
            FinancialPositionNodeChildProvider_Factory.create(
                financialPositionNodeChildProviderMembersInjector));

    this.financialPositionNodeComponentBuilderProvider =
        new Factory<FinancialPositionNodeComponent.Builder>() {
          @Override
          public FinancialPositionNodeComponent.Builder get() {
            return new FinancialPositionNodeComponentBuilder();
          }
        };

    this.financialPositionNodeMembersInjector =
        FinancialPositionNode_MembersInjector.create(
            financialPositionNodeChildProvider, financialPositionNodeComponentBuilderProvider);

    this.addressRefNodeComponentBuilderProvider =
        new Factory<AddressRefNodeComponent.Builder>() {
          @Override
          public AddressRefNodeComponent.Builder get() {
            return new AddressRefNodeComponentBuilder();
          }
        };

    this.addressRefNodeMembersInjector =
        AddressRefNode_MembersInjector.create(addressRefNodeComponentBuilderProvider);

    this.addressRefListNodeItemProviderMembersInjector =
        AddressRefListNodeItemProvider_MembersInjector.create(addressRefNodeMembersInjector);
  }

  @SuppressWarnings("unchecked")
  private void initialize5(final Builder builder) {

    this.addressRefListNodeItemProvider =
        DoubleCheck.provider(
            AddressRefListNodeItemProvider_Factory.create(
                addressRefListNodeItemProviderMembersInjector));

    this.addressRefListNodeComponentBuilderProvider =
        new Factory<AddressRefListNodeComponent.Builder>() {
          @Override
          public AddressRefListNodeComponent.Builder get() {
            return new AddressRefListNodeComponentBuilder();
          }
        };

    this.addressRefListNodeMembersInjector =
        AddressRefListNode_MembersInjector.create(
            addressRefListNodeItemProvider, addressRefListNodeComponentBuilderProvider);

    this.submissionNodeComponentBuilderProvider =
        new Factory<SubmissionNodeComponent.Builder>() {
          @Override
          public SubmissionNodeComponent.Builder get() {
            return new SubmissionNodeComponentBuilder();
          }
        };

    this.submissionNodeMembersInjector =
        SubmissionNode_MembersInjector.create(submissionNodeComponentBuilderProvider);

    this.propertyPurseNodeComponentBuilderProvider =
        new Factory<PropertyPurseNodeComponent.Builder>() {
          @Override
          public PropertyPurseNodeComponent.Builder get() {
            return new PropertyPurseNodeComponentBuilder();
          }
        };

    this.propertyPurseNodeMembersInjector =
        PropertyPurseNode_MembersInjector.create(propertyPurseNodeComponentBuilderProvider);

    this.estimatedMarketValueNodeComponentBuilderProvider =
        new Factory<EstimatedMarketValueNodeComponent.Builder>() {
          @Override
          public EstimatedMarketValueNodeComponent.Builder get() {
            return new EstimatedMarketValueNodeComponentBuilder();
          }
        };

    this.estimatedMarketValueNodeMembersInjector =
        EstimatedMarketValueNode_MembersInjector.create(
            estimatedMarketValueNodeComponentBuilderProvider);

    this.propertyWeeklyRentNodeComponentBuilderProvider =
        new Factory<PropertyWeeklyRentNodeComponent.Builder>() {
          @Override
          public PropertyWeeklyRentNodeComponent.Builder get() {
            return new PropertyWeeklyRentNodeComponentBuilder();
          }
        };

    this.propertyWeeklyRentNodeMembersInjector =
        PropertyWeeklyRentNode_MembersInjector.create(
            propertyWeeklyRentNodeComponentBuilderProvider);

    this.propertyAddressNodeComponentBuilderProvider =
        new Factory<PropertyAddressNodeComponent.Builder>() {
          @Override
          public PropertyAddressNodeComponent.Builder get() {
            return new PropertyAddressNodeComponentBuilder();
          }
        };

    this.propertyAddressNodeMembersInjector =
        PropertyAddressNode_MembersInjector.create(
            addressNodeChildProvider, propertyAddressNodeComponentBuilderProvider);

    this.propertyOwnershipListNodeComponentBuilderProvider =
        new Factory<PropertyOwnershipListNodeComponent.Builder>() {
          @Override
          public PropertyOwnershipListNodeComponent.Builder get() {
            return new PropertyOwnershipListNodeComponentBuilder();
          }
        };

    this.propertyOwnershipListNodeMembersInjector =
        PropertyOwnershipListNode_MembersInjector.create(
            ownershipListNodeItemProvider, propertyOwnershipListNodeComponentBuilderProvider);

    this.rentedFlagNodeComponentBuilderProvider =
        new Factory<RentedFlagNodeComponent.Builder>() {
          @Override
          public RentedFlagNodeComponent.Builder get() {
            return new RentedFlagNodeComponentBuilder();
          }
        };

    this.rentedFlagNodeMembersInjector =
        RentedFlagNode_MembersInjector.create(rentedFlagNodeComponentBuilderProvider);

    this.defenseServiceFlagNodeComponentBuilderProvider =
        new Factory<DefenseServiceFlagNodeComponent.Builder>() {
          @Override
          public DefenseServiceFlagNodeComponent.Builder get() {
            return new DefenseServiceFlagNodeComponentBuilder();
          }
        };

    this.defenseServiceFlagNodeMembersInjector =
        DefenseServiceFlagNode_MembersInjector.create(
            defenseServiceFlagNodeComponentBuilderProvider);

    this.propertyTypeNodeComponentBuilderProvider =
        new Factory<PropertyTypeNodeComponent.Builder>() {
          @Override
          public PropertyTypeNodeComponent.Builder get() {
            return new PropertyTypeNodeComponentBuilder();
          }
        };

    this.propertyTypeNodeMembersInjector =
        PropertyTypeNode_MembersInjector.create(propertyTypeNodeComponentBuilderProvider);

    this.contractPriceNodeComponentBuilderProvider =
        new Factory<ContractPriceNodeComponent.Builder>() {
          @Override
          public ContractPriceNodeComponent.Builder get() {
            return new ContractPriceNodeComponentBuilder();
          }
        };

    this.contractPriceNodeMembersInjector =
        ContractPriceNode_MembersInjector.create(contractPriceNodeComponentBuilderProvider);

    this.propertySubTypeNodeComponentBuilderProvider =
        new Factory<PropertySubTypeNodeComponent.Builder>() {
          @Override
          public PropertySubTypeNodeComponent.Builder get() {
            return new PropertySubTypeNodeComponentBuilder();
          }
        };

    this.propertySubTypeNodeMembersInjector =
        PropertySubTypeNode_MembersInjector.create(propertySubTypeNodeComponentBuilderProvider);

    this.propertyNodeChildProviderMembersInjector =
        PropertyNodeChildProvider_MembersInjector.create(
            propertyPurseNodeMembersInjector,
            estimatedMarketValueNodeMembersInjector,
            propertyWeeklyRentNodeMembersInjector,
            propertyAddressNodeMembersInjector,
            propertyOwnershipListNodeMembersInjector,
            rentedFlagNodeMembersInjector,
            defenseServiceFlagNodeMembersInjector,
            propertyTypeNodeMembersInjector,
            contractPriceNodeMembersInjector,
            propertySubTypeNodeMembersInjector);

    this.propertyNodeChildProvider =
        DoubleCheck.provider(
            PropertyNodeChildProvider_Factory.create(propertyNodeChildProviderMembersInjector));

    this.propertyNodeComponentBuilderProvider =
        new Factory<PropertyNodeComponent.Builder>() {
          @Override
          public PropertyNodeComponent.Builder get() {
            return new PropertyNodeComponentBuilder();
          }
        };

    this.propertyNodeMembersInjector =
        PropertyNode_MembersInjector.create(
            propertyNodeChildProvider, propertyNodeComponentBuilderProvider);

    this.ownedOutrightFlagNodeComponentBuilderProvider =
        new Factory<OwnedOutrightFlagNodeComponent.Builder>() {
          @Override
          public OwnedOutrightFlagNodeComponent.Builder get() {
            return new OwnedOutrightFlagNodeComponentBuilder();
          }
        };

    this.ownedOutrightFlagNodeMembersInjector =
        OwnedOutrightFlagNode_MembersInjector.create(ownedOutrightFlagNodeComponentBuilderProvider);

    this.approvalInPrincipleFlagNodeComponentBuilderProvider =
        new Factory<ApprovalInPrincipleFlagNodeComponent.Builder>() {
          @Override
          public ApprovalInPrincipleFlagNodeComponent.Builder get() {
            return new ApprovalInPrincipleFlagNodeComponentBuilder();
          }
        };

    this.approvalInPrincipleFlagNodeMembersInjector =
        ApprovalInPrincipleFlagNode_MembersInjector.create(
            approvalInPrincipleFlagNodeComponentBuilderProvider);

    this.primarySecurityFlagNodeComponentBuilderProvider =
        new Factory<PrimarySecurityFlagNodeComponent.Builder>() {
          @Override
          public PrimarySecurityFlagNodeComponent.Builder get() {
            return new PrimarySecurityFlagNodeComponentBuilder();
          }
        };

    this.primarySecurityFlagNodeMembersInjector =
        PrimarySecurityFlagNode_MembersInjector.create(
            primarySecurityFlagNodeComponentBuilderProvider);

    this.beingPurchasedFlagNodeComponentBuilderProvider =
        new Factory<BeingPurchasedFlagNodeComponent.Builder>() {
          @Override
          public BeingPurchasedFlagNodeComponent.Builder get() {
            return new BeingPurchasedFlagNodeComponentBuilder();
          }
        };

    this.beingPurchasedFlagNodeMembersInjector =
        BeingPurchasedFlagNode_MembersInjector.create(
            beingPurchasedFlagNodeComponentBuilderProvider);

    this.usedAsSecurityFlagNodeComponentBuilderProvider =
        new Factory<UsedAsSecurityFlagNodeComponent.Builder>() {
          @Override
          public UsedAsSecurityFlagNodeComponent.Builder get() {
            return new UsedAsSecurityFlagNodeComponentBuilder();
          }
        };

    this.usedAsSecurityFlagNodeMembersInjector =
        UsedAsSecurityFlagNode_MembersInjector.create(
            usedAsSecurityFlagNodeComponentBuilderProvider);

    this.mortgageLoanTypeNodeComponentBuilderProvider =
        new Factory<MortgageLoanTypeNodeComponent.Builder>() {
          @Override
          public MortgageLoanTypeNodeComponent.Builder get() {
            return new MortgageLoanTypeNodeComponentBuilder();
          }
        };

    this.mortgageLoanTypeNodeMembersInjector =
        MortgageLoanTypeNode_MembersInjector.create(mortgageLoanTypeNodeComponentBuilderProvider);

    this.mortgageTermRemainingPeriodNodeComponentBuilderProvider =
        new Factory<MortgageTermRemainingPeriodNodeComponent.Builder>() {
          @Override
          public MortgageTermRemainingPeriodNodeComponent.Builder get() {
            return new MortgageTermRemainingPeriodNodeComponentBuilder();
          }
        };

    this.mortgageTermRemainingPeriodNodeMembersInjector =
        MortgageTermRemainingPeriodNode_MembersInjector.create(
            mortgageTermRemainingPeriodNodeComponentBuilderProvider);

    this.mortgageLoanTermExpiryDateNodeComponentBuilderProvider =
        new Factory<MortgageLoanTermExpiryDateNodeComponent.Builder>() {
          @Override
          public MortgageLoanTermExpiryDateNodeComponent.Builder get() {
            return new MortgageLoanTermExpiryDateNodeComponentBuilder();
          }
        };

    this.mortgageLoanTermExpiryDateNodeMembersInjector =
        MortgageLoanTermExpiryDateNode_MembersInjector.create(
            mortgageLoanTermExpiryDateNodeComponentBuilderProvider);

    this.mortgageChargePositionNodeComponentBuilderProvider =
        new Factory<MortgageChargePositionNodeComponent.Builder>() {
          @Override
          public MortgageChargePositionNodeComponent.Builder get() {
            return new MortgageChargePositionNodeComponentBuilder();
          }
        };

    this.mortgageChargePositionNodeMembersInjector =
        MortgageChargePositionNode_MembersInjector.create(
            mortgageChargePositionNodeComponentBuilderProvider);

    this.mortgageInterestOnlyRemainingPeriodNodeComponentBuilderProvider =
        new Factory<MortgageInterestOnlyRemainingPeriodNodeComponent.Builder>() {
          @Override
          public MortgageInterestOnlyRemainingPeriodNodeComponent.Builder get() {
            return new MortgageInterestOnlyRemainingPeriodNodeComponentBuilder();
          }
        };

    this.mortgageInterestOnlyRemainingPeriodNodeMembersInjector =
        MortgageInterestOnlyRemainingPeriodNode_MembersInjector.create(
            mortgageInterestOnlyRemainingPeriodNodeComponentBuilderProvider);

    this.mortgqageUnpaidBalanceNodeComponentBuilderProvider =
        new Factory<MortgqageUnpaidBalanceNodeComponent.Builder>() {
          @Override
          public MortgqageUnpaidBalanceNodeComponent.Builder get() {
            return new MortgqageUnpaidBalanceNodeComponentBuilder();
          }
        };

    this.mortgqageUnpaidBalanceNodeMembersInjector =
        MortgqageUnpaidBalanceNode_MembersInjector.create(
            mortgqageUnpaidBalanceNodeComponentBuilderProvider);

    this.mortgageLimitAmountNodeComponentBuilderProvider =
        new Factory<MortgageLimitAmountNodeComponent.Builder>() {
          @Override
          public MortgageLimitAmountNodeComponent.Builder get() {
            return new MortgageLimitAmountNodeComponentBuilder();
          }
        };

    this.mortgageLimitAmountNodeMembersInjector =
        MortgageLimitAmountNode_MembersInjector.create(
            mortgageLimitAmountNodeComponentBuilderProvider);

    this.mortgageBreakFeeNodeComponentBuilderProvider =
        new Factory<MortgageBreakFeeNodeComponent.Builder>() {
          @Override
          public MortgageBreakFeeNodeComponent.Builder get() {
            return new MortgageBreakFeeNodeComponentBuilder();
          }
        };

    this.mortgageBreakFeeNodeMembersInjector =
        MortgageBreakFeeNode_MembersInjector.create(mortgageBreakFeeNodeComponentBuilderProvider);

    this.mortgageLenderInstitutionNodeComponentBuilderProvider =
        new Factory<MortgageLenderInstitutionNodeComponent.Builder>() {
          @Override
          public MortgageLenderInstitutionNodeComponent.Builder get() {
            return new MortgageLenderInstitutionNodeComponentBuilder();
          }
        };

    this.mortgageLenderInstitutionNodeMembersInjector =
        MortgageLenderInstitutionNode_MembersInjector.create(
            mortgageLenderInstitutionNodeComponentBuilderProvider);

    this.mortgageClearingFlagNodeComponentBuilderProvider =
        new Factory<MortgageClearingFlagNodeComponent.Builder>() {
          @Override
          public MortgageClearingFlagNodeComponent.Builder get() {
            return new MortgageClearingFlagNodeComponentBuilder();
          }
        };

    this.mortgageClearingFlagNodeMembersInjector =
        MortgageClearingFlagNode_MembersInjector.create(
            mortgageClearingFlagNodeComponentBuilderProvider);

    this.mortgageMonthlyRepaymentNodeComponentBuilderProvider =
        new Factory<MortgageMonthlyRepaymentNodeComponent.Builder>() {
          @Override
          public MortgageMonthlyRepaymentNodeComponent.Builder get() {
            return new MortgageMonthlyRepaymentNodeComponentBuilder();
          }
        };

    this.mortgageMonthlyRepaymentNodeMembersInjector =
        MortgageMonthlyRepaymentNode_MembersInjector.create(
            mortgageMonthlyRepaymentNodeComponentBuilderProvider);

    this.mortgageBorrowerRateNodeComponentBuilderProvider =
        new Factory<MortgageBorrowerRateNodeComponent.Builder>() {
          @Override
          public MortgageBorrowerRateNodeComponent.Builder get() {
            return new MortgageBorrowerRateNodeComponentBuilder();
          }
        };

    this.mortgageBorrowerRateNodeMembersInjector =
        MortgageBorrowerRateNode_MembersInjector.create(
            mortgageBorrowerRateNodeComponentBuilderProvider);

    this.mortgageInterestOnlyExpiryDateNodeComponentBuilderProvider =
        new Factory<MortgageInterestOnlyExpiryDateNodeComponent.Builder>() {
          @Override
          public MortgageInterestOnlyExpiryDateNodeComponent.Builder get() {
            return new MortgageInterestOnlyExpiryDateNodeComponentBuilder();
          }
        };

    this.mortgageInterestOnlyExpiryDateNodeMembersInjector =
        MortgageInterestOnlyExpiryDateNode_MembersInjector.create(
            mortgageInterestOnlyExpiryDateNodeComponentBuilderProvider);

    this.existingMortgageNodeChildProviderMembersInjector =
        ExistingMortgageNodeChildProvider_MembersInjector.create(
            mortgageLoanTypeNodeMembersInjector,
            mortgageTermRemainingPeriodNodeMembersInjector,
            mortgageLoanTermExpiryDateNodeMembersInjector,
            mortgageChargePositionNodeMembersInjector,
            mortgageInterestOnlyRemainingPeriodNodeMembersInjector,
            mortgqageUnpaidBalanceNodeMembersInjector,
            mortgageLimitAmountNodeMembersInjector,
            mortgageBreakFeeNodeMembersInjector,
            mortgageLenderInstitutionNodeMembersInjector,
            mortgageClearingFlagNodeMembersInjector,
            mortgageMonthlyRepaymentNodeMembersInjector,
            mortgageBorrowerRateNodeMembersInjector,
            mortgageInterestOnlyExpiryDateNodeMembersInjector);

    this.existingMortgageNodeChildProvider =
        DoubleCheck.provider(
            ExistingMortgageNodeChildProvider_Factory.create(
                existingMortgageNodeChildProviderMembersInjector));

    this.existingMortgageNodeComponentBuilderProvider =
        new Factory<ExistingMortgageNodeComponent.Builder>() {
          @Override
          public ExistingMortgageNodeComponent.Builder get() {
            return new ExistingMortgageNodeComponentBuilder();
          }
        };

    this.existingMortgageNodeMembersInjector =
        ExistingMortgageNode_MembersInjector.create(
            existingMortgageNodeChildProvider, existingMortgageNodeComponentBuilderProvider);

    this.existingMortgageListNodeItemProviderMembersInjector =
        ExistingMortgageListNodeItemProvider_MembersInjector.create(
            existingMortgageNodeMembersInjector);

    this.existingMortgageListNodeItemProvider =
        DoubleCheck.provider(
            ExistingMortgageListNodeItemProvider_Factory.create(
                existingMortgageListNodeItemProviderMembersInjector));

    this.existingMortgageListNodeComponentBuilderProvider =
        new Factory<ExistingMortgageListNodeComponent.Builder>() {
          @Override
          public ExistingMortgageListNodeComponent.Builder get() {
            return new ExistingMortgageListNodeComponentBuilder();
          }
        };

    this.existingMortgageListNodeMembersInjector =
        ExistingMortgageListNode_MembersInjector.create(
            existingMortgageListNodeItemProvider, existingMortgageListNodeComponentBuilderProvider);

    this.usageNodeChildProviderMembersInjector =
        UsageNodeChildProvider_MembersInjector.create(
            ownedOutrightFlagNodeMembersInjector,
            approvalInPrincipleFlagNodeMembersInjector,
            primarySecurityFlagNodeMembersInjector,
            beingPurchasedFlagNodeMembersInjector,
            usedAsSecurityFlagNodeMembersInjector,
            existingMortgageListNodeMembersInjector);

    this.usageNodeChildProvider =
        DoubleCheck.provider(
            UsageNodeChildProvider_Factory.create(usageNodeChildProviderMembersInjector));

    this.usageNodeComponentBuilderProvider =
        new Factory<UsageNodeComponent.Builder>() {
          @Override
          public UsageNodeComponent.Builder get() {
            return new UsageNodeComponentBuilder();
          }
        };

    this.usageNodeMembersInjector =
        UsageNode_MembersInjector.create(usageNodeChildProvider, usageNodeComponentBuilderProvider);

    this.accessContactLastNameNodeComponentBuilderProvider =
        new Factory<AccessContactLastNameNodeComponent.Builder>() {
          @Override
          public AccessContactLastNameNodeComponent.Builder get() {
            return new AccessContactLastNameNodeComponentBuilder();
          }
        };

    this.accessContactLastNameNodeMembersInjector =
        AccessContactLastNameNode_MembersInjector.create(
            accessContactLastNameNodeComponentBuilderProvider);

    this.accessOtherDescriptionNodeComponentBuilderProvider =
        new Factory<AccessOtherDescriptionNodeComponent.Builder>() {
          @Override
          public AccessOtherDescriptionNodeComponent.Builder get() {
            return new AccessOtherDescriptionNodeComponentBuilder();
          }
        };

    this.accessOtherDescriptionNodeMembersInjector =
        AccessOtherDescriptionNode_MembersInjector.create(
            accessOtherDescriptionNodeComponentBuilderProvider);

    this.accessContactFirstNameNodeComponentBuilderProvider =
        new Factory<AccessContactFirstNameNodeComponent.Builder>() {
          @Override
          public AccessContactFirstNameNodeComponent.Builder get() {
            return new AccessContactFirstNameNodeComponentBuilder();
          }
        };

    this.accessContactFirstNameNodeMembersInjector =
        AccessContactFirstNameNode_MembersInjector.create(
            accessContactFirstNameNodeComponentBuilderProvider);

    this.accessContactTypeNodeComponentBuilderProvider =
        new Factory<AccessContactTypeNodeComponent.Builder>() {
          @Override
          public AccessContactTypeNodeComponent.Builder get() {
            return new AccessContactTypeNodeComponentBuilder();
          }
        };

    this.accessContactTypeNodeMembersInjector =
        AccessContactTypeNode_MembersInjector.create(accessContactTypeNodeComponentBuilderProvider);

    this.accessContactTitleNodeComponentBuilderProvider =
        new Factory<AccessContactTitleNodeComponent.Builder>() {
          @Override
          public AccessContactTitleNodeComponent.Builder get() {
            return new AccessContactTitleNodeComponentBuilder();
          }
        };

    this.accessContactTitleNodeMembersInjector =
        AccessContactTitleNode_MembersInjector.create(
            accessContactTitleNodeComponentBuilderProvider);

    this.accessTelephoneNodeComponentBuilderProvider =
        new Factory<AccessTelephoneNodeComponent.Builder>() {
          @Override
          public AccessTelephoneNodeComponent.Builder get() {
            return new AccessTelephoneNodeComponentBuilder();
          }
        };

    this.accessTelephoneNodeMembersInjector =
        AccessTelephoneNode_MembersInjector.create(accessTelephoneNodeComponentBuilderProvider);

    this.accessCompanyNameNodeComponentBuilderProvider =
        new Factory<AccessCompanyNameNodeComponent.Builder>() {
          @Override
          public AccessCompanyNameNodeComponent.Builder get() {
            return new AccessCompanyNameNodeComponentBuilder();
          }
        };

    this.accessCompanyNameNodeMembersInjector =
        AccessCompanyNameNode_MembersInjector.create(accessCompanyNameNodeComponentBuilderProvider);

    this.accessNodeChildProviderMembersInjector =
        AccessNodeChildProvider_MembersInjector.create(
            accessContactLastNameNodeMembersInjector,
            accessOtherDescriptionNodeMembersInjector,
            accessContactFirstNameNodeMembersInjector,
            accessContactTypeNodeMembersInjector,
            accessContactTitleNodeMembersInjector,
            accessTelephoneNodeMembersInjector,
            accessCompanyNameNodeMembersInjector);

    this.accessNodeChildProvider =
        DoubleCheck.provider(
            AccessNodeChildProvider_Factory.create(accessNodeChildProviderMembersInjector));

    this.accessNodeComponentBuilderProvider =
        new Factory<AccessNodeComponent.Builder>() {
          @Override
          public AccessNodeComponent.Builder get() {
            return new AccessNodeComponentBuilder();
          }
        };

    this.accessNodeMembersInjector =
        AccessNode_MembersInjector.create(
            accessNodeChildProvider, accessNodeComponentBuilderProvider);

    this.realEstateNodeChildProviderMembersInjector =
        RealEstateNodeChildProvider_MembersInjector.create(
            propertyNodeMembersInjector, usageNodeMembersInjector, accessNodeMembersInjector);

    this.realEstateNodeChildProvider =
        DoubleCheck.provider(
            RealEstateNodeChildProvider_Factory.create(realEstateNodeChildProviderMembersInjector));

    this.realEstateNodeComponentBuilderProvider =
        new Factory<RealEstateNodeComponent.Builder>() {
          @Override
          public RealEstateNodeComponent.Builder get() {
            return new RealEstateNodeComponentBuilder();
          }
        };

    this.realEstateNodeMembersInjector =
        RealEstateNode_MembersInjector.create(
            realEstateNodeChildProvider, realEstateNodeComponentBuilderProvider);

    this.realEstateListNodeItemProviderMembersInjector =
        RealEstateListNodeItemProvider_MembersInjector.create(realEstateNodeMembersInjector);
  }

  @SuppressWarnings("unchecked")
  private void initialize6(final Builder builder) {

    this.realEstateListNodeItemProvider =
        DoubleCheck.provider(
            RealEstateListNodeItemProvider_Factory.create(
                realEstateListNodeItemProviderMembersInjector));

    this.realEstateListNodeComponentBuilderProvider =
        new Factory<RealEstateListNodeComponent.Builder>() {
          @Override
          public RealEstateListNodeComponent.Builder get() {
            return new RealEstateListNodeComponentBuilder();
          }
        };

    this.realEstateListNodeMembersInjector =
        RealEstateListNode_MembersInjector.create(
            realEstateListNodeItemProvider, realEstateListNodeComponentBuilderProvider);

    this.companyPrivacyNodeComponentBuilderProvider =
        new Factory<CompanyPrivacyNodeComponent.Builder>() {
          @Override
          public CompanyPrivacyNodeComponent.Builder get() {
            return new CompanyPrivacyNodeComponentBuilder();
          }
        };

    this.companyPrivacyNodeMembersInjector =
        CompanyPrivacyNode_MembersInjector.create(
            basePrivacyNodeChildProvider, companyPrivacyNodeComponentBuilderProvider);

    this.companyOtherIncomeListNodeComponentBuilderProvider =
        new Factory<CompanyOtherIncomeListNodeComponent.Builder>() {
          @Override
          public CompanyOtherIncomeListNodeComponent.Builder get() {
            return new CompanyOtherIncomeListNodeComponentBuilder();
          }
        };

    this.companyOtherIncomeListNodeMembersInjector =
        CompanyOtherIncomeListNode_MembersInjector.create(
            baseOtherIncomeListNodeItemProvider,
            companyOtherIncomeListNodeComponentBuilderProvider);

    this.companyResponsibleLendNodeComponentBuilderProvider =
        new Factory<CompanyResponsibleLendNodeComponent.Builder>() {
          @Override
          public CompanyResponsibleLendNodeComponent.Builder get() {
            return new CompanyResponsibleLendNodeComponentBuilder();
          }
        };

    this.companyResponsibleLendNodeMembersInjector =
        CompanyResponsibleLendNode_MembersInjector.create(
            baseResponsibleLendNodeChildProvider,
            companyResponsibleLendNodeComponentBuilderProvider);

    this.companyContactFirstNameNodeComponentBuilderProvider =
        new Factory<CompanyContactFirstNameNodeComponent.Builder>() {
          @Override
          public CompanyContactFirstNameNodeComponent.Builder get() {
            return new CompanyContactFirstNameNodeComponentBuilder();
          }
        };

    this.companyContactFirstNameNodeMembersInjector =
        CompanyContactFirstNameNode_MembersInjector.create(
            companyContactFirstNameNodeComponentBuilderProvider);

    this.companyContactLastNameNodeComponentBuilderProvider =
        new Factory<CompanyContactLastNameNodeComponent.Builder>() {
          @Override
          public CompanyContactLastNameNodeComponent.Builder get() {
            return new CompanyContactLastNameNodeComponentBuilder();
          }
        };

    this.companyContactLastNameNodeMembersInjector =
        CompanyContactLastNameNode_MembersInjector.create(
            companyContactLastNameNodeComponentBuilderProvider);

    this.companyContactNodeChildProviderMembersInjector =
        CompanyContactNodeChildProvider_MembersInjector.create(
            companyContactFirstNameNodeMembersInjector, companyContactLastNameNodeMembersInjector);

    this.companyContactNodeChildProvider =
        DoubleCheck.provider(
            CompanyContactNodeChildProvider_Factory.create(
                companyContactNodeChildProviderMembersInjector));

    this.companyContactNodeComponentBuilderProvider =
        new Factory<CompanyContactNodeComponent.Builder>() {
          @Override
          public CompanyContactNodeComponent.Builder get() {
            return new CompanyContactNodeComponentBuilder();
          }
        };

    this.companyContactNodeMembersInjector =
        CompanyContactNode_MembersInjector.create(
            provideBaseContactNodeChildProvider,
            companyContactNodeChildProvider,
            companyContactNodeComponentBuilderProvider);

    this.companyRegistrationDateNodeComponentBuilderProvider =
        new Factory<CompanyRegistrationDateNodeComponent.Builder>() {
          @Override
          public CompanyRegistrationDateNodeComponent.Builder get() {
            return new CompanyRegistrationDateNodeComponentBuilder();
          }
        };

    this.companyRegistrationDateNodeMembersInjector =
        CompanyRegistrationDateNode_MembersInjector.create(
            companyRegistrationDateNodeComponentBuilderProvider);

    this.relatedPersonReferenceNodeComponentBuilderProvider =
        new Factory<RelatedPersonReferenceNodeComponent.Builder>() {
          @Override
          public RelatedPersonReferenceNodeComponent.Builder get() {
            return new RelatedPersonReferenceNodeComponentBuilder();
          }
        };

    this.relatedPersonReferenceNodeMembersInjector =
        RelatedPersonReferenceNode_MembersInjector.create(
            relatedPersonReferenceNodeComponentBuilderProvider);

    this.selectRelatedPersonFlagNodeComponentBuilderProvider =
        new Factory<SelectRelatedPersonFlagNodeComponent.Builder>() {
          @Override
          public SelectRelatedPersonFlagNodeComponent.Builder get() {
            return new SelectRelatedPersonFlagNodeComponentBuilder();
          }
        };

    this.selectRelatedPersonFlagNodeMembersInjector =
        SelectRelatedPersonFlagNode_MembersInjector.create(
            selectRelatedPersonFlagNodeComponentBuilderProvider);

    this.selectRelatedPersonNodeChildProviderMembersInjector =
        SelectRelatedPersonNodeChildProvider_MembersInjector.create(
            relatedPersonReferenceNodeMembersInjector, selectRelatedPersonFlagNodeMembersInjector);

    this.selectRelatedPersonNodeChildProvider =
        DoubleCheck.provider(
            SelectRelatedPersonNodeChildProvider_Factory.create(
                selectRelatedPersonNodeChildProviderMembersInjector));

    this.selectRelatedPersonNodeComponentBuilderProvider =
        new Factory<SelectRelatedPersonNodeComponent.Builder>() {
          @Override
          public SelectRelatedPersonNodeComponent.Builder get() {
            return new SelectRelatedPersonNodeComponentBuilder();
          }
        };

    this.selectRelatedPersonNodeMembersInjector =
        SelectRelatedPersonNode_MembersInjector.create(
            selectRelatedPersonNodeChildProvider, selectRelatedPersonNodeComponentBuilderProvider);

    this.selectRelatedPersonListNodeItemProviderMembersInjector =
        SelectRelatedPersonListNodeItemProvider_MembersInjector.create(
            selectRelatedPersonNodeMembersInjector);

    this.selectRelatedPersonListNodeItemProvider =
        DoubleCheck.provider(
            SelectRelatedPersonListNodeItemProvider_Factory.create(
                selectRelatedPersonListNodeItemProviderMembersInjector));

    this.companySelectBeneficialOwnerNodeComponentBuilderProvider =
        new Factory<CompanySelectBeneficialOwnerNodeComponent.Builder>() {
          @Override
          public CompanySelectBeneficialOwnerNodeComponent.Builder get() {
            return new CompanySelectBeneficialOwnerNodeComponentBuilder();
          }
        };

    this.companySelectBeneficialOwnerNodeMembersInjector =
        CompanySelectBeneficialOwnerNode_MembersInjector.create(
            selectRelatedPersonListNodeItemProvider,
            companySelectBeneficialOwnerNodeComponentBuilderProvider);

    this.companyAbnNodeComponentBuilderProvider =
        new Factory<CompanyAbnNodeComponent.Builder>() {
          @Override
          public CompanyAbnNodeComponent.Builder get() {
            return new CompanyAbnNodeComponentBuilder();
          }
        };

    this.companyAbnNodeMembersInjector =
        CompanyAbnNode_MembersInjector.create(companyAbnNodeComponentBuilderProvider);

    this.companyTypeNodeComponentBuilderProvider =
        new Factory<CompanyTypeNodeComponent.Builder>() {
          @Override
          public CompanyTypeNodeComponent.Builder get() {
            return new CompanyTypeNodeComponentBuilder();
          }
        };

    this.companyTypeNodeMembersInjector =
        CompanyTypeNode_MembersInjector.create(companyTypeNodeComponentBuilderProvider);

    this.companyRegistrationStateNodeComponentBuilderProvider =
        new Factory<CompanyRegistrationStateNodeComponent.Builder>() {
          @Override
          public CompanyRegistrationStateNodeComponent.Builder get() {
            return new CompanyRegistrationStateNodeComponentBuilder();
          }
        };

    this.companyRegistrationStateNodeMembersInjector =
        CompanyRegistrationStateNode_MembersInjector.create(
            companyRegistrationStateNodeComponentBuilderProvider);

    this.companyAbrnNodeComponentBuilderProvider =
        new Factory<CompanyAbrnNodeComponent.Builder>() {
          @Override
          public CompanyAbrnNodeComponent.Builder get() {
            return new CompanyAbrnNodeComponentBuilder();
          }
        };

    this.companyAbrnNodeMembersInjector =
        CompanyAbrnNode_MembersInjector.create(companyAbrnNodeComponentBuilderProvider);

    this.companyDescriptionNodeComponentBuilderProvider =
        new Factory<CompanyDescriptionNodeComponent.Builder>() {
          @Override
          public CompanyDescriptionNodeComponent.Builder get() {
            return new CompanyDescriptionNodeComponentBuilder();
          }
        };

    this.companyDescriptionNodeMembersInjector =
        CompanyDescriptionNode_MembersInjector.create(
            companyDescriptionNodeComponentBuilderProvider);

    this.companyApplicationTypeNodeComponentBuilderProvider =
        new Factory<CompanyApplicationTypeNodeComponent.Builder>() {
          @Override
          public CompanyApplicationTypeNodeComponent.Builder get() {
            return new CompanyApplicationTypeNodeComponentBuilder();
          }
        };

    this.companyApplicationTypeNodeMembersInjector =
        CompanyApplicationTypeNode_MembersInjector.create(
            companyApplicationTypeNodeComponentBuilderProvider);

    this.companyIndustryNodeComponentBuilderProvider =
        new Factory<CompanyIndustryNodeComponent.Builder>() {
          @Override
          public CompanyIndustryNodeComponent.Builder get() {
            return new CompanyIndustryNodeComponentBuilder();
          }
        };

    this.companyIndustryNodeMembersInjector =
        CompanyIndustryNode_MembersInjector.create(companyIndustryNodeComponentBuilderProvider);

    this.companySelectDirectorNodeComponentBuilderProvider =
        new Factory<CompanySelectDirectorNodeComponent.Builder>() {
          @Override
          public CompanySelectDirectorNodeComponent.Builder get() {
            return new CompanySelectDirectorNodeComponentBuilder();
          }
        };

    this.companySelectDirectorNodeMembersInjector =
        CompanySelectDirectorNode_MembersInjector.create(
            selectRelatedPersonListNodeItemProvider,
            companySelectDirectorNodeComponentBuilderProvider);

    this.companyApplicantTypeNodeComponentBuilderProvider =
        new Factory<CompanyApplicantTypeNodeComponent.Builder>() {
          @Override
          public CompanyApplicantTypeNodeComponent.Builder get() {
            return new CompanyApplicantTypeNodeComponentBuilder();
          }
        };

    this.companyApplicantTypeNodeMembersInjector =
        CompanyApplicantTypeNode_MembersInjector.create(
            companyApplicantTypeNodeComponentBuilderProvider);

    this.companyRegisteredNameNodeComponentBuilderProvider =
        new Factory<CompanyRegisteredNameNodeComponent.Builder>() {
          @Override
          public CompanyRegisteredNameNodeComponent.Builder get() {
            return new CompanyRegisteredNameNodeComponentBuilder();
          }
        };

    this.companyRegisteredNameNodeMembersInjector =
        CompanyRegisteredNameNode_MembersInjector.create(
            companyRegisteredNameNodeComponentBuilderProvider);

    this.companyPrimaryApplicantFlagNodeComponentBuilderProvider =
        new Factory<CompanyPrimaryApplicantFlagNodeComponent.Builder>() {
          @Override
          public CompanyPrimaryApplicantFlagNodeComponent.Builder get() {
            return new CompanyPrimaryApplicantFlagNodeComponentBuilder();
          }
        };

    this.companyPrimaryApplicantFlagNodeMembersInjector =
        CompanyPrimaryApplicantFlagNode_MembersInjector.create(
            companyPrimaryApplicantFlagNodeComponentBuilderProvider);

    this.companyAcnNodeComponentBuilderProvider =
        new Factory<CompanyAcnNodeComponent.Builder>() {
          @Override
          public CompanyAcnNodeComponent.Builder get() {
            return new CompanyAcnNodeComponentBuilder();
          }
        };

    this.companyAcnNodeMembersInjector =
        CompanyAcnNode_MembersInjector.create(companyAcnNodeComponentBuilderProvider);

    this.companyGeneralNodeChildProviderMembersInjector =
        CompanyGeneralNodeChildProvider_MembersInjector.create(
            companyRegistrationDateNodeMembersInjector,
            companySelectBeneficialOwnerNodeMembersInjector,
            companyAbnNodeMembersInjector,
            companyTypeNodeMembersInjector,
            companyRegistrationStateNodeMembersInjector,
            companyAbrnNodeMembersInjector,
            companyDescriptionNodeMembersInjector,
            companyApplicationTypeNodeMembersInjector,
            companyIndustryNodeMembersInjector,
            companySelectDirectorNodeMembersInjector,
            companyApplicantTypeNodeMembersInjector,
            companyRegisteredNameNodeMembersInjector,
            companyPrimaryApplicantFlagNodeMembersInjector,
            companyAcnNodeMembersInjector);

    this.companyGeneralNodeChildProvider =
        DoubleCheck.provider(
            CompanyGeneralNodeChildProvider_Factory.create(
                companyGeneralNodeChildProviderMembersInjector));

    this.companyGeneralNodeComponentBuilderProvider =
        new Factory<CompanyGeneralNodeComponent.Builder>() {
          @Override
          public CompanyGeneralNodeComponent.Builder get() {
            return new CompanyGeneralNodeComponentBuilder();
          }
        };

    this.companyGeneralNodeMembersInjector =
        CompanyGeneralNode_MembersInjector.create(
            companyGeneralNodeChildProvider, companyGeneralNodeComponentBuilderProvider);

    this.companyTrustNodeComponentBuilderProvider =
        new Factory<CompanyTrustNodeComponent.Builder>() {
          @Override
          public CompanyTrustNodeComponent.Builder get() {
            return new CompanyTrustNodeComponentBuilder();
          }
        };

    this.companyTrustNodeMembersInjector =
        CompanyTrustNode_MembersInjector.create(
            baseTrustNodeChildProvider, companyTrustNodeComponentBuilderProvider);

    this.companyNodeChildProviderMembersInjector =
        CompanyNodeChildProvider_MembersInjector.create(
            companyPrivacyNodeMembersInjector,
            companyOtherIncomeListNodeMembersInjector,
            companyResponsibleLendNodeMembersInjector,
            companyContactNodeMembersInjector,
            companyGeneralNodeMembersInjector,
            companyTrustNodeMembersInjector);

    this.companyNodeChildProvider =
        DoubleCheck.provider(
            CompanyNodeChildProvider_Factory.create(companyNodeChildProviderMembersInjector));

    this.companyNodeComponentBuilderProvider =
        new Factory<CompanyNodeComponent.Builder>() {
          @Override
          public CompanyNodeComponent.Builder get() {
            return new CompanyNodeComponentBuilder();
          }
        };

    this.companyNodeMembersInjector =
        CompanyNode_MembersInjector.create(
            companyNodeChildProvider, companyNodeComponentBuilderProvider);

    this.companyListNodeItemProviderMembersInjector =
        CompanyListNodeItemProvider_MembersInjector.create(companyNodeMembersInjector);

    this.companyListNodeItemProvider =
        DoubleCheck.provider(
            CompanyListNodeItemProvider_Factory.create(companyListNodeItemProviderMembersInjector));

    this.companyListNodeComponentBuilderProvider =
        new Factory<CompanyListNodeComponent.Builder>() {
          @Override
          public CompanyListNodeComponent.Builder get() {
            return new CompanyListNodeComponentBuilder();
          }
        };

    this.companyListNodeMembersInjector =
        CompanyListNode_MembersInjector.create(
            companyListNodeItemProvider, companyListNodeComponentBuilderProvider);

    this.settlementDateNodeComponentBuilderProvider =
        new Factory<SettlementDateNodeComponent.Builder>() {
          @Override
          public SettlementDateNodeComponent.Builder get() {
            return new SettlementDateNodeComponentBuilder();
          }
        };

    this.settlementDateNodeMembersInjector =
        SettlementDateNode_MembersInjector.create(settlementDateNodeComponentBuilderProvider);

    this.productTotalSecurityAmountNodeComponentBuilderProvider =
        new Factory<ProductTotalSecurityAmountNodeComponent.Builder>() {
          @Override
          public ProductTotalSecurityAmountNodeComponent.Builder get() {
            return new ProductTotalSecurityAmountNodeComponentBuilder();
          }
        };

    this.productTotalSecurityAmountNodeMembersInjector =
        ProductTotalSecurityAmountNode_MembersInjector.create(
            productTotalSecurityAmountNodeComponentBuilderProvider);

    this.productLoanTypeNodeComponentBuilderProvider =
        new Factory<ProductLoanTypeNodeComponent.Builder>() {
          @Override
          public ProductLoanTypeNodeComponent.Builder get() {
            return new ProductLoanTypeNodeComponentBuilder();
          }
        };

    this.productLoanTypeNodeMembersInjector =
        ProductLoanTypeNode_MembersInjector.create(productLoanTypeNodeComponentBuilderProvider);

    this.productTotalLoanAmountNodeComponentBuilderProvider =
        new Factory<ProductTotalLoanAmountNodeComponent.Builder>() {
          @Override
          public ProductTotalLoanAmountNodeComponent.Builder get() {
            return new ProductTotalLoanAmountNodeComponentBuilder();
          }
        };

    this.productTotalLoanAmountNodeMembersInjector =
        ProductTotalLoanAmountNode_MembersInjector.create(
            productTotalLoanAmountNodeComponentBuilderProvider);

    this.productTotalLvrLmiNodeComponentBuilderProvider =
        new Factory<ProductTotalLvrLmiNodeComponent.Builder>() {
          @Override
          public ProductTotalLvrLmiNodeComponent.Builder get() {
            return new ProductTotalLvrLmiNodeComponentBuilder();
          }
        };

    this.productTotalLvrLmiNodeMembersInjector =
        ProductTotalLvrLmiNode_MembersInjector.create(
            productTotalLvrLmiNodeComponentBuilderProvider);

    this.productCustomerContributionNodeComponentBuilderProvider =
        new Factory<ProductCustomerContributionNodeComponent.Builder>() {
          @Override
          public ProductCustomerContributionNodeComponent.Builder get() {
            return new ProductCustomerContributionNodeComponentBuilder();
          }
        };

    this.productCustomerContributionNodeMembersInjector =
        ProductCustomerContributionNode_MembersInjector.create(
            productCustomerContributionNodeComponentBuilderProvider);

    this.productRequestedAmountNodeComponentBuilderProvider =
        new Factory<ProductRequestedAmountNodeComponent.Builder>() {
          @Override
          public ProductRequestedAmountNodeComponent.Builder get() {
            return new ProductRequestedAmountNodeComponentBuilder();
          }
        };

    this.productRequestedAmountNodeMembersInjector =
        ProductRequestedAmountNode_MembersInjector.create(
            productRequestedAmountNodeComponentBuilderProvider);

    this.productFixedTermNodeComponentBuilderProvider =
        new Factory<ProductFixedTermNodeComponent.Builder>() {
          @Override
          public ProductFixedTermNodeComponent.Builder get() {
            return new ProductFixedTermNodeComponentBuilder();
          }
        };

    this.productFixedTermNodeMembersInjector =
        ProductFixedTermNode_MembersInjector.create(productFixedTermNodeComponentBuilderProvider);

    this.productGroupNodeComponentBuilderProvider =
        new Factory<ProductGroupNodeComponent.Builder>() {
          @Override
          public ProductGroupNodeComponent.Builder get() {
            return new ProductGroupNodeComponentBuilder();
          }
        };

    this.productGroupNodeMembersInjector =
        ProductGroupNode_MembersInjector.create(productGroupNodeComponentBuilderProvider);

    this.productPaymentTypeNodeComponentBuilderProvider =
        new Factory<ProductPaymentTypeNodeComponent.Builder>() {
          @Override
          public ProductPaymentTypeNodeComponent.Builder get() {
            return new ProductPaymentTypeNodeComponentBuilder();
          }
        };

    this.productPaymentTypeNodeMembersInjector =
        ProductPaymentTypeNode_MembersInjector.create(
            productPaymentTypeNodeComponentBuilderProvider);

    this.productLendingPurposeNodeComponentBuilderProvider =
        new Factory<ProductLendingPurposeNodeComponent.Builder>() {
          @Override
          public ProductLendingPurposeNodeComponent.Builder get() {
            return new ProductLendingPurposeNodeComponentBuilder();
          }
        };

    this.productLendingPurposeNodeMembersInjector =
        ProductLendingPurposeNode_MembersInjector.create(
            productLendingPurposeNodeComponentBuilderProvider);

    this.productConsolidationFlagNodeComponentBuilderProvider =
        new Factory<ProductConsolidationFlagNodeComponent.Builder>() {
          @Override
          public ProductConsolidationFlagNodeComponent.Builder get() {
            return new ProductConsolidationFlagNodeComponentBuilder();
          }
        };

    this.productConsolidationFlagNodeMembersInjector =
        ProductConsolidationFlagNode_MembersInjector.create(
            productConsolidationFlagNodeComponentBuilderProvider);

    this.productCostRecuctionFlagNodeComponentBuilderProvider =
        new Factory<ProductCostRecuctionFlagNodeComponent.Builder>() {
          @Override
          public ProductCostRecuctionFlagNodeComponent.Builder get() {
            return new ProductCostRecuctionFlagNodeComponentBuilder();
          }
        };

    this.productCostRecuctionFlagNodeMembersInjector =
        ProductCostRecuctionFlagNode_MembersInjector.create(
            productCostRecuctionFlagNodeComponentBuilderProvider);

    this.productAccountHolderListNodeComponentBuilderProvider =
        new Factory<ProductAccountHolderListNodeComponent.Builder>() {
          @Override
          public ProductAccountHolderListNodeComponent.Builder get() {
            return new ProductAccountHolderListNodeComponentBuilder();
          }
        };

    this.productAccountHolderListNodeMembersInjector =
        ProductAccountHolderListNode_MembersInjector.create(
            selectAccountHolderListNodeItemProvider,
            productAccountHolderListNodeComponentBuilderProvider);

    this.productLoanPrimaryPurposeNodeComponentBuilderProvider =
        new Factory<ProductLoanPrimaryPurposeNodeComponent.Builder>() {
          @Override
          public ProductLoanPrimaryPurposeNodeComponent.Builder get() {
            return new ProductLoanPrimaryPurposeNodeComponentBuilder();
          }
        };

    this.productLoanPrimaryPurposeNodeMembersInjector =
        ProductLoanPrimaryPurposeNode_MembersInjector.create(
            productLoanPrimaryPurposeNodeComponentBuilderProvider);

    this.productTotalLoanTermNodeComponentBuilderProvider =
        new Factory<ProductTotalLoanTermNodeComponent.Builder>() {
          @Override
          public ProductTotalLoanTermNodeComponent.Builder get() {
            return new ProductTotalLoanTermNodeComponentBuilder();
          }
        };
  }

  @SuppressWarnings("unchecked")
  private void initialize7(final Builder builder) {

    this.productTotalLoanTermNodeMembersInjector =
        ProductTotalLoanTermNode_MembersInjector.create(
            productTotalLoanTermNodeComponentBuilderProvider);

    this.productDissatisfactionFlagNodeComponentBuilderProvider =
        new Factory<ProductDissatisfactionFlagNodeComponent.Builder>() {
          @Override
          public ProductDissatisfactionFlagNodeComponent.Builder get() {
            return new ProductDissatisfactionFlagNodeComponentBuilder();
          }
        };

    this.productDissatisfactionFlagNodeMembersInjector =
        ProductDissatisfactionFlagNode_MembersInjector.create(
            productDissatisfactionFlagNodeComponentBuilderProvider);

    this.productNameNodeComponentBuilderProvider =
        new Factory<ProductNameNodeComponent.Builder>() {
          @Override
          public ProductNameNodeComponent.Builder get() {
            return new ProductNameNodeComponentBuilder();
          }
        };

    this.productNameNodeMembersInjector =
        ProductNameNode_MembersInjector.create(productNameNodeComponentBuilderProvider);

    this.productSpecificFeaturesFlagNodeComponentBuilderProvider =
        new Factory<ProductSpecificFeaturesFlagNodeComponent.Builder>() {
          @Override
          public ProductSpecificFeaturesFlagNodeComponent.Builder get() {
            return new ProductSpecificFeaturesFlagNodeComponentBuilder();
          }
        };

    this.productSpecificFeaturesFlagNodeMembersInjector =
        ProductSpecificFeaturesFlagNode_MembersInjector.create(
            productSpecificFeaturesFlagNodeComponentBuilderProvider);

    this.productConstructionApplicationFlagNodeComponentBuilderProvider =
        new Factory<ProductConstructionApplicationFlagNodeComponent.Builder>() {
          @Override
          public ProductConstructionApplicationFlagNodeComponent.Builder get() {
            return new ProductConstructionApplicationFlagNodeComponentBuilder();
          }
        };

    this.productConstructionApplicationFlagNodeMembersInjector =
        ProductConstructionApplicationFlagNode_MembersInjector.create(
            productConstructionApplicationFlagNodeComponentBuilderProvider);

    this.productInterestOnlyTermNodeComponentBuilderProvider =
        new Factory<ProductInterestOnlyTermNodeComponent.Builder>() {
          @Override
          public ProductInterestOnlyTermNodeComponent.Builder get() {
            return new ProductInterestOnlyTermNodeComponentBuilder();
          }
        };

    this.productInterestOnlyTermNodeMembersInjector =
        ProductInterestOnlyTermNode_MembersInjector.create(
            productInterestOnlyTermNodeComponentBuilderProvider);

    this.productDescriptionNodeChildProviderMembersInjector =
        ProductDescriptionNodeChildProvider_MembersInjector.create(
            productRequestedAmountNodeMembersInjector,
            productFixedTermNodeMembersInjector,
            productGroupNodeMembersInjector,
            productPaymentTypeNodeMembersInjector,
            productLendingPurposeNodeMembersInjector,
            productConsolidationFlagNodeMembersInjector,
            productCostRecuctionFlagNodeMembersInjector,
            productAccountHolderListNodeMembersInjector,
            productLoanPrimaryPurposeNodeMembersInjector,
            productTotalLoanTermNodeMembersInjector,
            productDissatisfactionFlagNodeMembersInjector,
            productNameNodeMembersInjector,
            productSpecificFeaturesFlagNodeMembersInjector,
            productConstructionApplicationFlagNodeMembersInjector,
            productInterestOnlyTermNodeMembersInjector);

    this.productDescriptionNodeChildProvider =
        DoubleCheck.provider(
            ProductDescriptionNodeChildProvider_Factory.create(
                productDescriptionNodeChildProviderMembersInjector));

    this.productDescriptionNodeComponentBuilderProvider =
        new Factory<ProductDescriptionNodeComponent.Builder>() {
          @Override
          public ProductDescriptionNodeComponent.Builder get() {
            return new ProductDescriptionNodeComponentBuilder();
          }
        };

    this.productDescriptionNodeMembersInjector =
        ProductDescriptionNode_MembersInjector.create(
            productDescriptionNodeChildProvider, productDescriptionNodeComponentBuilderProvider);

    this.productRewardsMembershipNodeComponentBuilderProvider =
        new Factory<ProductRewardsMembershipNodeComponent.Builder>() {
          @Override
          public ProductRewardsMembershipNodeComponent.Builder get() {
            return new ProductRewardsMembershipNodeComponentBuilder();
          }
        };

    this.productRewardsMembershipNodeMembersInjector =
        ProductRewardsMembershipNode_MembersInjector.create(
            productRewardsMembershipNodeComponentBuilderProvider);

    this.productCardHodlerNameNodeComponentBuilderProvider =
        new Factory<ProductCardHodlerNameNodeComponent.Builder>() {
          @Override
          public ProductCardHodlerNameNodeComponent.Builder get() {
            return new ProductCardHodlerNameNodeComponentBuilder();
          }
        };

    this.productCardHodlerNameNodeMembersInjector =
        ProductCardHodlerNameNode_MembersInjector.create(
            productCardHodlerNameNodeComponentBuilderProvider);

    this.productRewardsProgramNodeComponentBuilderProvider =
        new Factory<ProductRewardsProgramNodeComponent.Builder>() {
          @Override
          public ProductRewardsProgramNodeComponent.Builder get() {
            return new ProductRewardsProgramNodeComponentBuilder();
          }
        };

    this.productRewardsProgramNodeMembersInjector =
        ProductRewardsProgramNode_MembersInjector.create(
            productRewardsProgramNodeComponentBuilderProvider);

    this.productCardHolderNodeChildProviderMembersInjector =
        ProductCardHolderNodeChildProvider_MembersInjector.create(
            productRewardsMembershipNodeMembersInjector,
            productCardHodlerNameNodeMembersInjector,
            productRewardsProgramNodeMembersInjector);

    this.productCardHolderNodeChildProvider =
        DoubleCheck.provider(
            ProductCardHolderNodeChildProvider_Factory.create(
                productCardHolderNodeChildProviderMembersInjector));

    this.productCardHolderNodeComponentBuilderProvider =
        new Factory<ProductCardHolderNodeComponent.Builder>() {
          @Override
          public ProductCardHolderNodeComponent.Builder get() {
            return new ProductCardHolderNodeComponentBuilder();
          }
        };

    this.productCardHolderNodeMembersInjector =
        ProductCardHolderNode_MembersInjector.create(
            productCardHolderNodeChildProvider, productCardHolderNodeComponentBuilderProvider);

    this.productCreditCardFlagNodeComponentBuilderProvider =
        new Factory<ProductCreditCardFlagNodeComponent.Builder>() {
          @Override
          public ProductCreditCardFlagNodeComponent.Builder get() {
            return new ProductCreditCardFlagNodeComponentBuilder();
          }
        };

    this.productCreditCardFlagNodeMembersInjector =
        ProductCreditCardFlagNode_MembersInjector.create(
            productCreditCardFlagNodeComponentBuilderProvider);

    this.productExpressConsentFlagNodeComponentBuilderProvider =
        new Factory<ProductExpressConsentFlagNodeComponent.Builder>() {
          @Override
          public ProductExpressConsentFlagNodeComponent.Builder get() {
            return new ProductExpressConsentFlagNodeComponentBuilder();
          }
        };

    this.productExpressConsentFlagNodeMembersInjector =
        ProductExpressConsentFlagNode_MembersInjector.create(
            productExpressConsentFlagNodeComponentBuilderProvider);

    this.product100PercentOffsetFlagNodeComponentBuilderProvider =
        new Factory<Product100PercentOffsetFlagNodeComponent.Builder>() {
          @Override
          public Product100PercentOffsetFlagNodeComponent.Builder get() {
            return new Product100PercentOffsetFlagNodeComponentBuilder();
          }
        };

    this.product100PercentOffsetFlagNodeMembersInjector =
        Product100PercentOffsetFlagNode_MembersInjector.create(
            product100PercentOffsetFlagNodeComponentBuilderProvider);

    this.productCreditCardTypeNodeComponentBuilderProvider =
        new Factory<ProductCreditCardTypeNodeComponent.Builder>() {
          @Override
          public ProductCreditCardTypeNodeComponent.Builder get() {
            return new ProductCreditCardTypeNodeComponentBuilder();
          }
        };

    this.productCreditCardTypeNodeMembersInjector =
        ProductCreditCardTypeNode_MembersInjector.create(
            productCreditCardTypeNodeComponentBuilderProvider);

    this.productRepaymentFrequencyNodeComponentBuilderProvider =
        new Factory<ProductRepaymentFrequencyNodeComponent.Builder>() {
          @Override
          public ProductRepaymentFrequencyNodeComponent.Builder get() {
            return new ProductRepaymentFrequencyNodeComponentBuilder();
          }
        };

    this.productRepaymentFrequencyNodeMembersInjector =
        ProductRepaymentFrequencyNode_MembersInjector.create(
            productRepaymentFrequencyNodeComponentBuilderProvider);

    this.productPackageNameNodeComponentBuilderProvider =
        new Factory<ProductPackageNameNodeComponent.Builder>() {
          @Override
          public ProductPackageNameNodeComponent.Builder get() {
            return new ProductPackageNameNodeComponentBuilder();
          }
        };

    this.productPackageNameNodeMembersInjector =
        ProductPackageNameNode_MembersInjector.create(
            productPackageNameNodeComponentBuilderProvider);

    this.productTransactionAccountFlagNodeComponentBuilderProvider =
        new Factory<ProductTransactionAccountFlagNodeComponent.Builder>() {
          @Override
          public ProductTransactionAccountFlagNodeComponent.Builder get() {
            return new ProductTransactionAccountFlagNodeComponentBuilder();
          }
        };

    this.productTransactionAccountFlagNodeMembersInjector =
        ProductTransactionAccountFlagNode_MembersInjector.create(
            productTransactionAccountFlagNodeComponentBuilderProvider);

    this.productOptOutReasonNodeComponentBuilderProvider =
        new Factory<ProductOptOutReasonNodeComponent.Builder>() {
          @Override
          public ProductOptOutReasonNodeComponent.Builder get() {
            return new ProductOptOutReasonNodeComponentBuilder();
          }
        };

    this.productOptOutReasonNodeMembersInjector =
        ProductOptOutReasonNode_MembersInjector.create(
            productOptOutReasonNodeComponentBuilderProvider);

    this.productCreditCardLimitNodeComponentBuilderProvider =
        new Factory<ProductCreditCardLimitNodeComponent.Builder>() {
          @Override
          public ProductCreditCardLimitNodeComponent.Builder get() {
            return new ProductCreditCardLimitNodeComponentBuilder();
          }
        };

    this.productCreditCardLimitNodeMembersInjector =
        ProductCreditCardLimitNode_MembersInjector.create(
            productCreditCardLimitNodeComponentBuilderProvider);

    this.productRateLockFlagNodeComponentBuilderProvider =
        new Factory<ProductRateLockFlagNodeComponent.Builder>() {
          @Override
          public ProductRateLockFlagNodeComponent.Builder get() {
            return new ProductRateLockFlagNodeComponentBuilder();
          }
        };

    this.productRateLockFlagNodeMembersInjector =
        ProductRateLockFlagNode_MembersInjector.create(
            productRateLockFlagNodeComponentBuilderProvider);

    this.productFeaturesNodeChildProviderMembersInjector =
        ProductFeaturesNodeChildProvider_MembersInjector.create(
            productCardHolderNodeMembersInjector,
            productCreditCardFlagNodeMembersInjector,
            productExpressConsentFlagNodeMembersInjector,
            product100PercentOffsetFlagNodeMembersInjector,
            productCreditCardTypeNodeMembersInjector,
            productRepaymentFrequencyNodeMembersInjector,
            productPackageNameNodeMembersInjector,
            productTransactionAccountFlagNodeMembersInjector,
            productOptOutReasonNodeMembersInjector,
            productCreditCardLimitNodeMembersInjector,
            productRateLockFlagNodeMembersInjector);

    this.productFeaturesNodeChildProvider =
        DoubleCheck.provider(
            ProductFeaturesNodeChildProvider_Factory.create(
                productFeaturesNodeChildProviderMembersInjector));

    this.productFeaturesNodeComponentBuilderProvider =
        new Factory<ProductFeaturesNodeComponent.Builder>() {
          @Override
          public ProductFeaturesNodeComponent.Builder get() {
            return new ProductFeaturesNodeComponentBuilder();
          }
        };

    this.productFeaturesNodeMembersInjector =
        ProductFeaturesNode_MembersInjector.create(
            productFeaturesNodeChildProvider, productFeaturesNodeComponentBuilderProvider);

    this.productNodeChildProviderMembersInjector =
        ProductNodeChildProvider_MembersInjector.create(
            productDescriptionNodeMembersInjector, productFeaturesNodeMembersInjector);

    this.productNodeChildProvider =
        DoubleCheck.provider(
            ProductNodeChildProvider_Factory.create(productNodeChildProviderMembersInjector));

    this.productNodeComponentBuilderProvider =
        new Factory<ProductNodeComponent.Builder>() {
          @Override
          public ProductNodeComponent.Builder get() {
            return new ProductNodeComponentBuilder();
          }
        };

    this.productNodeMembersInjector =
        ProductNode_MembersInjector.create(
            productNodeChildProvider, productNodeComponentBuilderProvider);

    this.productListNodeItemProviderMembersInjector =
        ProductListNodeItemProvider_MembersInjector.create(productNodeMembersInjector);

    this.productListNodeItemProvider =
        DoubleCheck.provider(
            ProductListNodeItemProvider_Factory.create(productListNodeItemProviderMembersInjector));

    this.productListNodeComponentBuilderProvider =
        new Factory<ProductListNodeComponent.Builder>() {
          @Override
          public ProductListNodeComponent.Builder get() {
            return new ProductListNodeComponentBuilder();
          }
        };

    this.productListNodeMembersInjector =
        ProductListNode_MembersInjector.create(
            productListNodeItemProvider, productListNodeComponentBuilderProvider);

    this.productTotalLoanLmiAmountNodeComponentBuilderProvider =
        new Factory<ProductTotalLoanLmiAmountNodeComponent.Builder>() {
          @Override
          public ProductTotalLoanLmiAmountNodeComponent.Builder get() {
            return new ProductTotalLoanLmiAmountNodeComponentBuilder();
          }
        };

    this.productTotalLoanLmiAmountNodeMembersInjector =
        ProductTotalLoanLmiAmountNode_MembersInjector.create(
            productTotalLoanLmiAmountNodeComponentBuilderProvider);

    this.productFeesNodeComponentBuilderProvider =
        new Factory<ProductFeesNodeComponent.Builder>() {
          @Override
          public ProductFeesNodeComponent.Builder get() {
            return new ProductFeesNodeComponentBuilder();
          }
        };

    this.productFeesNodeMembersInjector =
        ProductFeesNode_MembersInjector.create(productFeesNodeComponentBuilderProvider);

    this.productTotalLvrNodeComponentBuilderProvider =
        new Factory<ProductTotalLvrNodeComponent.Builder>() {
          @Override
          public ProductTotalLvrNodeComponent.Builder get() {
            return new ProductTotalLvrNodeComponentBuilder();
          }
        };

    this.productTotalLvrNodeMembersInjector =
        ProductTotalLvrNode_MembersInjector.create(productTotalLvrNodeComponentBuilderProvider);

    this.productsNodeChildProviderMembersInjector =
        ProductsNodeChildProvider_MembersInjector.create(
            settlementDateNodeMembersInjector,
            productTotalSecurityAmountNodeMembersInjector,
            productLoanTypeNodeMembersInjector,
            productTotalLoanAmountNodeMembersInjector,
            productTotalLvrLmiNodeMembersInjector,
            productCustomerContributionNodeMembersInjector,
            productListNodeMembersInjector,
            productTotalLoanLmiAmountNodeMembersInjector,
            productFeesNodeMembersInjector,
            productTotalLvrNodeMembersInjector);

    this.productsNodeChildProvider =
        DoubleCheck.provider(
            ProductsNodeChildProvider_Factory.create(productsNodeChildProviderMembersInjector));

    this.productsNodeComponentBuilderProvider =
        new Factory<ProductsNodeComponent.Builder>() {
          @Override
          public ProductsNodeComponent.Builder get() {
            return new ProductsNodeComponentBuilder();
          }
        };

    this.productsNodeMembersInjector =
        ProductsNode_MembersInjector.create(
            productsNodeChildProvider, productsNodeComponentBuilderProvider);

    this.errorNodeComponentBuilderProvider =
        new Factory<ErrorNodeComponent.Builder>() {
          @Override
          public ErrorNodeComponent.Builder get() {
            return new ErrorNodeComponentBuilder();
          }
        };

    this.errorNodeMembersInjector =
        ErrorNode_MembersInjector.create(errorNodeComponentBuilderProvider);

    this.errorListNodeItemProviderMembersInjector =
        ErrorListNodeItemProvider_MembersInjector.create(errorNodeMembersInjector);

    this.errorListNodeItemProvider =
        DoubleCheck.provider(
            ErrorListNodeItemProvider_Factory.create(errorListNodeItemProviderMembersInjector));

    this.errorListNodeComponentBuilderProvider =
        new Factory<ErrorListNodeComponent.Builder>() {
          @Override
          public ErrorListNodeComponent.Builder get() {
            return new ErrorListNodeComponentBuilder();
          }
        };

    this.errorListNodeMembersInjector =
        ErrorListNode_MembersInjector.create(
            errorListNodeItemProvider, errorListNodeComponentBuilderProvider);

    this.thirdPartyDobNodeComponentBuilderProvider =
        new Factory<ThirdPartyDobNodeComponent.Builder>() {
          @Override
          public ThirdPartyDobNodeComponent.Builder get() {
            return new ThirdPartyDobNodeComponentBuilder();
          }
        };

    this.thirdPartyDobNodeMembersInjector =
        ThirdPartyDobNode_MembersInjector.create(thirdPartyDobNodeComponentBuilderProvider);

    this.thirdPartyWorkPhoneNodeComponentBuilderProvider =
        new Factory<ThirdPartyWorkPhoneNodeComponent.Builder>() {
          @Override
          public ThirdPartyWorkPhoneNodeComponent.Builder get() {
            return new ThirdPartyWorkPhoneNodeComponentBuilder();
          }
        };

    this.thirdPartyWorkPhoneNodeMembersInjector =
        ThirdPartyWorkPhoneNode_MembersInjector.create(
            thirdPartyWorkPhoneNodeComponentBuilderProvider);

    this.thirdPartyLastNameNodeComponentBuilderProvider =
        new Factory<ThirdPartyLastNameNodeComponent.Builder>() {
          @Override
          public ThirdPartyLastNameNodeComponent.Builder get() {
            return new ThirdPartyLastNameNodeComponentBuilder();
          }
        };

    this.thirdPartyLastNameNodeMembersInjector =
        ThirdPartyLastNameNode_MembersInjector.create(
            thirdPartyLastNameNodeComponentBuilderProvider);

    this.thirdPartyCompanyNameNodeComponentBuilderProvider =
        new Factory<ThirdPartyCompanyNameNodeComponent.Builder>() {
          @Override
          public ThirdPartyCompanyNameNodeComponent.Builder get() {
            return new ThirdPartyCompanyNameNodeComponentBuilder();
          }
        };

    this.thirdPartyCompanyNameNodeMembersInjector =
        ThirdPartyCompanyNameNode_MembersInjector.create(
            thirdPartyCompanyNameNodeComponentBuilderProvider);

    this.thirdPartyAddressNodeComponentBuilderProvider =
        new Factory<ThirdPartyAddressNodeComponent.Builder>() {
          @Override
          public ThirdPartyAddressNodeComponent.Builder get() {
            return new ThirdPartyAddressNodeComponentBuilder();
          }
        };

    this.thirdPartyAddressNodeMembersInjector =
        ThirdPartyAddressNode_MembersInjector.create(
            addressNodeChildProvider, thirdPartyAddressNodeComponentBuilderProvider);

    this.thirdPartyEmailNodeComponentBuilderProvider =
        new Factory<ThirdPartyEmailNodeComponent.Builder>() {
          @Override
          public ThirdPartyEmailNodeComponent.Builder get() {
            return new ThirdPartyEmailNodeComponentBuilder();
          }
        };

    this.thirdPartyEmailNodeMembersInjector =
        ThirdPartyEmailNode_MembersInjector.create(thirdPartyEmailNodeComponentBuilderProvider);

    this.thirdPartyTypeNodeComponentBuilderProvider =
        new Factory<ThirdPartyTypeNodeComponent.Builder>() {
          @Override
          public ThirdPartyTypeNodeComponent.Builder get() {
            return new ThirdPartyTypeNodeComponentBuilder();
          }
        };

    this.thirdPartyTypeNodeMembersInjector =
        ThirdPartyTypeNode_MembersInjector.create(thirdPartyTypeNodeComponentBuilderProvider);

    this.thirdPartyTitleNodeComponentBuilderProvider =
        new Factory<ThirdPartyTitleNodeComponent.Builder>() {
          @Override
          public ThirdPartyTitleNodeComponent.Builder get() {
            return new ThirdPartyTitleNodeComponentBuilder();
          }
        };

    this.thirdPartyTitleNodeMembersInjector =
        ThirdPartyTitleNode_MembersInjector.create(thirdPartyTitleNodeComponentBuilderProvider);

    this.thirdPartyDescriptionNodeComponentBuilderProvider =
        new Factory<ThirdPartyDescriptionNodeComponent.Builder>() {
          @Override
          public ThirdPartyDescriptionNodeComponent.Builder get() {
            return new ThirdPartyDescriptionNodeComponentBuilder();
          }
        };

    this.thirdPartyDescriptionNodeMembersInjector =
        ThirdPartyDescriptionNode_MembersInjector.create(
            thirdPartyDescriptionNodeComponentBuilderProvider);

    this.thirdPartyFirstNameNodeComponentBuilderProvider =
        new Factory<ThirdPartyFirstNameNodeComponent.Builder>() {
          @Override
          public ThirdPartyFirstNameNodeComponent.Builder get() {
            return new ThirdPartyFirstNameNodeComponentBuilder();
          }
        };

    this.thirdPartyFirstNameNodeMembersInjector =
        ThirdPartyFirstNameNode_MembersInjector.create(
            thirdPartyFirstNameNodeComponentBuilderProvider);

    this.relatedPartyNodeChildProviderMembersInjector =
        RelatedPartyNodeChildProvider_MembersInjector.create(
            thirdPartyDobNodeMembersInjector,
            thirdPartyWorkPhoneNodeMembersInjector,
            thirdPartyLastNameNodeMembersInjector,
            thirdPartyCompanyNameNodeMembersInjector,
            thirdPartyAddressNodeMembersInjector,
            thirdPartyEmailNodeMembersInjector,
            thirdPartyTypeNodeMembersInjector,
            thirdPartyTitleNodeMembersInjector,
            thirdPartyDescriptionNodeMembersInjector,
            thirdPartyFirstNameNodeMembersInjector);

    this.relatedPartyNodeChildProvider =
        DoubleCheck.provider(
            RelatedPartyNodeChildProvider_Factory.create(
                relatedPartyNodeChildProviderMembersInjector));

    this.relatedPartyNodeComponentBuilderProvider =
        new Factory<RelatedPartyNodeComponent.Builder>() {
          @Override
          public RelatedPartyNodeComponent.Builder get() {
            return new RelatedPartyNodeComponentBuilder();
          }
        };

    this.relatedPartyNodeMembersInjector =
        RelatedPartyNode_MembersInjector.create(
            relatedPartyNodeChildProvider, relatedPartyNodeComponentBuilderProvider);

    this.relatedPartyListNodeItemProviderMembersInjector =
        RelatedPartyListNodeItemProvider_MembersInjector.create(relatedPartyNodeMembersInjector);

    this.relatedPartyListNodeItemProvider =
        DoubleCheck.provider(
            RelatedPartyListNodeItemProvider_Factory.create(
                relatedPartyListNodeItemProviderMembersInjector));

    this.relatedPartyListNodeComponentBuilderProvider =
        new Factory<RelatedPartyListNodeComponent.Builder>() {
          @Override
          public RelatedPartyListNodeComponent.Builder get() {
            return new RelatedPartyListNodeComponentBuilder();
          }
        };
  }

  @SuppressWarnings("unchecked")
  private void initialize8(final Builder builder) {

    this.relatedPartyListNodeMembersInjector =
        RelatedPartyListNode_MembersInjector.create(
            relatedPartyListNodeItemProvider, relatedPartyListNodeComponentBuilderProvider);

    this.additionalCommentNodeComponentBuilderProvider =
        new Factory<AdditionalCommentNodeComponent.Builder>() {
          @Override
          public AdditionalCommentNodeComponent.Builder get() {
            return new AdditionalCommentNodeComponentBuilder();
          }
        };

    this.additionalCommentNodeMembersInjector =
        AdditionalCommentNode_MembersInjector.create(additionalCommentNodeComponentBuilderProvider);

    this.additionalNodeChildProviderMembersInjector =
        AdditionalNodeChildProvider_MembersInjector.create(
            relatedPartyListNodeMembersInjector, additionalCommentNodeMembersInjector);

    this.additionalNodeChildProvider =
        DoubleCheck.provider(
            AdditionalNodeChildProvider_Factory.create(additionalNodeChildProviderMembersInjector));

    this.additionalNodeComponentBuilderProvider =
        new Factory<AdditionalNodeComponent.Builder>() {
          @Override
          public AdditionalNodeComponent.Builder get() {
            return new AdditionalNodeComponentBuilder();
          }
        };

    this.additionalNodeMembersInjector =
        AdditionalNode_MembersInjector.create(
            additionalNodeChildProvider, additionalNodeComponentBuilderProvider);

    this.applicationNodeChildProviderMembersInjector =
        ApplicationNodeChildProvider_MembersInjector.create(
            personListNodeMembersInjector,
            financialPositionNodeMembersInjector,
            addressRefListNodeMembersInjector,
            submissionNodeMembersInjector,
            realEstateListNodeMembersInjector,
            companyListNodeMembersInjector,
            productsNodeMembersInjector,
            errorListNodeMembersInjector,
            additionalNodeMembersInjector);

    this.provideApplicationNodeChildProvider =
        DoubleCheck.provider(
            CustomModule_ProvideApplicationNodeChildProviderFactory.create(
                builder.customModule, applicationNodeChildProviderMembersInjector));

    this.applicationNodeComponentBuilderProvider =
        new Factory<ApplicationNodeComponent.Builder>() {
          @Override
          public ApplicationNodeComponent.Builder get() {
            return new ApplicationNodeComponentBuilder();
          }
        };

    this.applicationNodeImplMembersInjector =
        ApplicationNodeImpl_MembersInjector.create(
            provideApplicationNodeChildProvider, applicationNodeComponentBuilderProvider);
    this.applicationNodeContextProvider = new DelegateFactory();

    this.applicationNodeImplProvider =
        ApplicationNodeImpl_Factory.create(
            applicationNodeImplMembersInjector, applicationNodeContextProvider);

    this.provideApplicationNodeProvider =
        DoubleCheck.provider((Provider) applicationNodeImplProvider);

    this.applicationNodeContextMembersInjector =
        ApplicationNodeContext_MembersInjector.create(
            nodeFinderProvider, nodeReferenceRegistryProvider, provideApplicationNodeProvider);

    this.provideUiNodeChangeEngineProvider =
        DoubleCheck.provider((Provider) UiNodeChangeEngineImpl_Factory.create());

    this.provideSequentialUniqueIdGeneratorProvider =
        DoubleCheck.provider((Provider) SequentialUniqueIdGenerator_Factory.create());

    this.applicationNodeClassRegistryProvider =
        DoubleCheck.provider(
            ApplicationNodeClassRegistry_Factory.create(
                MembersInjectors.<ApplicationNodeClassRegistry>noOp()));

    this.provideClassRegistryImplProvider =
        DoubleCheck.provider((Provider) applicationNodeClassRegistryProvider);

    DelegateFactory applicationNodeContextProviderDelegate =
        (DelegateFactory) applicationNodeContextProvider;
    this.applicationNodeContextProvider =
        DoubleCheck.provider(
            ApplicationNodeContext_Factory.create(
                applicationNodeContextMembersInjector,
                provideUiNodeChangeEngineProvider,
                provideSequentialUniqueIdGeneratorProvider,
                provideClassRegistryImplProvider));
    applicationNodeContextProviderDelegate.setDelegatedProvider(applicationNodeContextProvider);
  }

  @Override
  public ApplicationNodeContext provideApplicationNodeContext() {
    return applicationNodeContextProvider.get();
  }

  public static final class Builder {
    private CustomModule customModule;

    private Builder() {}

    public DefaultProfileComponent build() {
      if (customModule == null) {
        this.customModule = new CustomModule();
      }
      return new DaggerDefaultProfileComponent(this);
    }

    public Builder customModule(CustomModule customModule) {
      this.customModule = Preconditions.checkNotNull(customModule);
      return this;
    }
  }

  private final class ApplicationTypeNodeComponentBuilder
      implements ApplicationTypeNodeComponent.Builder {
    private ApplicationTypeNodeModule applicationTypeNodeModule;

    @Override
    public ApplicationTypeNodeComponent build() {
      if (applicationTypeNodeModule == null) {
        throw new IllegalStateException(
            ApplicationTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ApplicationTypeNodeComponentImpl(this);
    }

    @Override
    public ApplicationTypeNodeComponentBuilder setApplicationTypeNodeModule(
        ApplicationTypeNodeModule module) {
      this.applicationTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ApplicationTypeNodeComponentImpl implements ApplicationTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<ApplicationTypeNode> provideApplicationTypeNodeProvider;

    private Provider<ChangeApplicationTypeRuleImpl> changeApplicationTypeRuleImplProvider;

    private Provider<ChangeApplicationTypeRule> provideChangeApplicationTypeRuleProvider;

    private MembersInjector<ApplicationTypeNodeRuleProvider>
        applicationTypeNodeRuleProviderMembersInjector;

    private Provider<ApplicationTypeNodeRuleProvider> applicationTypeNodeRuleProvider;

    private ApplicationTypeNodeComponentImpl(ApplicationTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ApplicationTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.applicationTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ApplicationTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.applicationTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ApplicationTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.applicationTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.provideApplicationTypeNodeProvider =
          DoubleCheck.provider(
              ApplicationTypeNodeModule_ProvideApplicationTypeNodeFactory.create(
                  builder.applicationTypeNodeModule));

      this.changeApplicationTypeRuleImplProvider =
          ChangeApplicationTypeRuleImpl_Factory.create(
              MembersInjectors.<ChangeApplicationTypeRuleImpl>noOp(),
              provideApplicationTypeNodeProvider);

      this.provideChangeApplicationTypeRuleProvider =
          (Provider) changeApplicationTypeRuleImplProvider;

      this.applicationTypeNodeRuleProviderMembersInjector =
          ApplicationTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              provideChangeApplicationTypeRuleProvider);

      this.applicationTypeNodeRuleProvider =
          DoubleCheck.provider(
              ApplicationTypeNodeRuleProvider_Factory.create(
                  applicationTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public ApplicationTypeNodeRuleProvider getApplicationTypeNodeRuleProvider() {
      return applicationTypeNodeRuleProvider.get();
    }
  }

  private final class MaritalStatusNodeComponentBuilder
      implements MaritalStatusNodeComponent.Builder {
    private MaritalStatusNodeModule maritalStatusNodeModule;

    @Override
    public MaritalStatusNodeComponent build() {
      if (maritalStatusNodeModule == null) {
        throw new IllegalStateException(
            MaritalStatusNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MaritalStatusNodeComponentImpl(this);
    }

    @Override
    public MaritalStatusNodeComponentBuilder setMaritalStatusNodeModule(
        MaritalStatusNodeModule module) {
      this.maritalStatusNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MaritalStatusNodeComponentImpl implements MaritalStatusNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MaritalStatusNodeRuleProvider>
        maritalStatusNodeRuleProviderMembersInjector;

    private Provider<MaritalStatusNodeRuleProvider> maritalStatusNodeRuleProvider;

    private MaritalStatusNodeComponentImpl(MaritalStatusNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MaritalStatusNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MaritalStatusNodeModule_ProvideUiNodeFactory.create(builder.maritalStatusNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MaritalStatusNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.maritalStatusNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MaritalStatusNodeModule_ProvideStringUiNodeFactory.create(
                  builder.maritalStatusNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.maritalStatusNodeRuleProviderMembersInjector =
          MaritalStatusNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.maritalStatusNodeRuleProvider =
          DoubleCheck.provider(
              MaritalStatusNodeRuleProvider_Factory.create(
                  maritalStatusNodeRuleProviderMembersInjector));
    }

    @Override
    public MaritalStatusNodeRuleProvider getMaritalStatusNodeRuleProvider() {
      return maritalStatusNodeRuleProvider.get();
    }
  }

  private final class FirstNameNodeComponentBuilder implements FirstNameNodeComponent.Builder {
    private FirstNameNodeModule firstNameNodeModule;

    @Override
    public FirstNameNodeComponent build() {
      if (firstNameNodeModule == null) {
        throw new IllegalStateException(
            FirstNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new FirstNameNodeComponentImpl(this);
    }

    @Override
    public FirstNameNodeComponentBuilder setFirstNameNodeModule(FirstNameNodeModule module) {
      this.firstNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class FirstNameNodeComponentImpl implements FirstNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<FirstNameNodeRuleProvider> firstNameNodeRuleProviderMembersInjector;

    private Provider<FirstNameNodeRuleProvider> firstNameNodeRuleProvider;

    private FirstNameNodeComponentImpl(FirstNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final FirstNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              FirstNameNodeModule_ProvideUiNodeFactory.create(builder.firstNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              FirstNameNodeModule_ProvideLeafUiNodeFactory.create(builder.firstNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              FirstNameNodeModule_ProvideStringUiNodeFactory.create(builder.firstNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.firstNameNodeRuleProviderMembersInjector =
          FirstNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.firstNameNodeRuleProvider =
          DoubleCheck.provider(
              FirstNameNodeRuleProvider_Factory.create(firstNameNodeRuleProviderMembersInjector));
    }

    @Override
    public FirstNameNodeRuleProvider getFirstNameNodeRuleProvider() {
      return firstNameNodeRuleProvider.get();
    }
  }

  private final class DateOfBirthNodeComponentBuilder implements DateOfBirthNodeComponent.Builder {
    private DateOfBirthNodeModule dateOfBirthNodeModule;

    @Override
    public DateOfBirthNodeComponent build() {
      if (dateOfBirthNodeModule == null) {
        throw new IllegalStateException(
            DateOfBirthNodeModule.class.getCanonicalName() + " must be set");
      }
      return new DateOfBirthNodeComponentImpl(this);
    }

    @Override
    public DateOfBirthNodeComponentBuilder setDateOfBirthNodeModule(DateOfBirthNodeModule module) {
      this.dateOfBirthNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class DateOfBirthNodeComponentImpl implements DateOfBirthNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<DobNode<?>> provideDobNodeProvider;

    private Provider<DobRangeValidationRuleImpl> dobRangeValidationRuleImplProvider;

    private Provider<DobRangeValidationRule> provideDobRangeValidationRuleProvider;

    private MembersInjector<DateOfBirthNodeRuleProvider> dateOfBirthNodeRuleProviderMembersInjector;

    private Provider<DateOfBirthNodeRuleProvider> dateOfBirthNodeRuleProvider;

    private DateOfBirthNodeComponentImpl(DateOfBirthNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DateOfBirthNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              DateOfBirthNodeModule_ProvideUiNodeFactory.create(builder.dateOfBirthNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              DateOfBirthNodeModule_ProvideLeafUiNodeFactory.create(builder.dateOfBirthNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              DateOfBirthNodeModule_ProvideStringUiNodeFactory.create(
                  builder.dateOfBirthNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.provideDobNodeProvider =
          DoubleCheck.provider(
              DateOfBirthNodeModule_ProvideDobNodeFactory.create(builder.dateOfBirthNodeModule));

      this.dobRangeValidationRuleImplProvider =
          DobRangeValidationRuleImpl_Factory.create(
              MembersInjectors.<DobRangeValidationRuleImpl>noOp(), provideDobNodeProvider);

      this.provideDobRangeValidationRuleProvider = (Provider) dobRangeValidationRuleImplProvider;

      this.dateOfBirthNodeRuleProviderMembersInjector =
          DateOfBirthNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              provideDobRangeValidationRuleProvider);

      this.dateOfBirthNodeRuleProvider =
          DoubleCheck.provider(
              DateOfBirthNodeRuleProvider_Factory.create(
                  dateOfBirthNodeRuleProviderMembersInjector));
    }

    @Override
    public DateOfBirthNodeRuleProvider getDateOfBirthNodeRuleProvider() {
      return dateOfBirthNodeRuleProvider.get();
    }
  }

  private final class PrimaryApplicantFlagNodeComponentBuilder
      implements PrimaryApplicantFlagNodeComponent.Builder {
    private PrimaryApplicantFlagNodeModule primaryApplicantFlagNodeModule;

    @Override
    public PrimaryApplicantFlagNodeComponent build() {
      if (primaryApplicantFlagNodeModule == null) {
        throw new IllegalStateException(
            PrimaryApplicantFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PrimaryApplicantFlagNodeComponentImpl(this);
    }

    @Override
    public PrimaryApplicantFlagNodeComponentBuilder setPrimaryApplicantFlagNodeModule(
        PrimaryApplicantFlagNodeModule module) {
      this.primaryApplicantFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PrimaryApplicantFlagNodeComponentImpl
      implements PrimaryApplicantFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private Provider<PrimaryApplicantFlagNode> providePrimaryApplicantFlagNodeProvider;

    private Provider<AtLeastOnePrimaryApplicantRuleImpl> atLeastOnePrimaryApplicantRuleImplProvider;

    private Provider<AtLeastOnePrimaryApplicantRule> provideAtLeastOnePrimaryApplicantRuleProvider;

    private Provider<AtMostOnePrimaryApplicantRuleImpl> atMostOnePrimaryApplicantRuleImplProvider;

    private Provider<AtMostOnePrimaryApplicantRule> provideAtMostOnePrimaryApplicantRuleProvider;

    private MembersInjector<PrimaryApplicantFlagNodeRuleProvider>
        primaryApplicantFlagNodeRuleProviderMembersInjector;

    private Provider<PrimaryApplicantFlagNodeRuleProvider> primaryApplicantFlagNodeRuleProvider;

    private PrimaryApplicantFlagNodeComponentImpl(
        PrimaryApplicantFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PrimaryApplicantFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PrimaryApplicantFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.primaryApplicantFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PrimaryApplicantFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.primaryApplicantFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              PrimaryApplicantFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.primaryApplicantFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.providePrimaryApplicantFlagNodeProvider =
          DoubleCheck.provider(
              PrimaryApplicantFlagNodeModule_ProvidePrimaryApplicantFlagNodeFactory.create(
                  builder.primaryApplicantFlagNodeModule));

      this.atLeastOnePrimaryApplicantRuleImplProvider =
          AtLeastOnePrimaryApplicantRuleImpl_Factory.create(
              MembersInjectors.<AtLeastOnePrimaryApplicantRuleImpl>noOp(),
              providePrimaryApplicantFlagNodeProvider);

      this.provideAtLeastOnePrimaryApplicantRuleProvider =
          (Provider) atLeastOnePrimaryApplicantRuleImplProvider;

      this.atMostOnePrimaryApplicantRuleImplProvider =
          AtMostOnePrimaryApplicantRuleImpl_Factory.create(
              MembersInjectors.<AtMostOnePrimaryApplicantRuleImpl>noOp(),
              providePrimaryApplicantFlagNodeProvider);

      this.provideAtMostOnePrimaryApplicantRuleProvider =
          (Provider) atMostOnePrimaryApplicantRuleImplProvider;

      this.primaryApplicantFlagNodeRuleProviderMembersInjector =
          PrimaryApplicantFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider,
              provideAtLeastOnePrimaryApplicantRuleProvider,
              provideAtMostOnePrimaryApplicantRuleProvider);

      this.primaryApplicantFlagNodeRuleProvider =
          DoubleCheck.provider(
              PrimaryApplicantFlagNodeRuleProvider_Factory.create(
                  primaryApplicantFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public PrimaryApplicantFlagNodeRuleProvider getPrimaryApplicantFlagNodeRuleProvider() {
      return primaryApplicantFlagNodeRuleProvider.get();
    }
  }

  private final class DriversLicenseNodeComponentBuilder
      implements DriversLicenseNodeComponent.Builder {
    private DriversLicenseNodeModule driversLicenseNodeModule;

    @Override
    public DriversLicenseNodeComponent build() {
      if (driversLicenseNodeModule == null) {
        throw new IllegalStateException(
            DriversLicenseNodeModule.class.getCanonicalName() + " must be set");
      }
      return new DriversLicenseNodeComponentImpl(this);
    }

    @Override
    public DriversLicenseNodeComponentBuilder setDriversLicenseNodeModule(
        DriversLicenseNodeModule module) {
      this.driversLicenseNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class DriversLicenseNodeComponentImpl implements DriversLicenseNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<DriversLicenseNodeRuleProvider>
        driversLicenseNodeRuleProviderMembersInjector;

    private Provider<DriversLicenseNodeRuleProvider> driversLicenseNodeRuleProvider;

    private DriversLicenseNodeComponentImpl(DriversLicenseNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DriversLicenseNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              DriversLicenseNodeModule_ProvideUiNodeFactory.create(
                  builder.driversLicenseNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              DriversLicenseNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.driversLicenseNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              DriversLicenseNodeModule_ProvideStringUiNodeFactory.create(
                  builder.driversLicenseNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.driversLicenseNodeRuleProviderMembersInjector =
          DriversLicenseNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.driversLicenseNodeRuleProvider =
          DoubleCheck.provider(
              DriversLicenseNodeRuleProvider_Factory.create(
                  driversLicenseNodeRuleProviderMembersInjector));
    }

    @Override
    public DriversLicenseNodeRuleProvider getDriversLicenseNodeRuleProvider() {
      return driversLicenseNodeRuleProvider.get();
    }
  }

  private final class HousingStatusNodeComponentBuilder
      implements HousingStatusNodeComponent.Builder {
    private HousingStatusNodeModule housingStatusNodeModule;

    @Override
    public HousingStatusNodeComponent build() {
      if (housingStatusNodeModule == null) {
        throw new IllegalStateException(
            HousingStatusNodeModule.class.getCanonicalName() + " must be set");
      }
      return new HousingStatusNodeComponentImpl(this);
    }

    @Override
    public HousingStatusNodeComponentBuilder setHousingStatusNodeModule(
        HousingStatusNodeModule module) {
      this.housingStatusNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class HousingStatusNodeComponentImpl implements HousingStatusNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<HousingStatusNodeRuleProvider>
        housingStatusNodeRuleProviderMembersInjector;

    private Provider<HousingStatusNodeRuleProvider> housingStatusNodeRuleProvider;

    private HousingStatusNodeComponentImpl(HousingStatusNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HousingStatusNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              HousingStatusNodeModule_ProvideUiNodeFactory.create(builder.housingStatusNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              HousingStatusNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.housingStatusNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              HousingStatusNodeModule_ProvideStringUiNodeFactory.create(
                  builder.housingStatusNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.housingStatusNodeRuleProviderMembersInjector =
          HousingStatusNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.housingStatusNodeRuleProvider =
          DoubleCheck.provider(
              HousingStatusNodeRuleProvider_Factory.create(
                  housingStatusNodeRuleProviderMembersInjector));
    }

    @Override
    public HousingStatusNodeRuleProvider getHousingStatusNodeRuleProvider() {
      return housingStatusNodeRuleProvider.get();
    }
  }

  private final class GenderNodeComponentBuilder implements GenderNodeComponent.Builder {
    private GenderNodeModule genderNodeModule;

    @Override
    public GenderNodeComponent build() {
      if (genderNodeModule == null) {
        throw new IllegalStateException(GenderNodeModule.class.getCanonicalName() + " must be set");
      }
      return new GenderNodeComponentImpl(this);
    }

    @Override
    public GenderNodeComponentBuilder setGenderNodeModule(GenderNodeModule module) {
      this.genderNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class GenderNodeComponentImpl implements GenderNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<GenderNodeRuleProvider> genderNodeRuleProviderMembersInjector;

    private Provider<GenderNodeRuleProvider> genderNodeRuleProvider;

    private GenderNodeComponentImpl(GenderNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final GenderNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              GenderNodeModule_ProvideUiNodeFactory.create(builder.genderNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              GenderNodeModule_ProvideLeafUiNodeFactory.create(builder.genderNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              GenderNodeModule_ProvideStringUiNodeFactory.create(builder.genderNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.genderNodeRuleProviderMembersInjector =
          GenderNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.genderNodeRuleProvider =
          DoubleCheck.provider(
              GenderNodeRuleProvider_Factory.create(genderNodeRuleProviderMembersInjector));
    }

    @Override
    public GenderNodeRuleProvider getGenderNodeRuleProvider() {
      return genderNodeRuleProvider.get();
    }
  }

  private final class FirstHomeBuyerFlagNodeComponentBuilder
      implements FirstHomeBuyerFlagNodeComponent.Builder {
    private FirstHomeBuyerFlagNodeModule firstHomeBuyerFlagNodeModule;

    @Override
    public FirstHomeBuyerFlagNodeComponent build() {
      if (firstHomeBuyerFlagNodeModule == null) {
        throw new IllegalStateException(
            FirstHomeBuyerFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new FirstHomeBuyerFlagNodeComponentImpl(this);
    }

    @Override
    public FirstHomeBuyerFlagNodeComponentBuilder setFirstHomeBuyerFlagNodeModule(
        FirstHomeBuyerFlagNodeModule module) {
      this.firstHomeBuyerFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class FirstHomeBuyerFlagNodeComponentImpl
      implements FirstHomeBuyerFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<FirstHomeBuyerFlagNodeRuleProvider>
        firstHomeBuyerFlagNodeRuleProviderMembersInjector;

    private Provider<FirstHomeBuyerFlagNodeRuleProvider> firstHomeBuyerFlagNodeRuleProvider;

    private FirstHomeBuyerFlagNodeComponentImpl(FirstHomeBuyerFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final FirstHomeBuyerFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              FirstHomeBuyerFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.firstHomeBuyerFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              FirstHomeBuyerFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.firstHomeBuyerFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              FirstHomeBuyerFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.firstHomeBuyerFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.firstHomeBuyerFlagNodeRuleProviderMembersInjector =
          FirstHomeBuyerFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.firstHomeBuyerFlagNodeRuleProvider =
          DoubleCheck.provider(
              FirstHomeBuyerFlagNodeRuleProvider_Factory.create(
                  firstHomeBuyerFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public FirstHomeBuyerFlagNodeRuleProvider getFirstHomeBuyerFlagNodeRuleProvider() {
      return firstHomeBuyerFlagNodeRuleProvider.get();
    }
  }

  private final class LastNameNodeComponentBuilder implements LastNameNodeComponent.Builder {
    private LastNameNodeModule lastNameNodeModule;

    @Override
    public LastNameNodeComponent build() {
      if (lastNameNodeModule == null) {
        throw new IllegalStateException(
            LastNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LastNameNodeComponentImpl(this);
    }

    @Override
    public LastNameNodeComponentBuilder setLastNameNodeModule(LastNameNodeModule module) {
      this.lastNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LastNameNodeComponentImpl implements LastNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<LastNameNodeRuleProvider> lastNameNodeRuleProviderMembersInjector;

    private Provider<LastNameNodeRuleProvider> lastNameNodeRuleProvider;

    private LastNameNodeComponentImpl(LastNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LastNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LastNameNodeModule_ProvideUiNodeFactory.create(builder.lastNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LastNameNodeModule_ProvideLeafUiNodeFactory.create(builder.lastNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              LastNameNodeModule_ProvideStringUiNodeFactory.create(builder.lastNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.lastNameNodeRuleProviderMembersInjector =
          LastNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.lastNameNodeRuleProvider =
          DoubleCheck.provider(
              LastNameNodeRuleProvider_Factory.create(lastNameNodeRuleProviderMembersInjector));
    }

    @Override
    public LastNameNodeRuleProvider getLastNameNodeRuleProvider() {
      return lastNameNodeRuleProvider.get();
    }
  }

  private final class PermanentResidentFlagNodeComponentBuilder
      implements PermanentResidentFlagNodeComponent.Builder {
    private PermanentResidentFlagNodeModule permanentResidentFlagNodeModule;

    @Override
    public PermanentResidentFlagNodeComponent build() {
      if (permanentResidentFlagNodeModule == null) {
        throw new IllegalStateException(
            PermanentResidentFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PermanentResidentFlagNodeComponentImpl(this);
    }

    @Override
    public PermanentResidentFlagNodeComponentBuilder setPermanentResidentFlagNodeModule(
        PermanentResidentFlagNodeModule module) {
      this.permanentResidentFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PermanentResidentFlagNodeComponentImpl
      implements PermanentResidentFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<PermanentResidentFlagNodeRuleProvider>
        permanentResidentFlagNodeRuleProviderMembersInjector;

    private Provider<PermanentResidentFlagNodeRuleProvider> permanentResidentFlagNodeRuleProvider;

    private PermanentResidentFlagNodeComponentImpl(
        PermanentResidentFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PermanentResidentFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PermanentResidentFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.permanentResidentFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PermanentResidentFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.permanentResidentFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              PermanentResidentFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.permanentResidentFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.permanentResidentFlagNodeRuleProviderMembersInjector =
          PermanentResidentFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.permanentResidentFlagNodeRuleProvider =
          DoubleCheck.provider(
              PermanentResidentFlagNodeRuleProvider_Factory.create(
                  permanentResidentFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public PermanentResidentFlagNodeRuleProvider getPermanentResidentFlagNodeRuleProvider() {
      return permanentResidentFlagNodeRuleProvider.get();
    }
  }

  private final class TitleNodeComponentBuilder implements TitleNodeComponent.Builder {
    private TitleNodeModule titleNodeModule;

    @Override
    public TitleNodeComponent build() {
      if (titleNodeModule == null) {
        throw new IllegalStateException(TitleNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TitleNodeComponentImpl(this);
    }

    @Override
    public TitleNodeComponentBuilder setTitleNodeModule(TitleNodeModule module) {
      this.titleNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TitleNodeComponentImpl implements TitleNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<TitleNode> provideTitleNodeProvider;

    private Provider<TitleGenderMatchRuleImpl> titleGenderMatchRuleImplProvider;

    private Provider<TitleGenderMatchRule> provideTitleGenderMatchRuleProvider;

    private MembersInjector<TitleNodeRuleProvider> titleNodeRuleProviderMembersInjector;

    private Provider<TitleNodeRuleProvider> titleNodeRuleProvider;

    private TitleNodeComponentImpl(TitleNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TitleNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TitleNodeModule_ProvideUiNodeFactory.create(builder.titleNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TitleNodeModule_ProvideLeafUiNodeFactory.create(builder.titleNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              TitleNodeModule_ProvideStringUiNodeFactory.create(builder.titleNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.provideTitleNodeProvider =
          DoubleCheck.provider(
              TitleNodeModule_ProvideTitleNodeFactory.create(builder.titleNodeModule));

      this.titleGenderMatchRuleImplProvider =
          TitleGenderMatchRuleImpl_Factory.create(
              MembersInjectors.<TitleGenderMatchRuleImpl>noOp(), provideTitleNodeProvider);

      this.provideTitleGenderMatchRuleProvider = (Provider) titleGenderMatchRuleImplProvider;

      this.titleNodeRuleProviderMembersInjector =
          TitleNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              provideTitleGenderMatchRuleProvider);

      this.titleNodeRuleProvider =
          DoubleCheck.provider(
              TitleNodeRuleProvider_Factory.create(titleNodeRuleProviderMembersInjector));
    }

    @Override
    public TitleNodeRuleProvider getTitleNodeRuleProvider() {
      return titleNodeRuleProvider.get();
    }
  }

  private final class SpouseNodeComponentBuilder implements SpouseNodeComponent.Builder {
    private SpouseNodeModule spouseNodeModule;

    @Override
    public SpouseNodeComponent build() {
      if (spouseNodeModule == null) {
        throw new IllegalStateException(SpouseNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SpouseNodeComponentImpl(this);
    }

    @Override
    public SpouseNodeComponentBuilder setSpouseNodeModule(SpouseNodeModule module) {
      this.spouseNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SpouseNodeComponentImpl implements SpouseNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<SpouseNodeRuleProvider> spouseNodeRuleProviderMembersInjector;

    private Provider<SpouseNodeRuleProvider> spouseNodeRuleProvider;

    private SpouseNodeComponentImpl(SpouseNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SpouseNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SpouseNodeModule_ProvideUiNodeFactory.create(builder.spouseNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SpouseNodeModule_ProvideLeafUiNodeFactory.create(builder.spouseNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              SpouseNodeModule_ProvideStringUiNodeFactory.create(builder.spouseNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.spouseNodeRuleProviderMembersInjector =
          SpouseNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.spouseNodeRuleProvider =
          DoubleCheck.provider(
              SpouseNodeRuleProvider_Factory.create(spouseNodeRuleProviderMembersInjector));
    }

    @Override
    public SpouseNodeRuleProvider getSpouseNodeRuleProvider() {
      return spouseNodeRuleProvider.get();
    }
  }

  private final class PersonApplicantTypeNodeComponentBuilder
      implements PersonApplicantTypeNodeComponent.Builder {
    private PersonApplicantTypeNodeModule personApplicantTypeNodeModule;

    @Override
    public PersonApplicantTypeNodeComponent build() {
      if (personApplicantTypeNodeModule == null) {
        throw new IllegalStateException(
            PersonApplicantTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonApplicantTypeNodeComponentImpl(this);
    }

    @Override
    public PersonApplicantTypeNodeComponentBuilder setPersonApplicantTypeNodeModule(
        PersonApplicantTypeNodeModule module) {
      this.personApplicantTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonApplicantTypeNodeComponentImpl
      implements PersonApplicantTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<PersonApplicantTypeNodeRuleProvider>
        personApplicantTypeNodeRuleProviderMembersInjector;

    private Provider<PersonApplicantTypeNodeRuleProvider> personApplicantTypeNodeRuleProvider;

    private PersonApplicantTypeNodeComponentImpl(PersonApplicantTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonApplicantTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonApplicantTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.personApplicantTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PersonApplicantTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.personApplicantTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              PersonApplicantTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.personApplicantTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.personApplicantTypeNodeRuleProviderMembersInjector =
          PersonApplicantTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.personApplicantTypeNodeRuleProvider =
          DoubleCheck.provider(
              PersonApplicantTypeNodeRuleProvider_Factory.create(
                  personApplicantTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonApplicantTypeNodeRuleProvider getPersonApplicantTypeNodeRuleProvider() {
      return personApplicantTypeNodeRuleProvider.get();
    }
  }

  private final class PersonGeneralNodeComponentBuilder
      implements PersonGeneralNodeComponent.Builder {
    private PersonGeneralNodeModule personGeneralNodeModule;

    @Override
    public PersonGeneralNodeComponent build() {
      if (personGeneralNodeModule == null) {
        throw new IllegalStateException(
            PersonGeneralNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonGeneralNodeComponentImpl(this);
    }

    @Override
    public PersonGeneralNodeComponentBuilder setPersonGeneralNodeModule(
        PersonGeneralNodeModule module) {
      this.personGeneralNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonGeneralNodeComponentImpl implements PersonGeneralNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<PersonGeneralNodeRuleProvider>
        personGeneralNodeRuleProviderMembersInjector;

    private Provider<PersonGeneralNodeRuleProvider> personGeneralNodeRuleProvider;

    private PersonGeneralNodeComponentImpl(PersonGeneralNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonGeneralNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonGeneralNodeModule_ProvideUiNodeFactory.create(builder.personGeneralNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PersonGeneralNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.personGeneralNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.personGeneralNodeRuleProviderMembersInjector =
          PersonGeneralNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.personGeneralNodeRuleProvider =
          DoubleCheck.provider(
              PersonGeneralNodeRuleProvider_Factory.create(
                  personGeneralNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonGeneralNodeRuleProvider getPersonGeneralNodeRuleProvider() {
      return personGeneralNodeRuleProvider.get();
    }
  }

  private final class OtherIncomeDescriptionNodeComponentBuilder
      implements OtherIncomeDescriptionNodeComponent.Builder {
    private OtherIncomeDescriptionNodeModule otherIncomeDescriptionNodeModule;

    @Override
    public OtherIncomeDescriptionNodeComponent build() {
      if (otherIncomeDescriptionNodeModule == null) {
        throw new IllegalStateException(
            OtherIncomeDescriptionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherIncomeDescriptionNodeComponentImpl(this);
    }

    @Override
    public OtherIncomeDescriptionNodeComponentBuilder setOtherIncomeDescriptionNodeModule(
        OtherIncomeDescriptionNodeModule module) {
      this.otherIncomeDescriptionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherIncomeDescriptionNodeComponentImpl
      implements OtherIncomeDescriptionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<OtherIncomeDescriptionNodeRuleProvider>
        otherIncomeDescriptionNodeRuleProviderMembersInjector;

    private Provider<OtherIncomeDescriptionNodeRuleProvider> otherIncomeDescriptionNodeRuleProvider;

    private OtherIncomeDescriptionNodeComponentImpl(
        OtherIncomeDescriptionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherIncomeDescriptionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeDescriptionNodeModule_ProvideUiNodeFactory.create(
                  builder.otherIncomeDescriptionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeDescriptionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherIncomeDescriptionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeDescriptionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.otherIncomeDescriptionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.otherIncomeDescriptionNodeRuleProviderMembersInjector =
          OtherIncomeDescriptionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.otherIncomeDescriptionNodeRuleProvider =
          DoubleCheck.provider(
              OtherIncomeDescriptionNodeRuleProvider_Factory.create(
                  otherIncomeDescriptionNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherIncomeDescriptionNodeRuleProvider getOtherIncomeDescriptionNodeRuleProvider() {
      return otherIncomeDescriptionNodeRuleProvider.get();
    }
  }

  private final class OtherIncomeTypeNodeComponentBuilder
      implements OtherIncomeTypeNodeComponent.Builder {
    private OtherIncomeTypeNodeModule otherIncomeTypeNodeModule;

    @Override
    public OtherIncomeTypeNodeComponent build() {
      if (otherIncomeTypeNodeModule == null) {
        throw new IllegalStateException(
            OtherIncomeTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherIncomeTypeNodeComponentImpl(this);
    }

    @Override
    public OtherIncomeTypeNodeComponentBuilder setOtherIncomeTypeNodeModule(
        OtherIncomeTypeNodeModule module) {
      this.otherIncomeTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherIncomeTypeNodeComponentImpl implements OtherIncomeTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<OtherIncomeTypeNode> provideOtherIncomeTypeNodeProvider;

    private Provider<OtherIncomeTypeChangeRuleImpl> otherIncomeTypeChangeRuleImplProvider;

    private Provider<OtherIncomeTypeChangeRule> provideOtherIncomeTypeChangeRuleProvider;

    private MembersInjector<OtherIncomeTypeNodeRuleProvider>
        otherIncomeTypeNodeRuleProviderMembersInjector;

    private Provider<OtherIncomeTypeNodeRuleProvider> otherIncomeTypeNodeRuleProvider;

    private OtherIncomeTypeNodeComponentImpl(OtherIncomeTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherIncomeTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.otherIncomeTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherIncomeTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.otherIncomeTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.provideOtherIncomeTypeNodeProvider =
          DoubleCheck.provider(
              OtherIncomeTypeNodeModule_ProvideOtherIncomeTypeNodeFactory.create(
                  builder.otherIncomeTypeNodeModule));

      this.otherIncomeTypeChangeRuleImplProvider =
          OtherIncomeTypeChangeRuleImpl_Factory.create(
              MembersInjectors.<OtherIncomeTypeChangeRuleImpl>noOp(),
              provideOtherIncomeTypeNodeProvider);

      this.provideOtherIncomeTypeChangeRuleProvider =
          (Provider) otherIncomeTypeChangeRuleImplProvider;

      this.otherIncomeTypeNodeRuleProviderMembersInjector =
          OtherIncomeTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              provideOtherIncomeTypeChangeRuleProvider);

      this.otherIncomeTypeNodeRuleProvider =
          DoubleCheck.provider(
              OtherIncomeTypeNodeRuleProvider_Factory.create(
                  otherIncomeTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherIncomeTypeNodeRuleProvider getOtherIncomeTypeNodeRuleProvider() {
      return otherIncomeTypeNodeRuleProvider.get();
    }
  }

  private final class OtherIncomeAmountNodeComponentBuilder
      implements OtherIncomeAmountNodeComponent.Builder {
    private OtherIncomeAmountNodeModule otherIncomeAmountNodeModule;

    @Override
    public OtherIncomeAmountNodeComponent build() {
      if (otherIncomeAmountNodeModule == null) {
        throw new IllegalStateException(
            OtherIncomeAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherIncomeAmountNodeComponentImpl(this);
    }

    @Override
    public OtherIncomeAmountNodeComponentBuilder setOtherIncomeAmountNodeModule(
        OtherIncomeAmountNodeModule module) {
      this.otherIncomeAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherIncomeAmountNodeComponentImpl implements OtherIncomeAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<OtherIncomeAmountNodeRuleProvider>
        otherIncomeAmountNodeRuleProviderMembersInjector;

    private Provider<OtherIncomeAmountNodeRuleProvider> otherIncomeAmountNodeRuleProvider;

    private OtherIncomeAmountNodeComponentImpl(OtherIncomeAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherIncomeAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.otherIncomeAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherIncomeAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.otherIncomeAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.otherIncomeAmountNodeRuleProviderMembersInjector =
          OtherIncomeAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.otherIncomeAmountNodeRuleProvider =
          DoubleCheck.provider(
              OtherIncomeAmountNodeRuleProvider_Factory.create(
                  otherIncomeAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherIncomeAmountNodeRuleProvider getOtherIncomeAmountNodeRuleProvider() {
      return otherIncomeAmountNodeRuleProvider.get();
    }
  }

  private final class OtherIncomePreviousYearNodeComponentBuilder
      implements OtherIncomePreviousYearNodeComponent.Builder {
    private OtherIncomePreviousYearNodeModule otherIncomePreviousYearNodeModule;

    @Override
    public OtherIncomePreviousYearNodeComponent build() {
      if (otherIncomePreviousYearNodeModule == null) {
        throw new IllegalStateException(
            OtherIncomePreviousYearNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherIncomePreviousYearNodeComponentImpl(this);
    }

    @Override
    public OtherIncomePreviousYearNodeComponentBuilder setOtherIncomePreviousYearNodeModule(
        OtherIncomePreviousYearNodeModule module) {
      this.otherIncomePreviousYearNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherIncomePreviousYearNodeComponentImpl
      implements OtherIncomePreviousYearNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<OtherIncomePreviousYearNodeRuleProvider>
        otherIncomePreviousYearNodeRuleProviderMembersInjector;

    private Provider<OtherIncomePreviousYearNodeRuleProvider>
        otherIncomePreviousYearNodeRuleProvider;

    private OtherIncomePreviousYearNodeComponentImpl(
        OtherIncomePreviousYearNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherIncomePreviousYearNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomePreviousYearNodeModule_ProvideUiNodeFactory.create(
                  builder.otherIncomePreviousYearNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomePreviousYearNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherIncomePreviousYearNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomePreviousYearNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.otherIncomePreviousYearNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.otherIncomePreviousYearNodeRuleProviderMembersInjector =
          OtherIncomePreviousYearNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.otherIncomePreviousYearNodeRuleProvider =
          DoubleCheck.provider(
              OtherIncomePreviousYearNodeRuleProvider_Factory.create(
                  otherIncomePreviousYearNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherIncomePreviousYearNodeRuleProvider getOtherIncomePreviousYearNodeRuleProvider() {
      return otherIncomePreviousYearNodeRuleProvider.get();
    }
  }

  private final class OtherIncomeAddBackTypeNodeComponentBuilder
      implements OtherIncomeAddBackTypeNodeComponent.Builder {
    private OtherIncomeAddBackTypeNodeModule otherIncomeAddBackTypeNodeModule;

    @Override
    public OtherIncomeAddBackTypeNodeComponent build() {
      if (otherIncomeAddBackTypeNodeModule == null) {
        throw new IllegalStateException(
            OtherIncomeAddBackTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherIncomeAddBackTypeNodeComponentImpl(this);
    }

    @Override
    public OtherIncomeAddBackTypeNodeComponentBuilder setOtherIncomeAddBackTypeNodeModule(
        OtherIncomeAddBackTypeNodeModule module) {
      this.otherIncomeAddBackTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherIncomeAddBackTypeNodeComponentImpl
      implements OtherIncomeAddBackTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<OtherIncomeAddBackTypeNodeRuleProvider>
        otherIncomeAddBackTypeNodeRuleProviderMembersInjector;

    private Provider<OtherIncomeAddBackTypeNodeRuleProvider> otherIncomeAddBackTypeNodeRuleProvider;

    private OtherIncomeAddBackTypeNodeComponentImpl(
        OtherIncomeAddBackTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherIncomeAddBackTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeAddBackTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.otherIncomeAddBackTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeAddBackTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherIncomeAddBackTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeAddBackTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.otherIncomeAddBackTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.otherIncomeAddBackTypeNodeRuleProviderMembersInjector =
          OtherIncomeAddBackTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.otherIncomeAddBackTypeNodeRuleProvider =
          DoubleCheck.provider(
              OtherIncomeAddBackTypeNodeRuleProvider_Factory.create(
                  otherIncomeAddBackTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherIncomeAddBackTypeNodeRuleProvider getOtherIncomeAddBackTypeNodeRuleProvider() {
      return otherIncomeAddBackTypeNodeRuleProvider.get();
    }
  }

  private final class OtherIncomeNodeComponentBuilder implements OtherIncomeNodeComponent.Builder {
    private OtherIncomeNodeModule otherIncomeNodeModule;

    @Override
    public OtherIncomeNodeComponent build() {
      if (otherIncomeNodeModule == null) {
        throw new IllegalStateException(
            OtherIncomeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherIncomeNodeComponentImpl(this);
    }

    @Override
    public OtherIncomeNodeComponentBuilder setOtherIncomeNodeModule(OtherIncomeNodeModule module) {
      this.otherIncomeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherIncomeNodeComponentImpl implements OtherIncomeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<OtherIncomeNodeRuleProvider> otherIncomeNodeRuleProviderMembersInjector;

    private Provider<OtherIncomeNodeRuleProvider> otherIncomeNodeRuleProvider;

    private OtherIncomeNodeComponentImpl(OtherIncomeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherIncomeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeNodeModule_ProvideUiNodeFactory.create(builder.otherIncomeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              OtherIncomeNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.otherIncomeNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.otherIncomeNodeRuleProviderMembersInjector =
          OtherIncomeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.otherIncomeNodeRuleProvider =
          DoubleCheck.provider(
              OtherIncomeNodeRuleProvider_Factory.create(
                  otherIncomeNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherIncomeNodeRuleProvider getOtherIncomeNodeRuleProvider() {
      return otherIncomeNodeRuleProvider.get();
    }
  }

  private final class PersonOtherIncomeListNodeComponentBuilder
      implements PersonOtherIncomeListNodeComponent.Builder {
    private PersonOtherIncomeListNodeModule personOtherIncomeListNodeModule;

    @Override
    public PersonOtherIncomeListNodeComponent build() {
      if (personOtherIncomeListNodeModule == null) {
        throw new IllegalStateException(
            PersonOtherIncomeListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonOtherIncomeListNodeComponentImpl(this);
    }

    @Override
    public PersonOtherIncomeListNodeComponentBuilder setPersonOtherIncomeListNodeModule(
        PersonOtherIncomeListNodeModule module) {
      this.personOtherIncomeListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonOtherIncomeListNodeComponentImpl
      implements PersonOtherIncomeListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<PersonOtherIncomeListNodeRuleProvider>
        personOtherIncomeListNodeRuleProviderMembersInjector;

    private Provider<PersonOtherIncomeListNodeRuleProvider> personOtherIncomeListNodeRuleProvider;

    private PersonOtherIncomeListNodeComponentImpl(
        PersonOtherIncomeListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonOtherIncomeListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonOtherIncomeListNodeModule_ProvideUiNodeFactory.create(
                  builder.personOtherIncomeListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.personOtherIncomeListNodeRuleProviderMembersInjector =
          PersonOtherIncomeListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.personOtherIncomeListNodeRuleProvider =
          DoubleCheck.provider(
              PersonOtherIncomeListNodeRuleProvider_Factory.create(
                  personOtherIncomeListNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonOtherIncomeListNodeRuleProvider getPersonOtherIncomeListNodeRuleProvider() {
      return personOtherIncomeListNodeRuleProvider.get();
    }
  }

  private final class ResponsibleTypeOfChangeNodeComponentBuilder
      implements ResponsibleTypeOfChangeNodeComponent.Builder {
    private ResponsibleTypeOfChangeNodeModule responsibleTypeOfChangeNodeModule;

    @Override
    public ResponsibleTypeOfChangeNodeComponent build() {
      if (responsibleTypeOfChangeNodeModule == null) {
        throw new IllegalStateException(
            ResponsibleTypeOfChangeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ResponsibleTypeOfChangeNodeComponentImpl(this);
    }

    @Override
    public ResponsibleTypeOfChangeNodeComponentBuilder setResponsibleTypeOfChangeNodeModule(
        ResponsibleTypeOfChangeNodeModule module) {
      this.responsibleTypeOfChangeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ResponsibleTypeOfChangeNodeComponentImpl
      implements ResponsibleTypeOfChangeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ResponsibleTypeOfChangeNodeRuleProvider>
        responsibleTypeOfChangeNodeRuleProviderMembersInjector;

    private Provider<ResponsibleTypeOfChangeNodeRuleProvider>
        responsibleTypeOfChangeNodeRuleProvider;

    private ResponsibleTypeOfChangeNodeComponentImpl(
        ResponsibleTypeOfChangeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ResponsibleTypeOfChangeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleTypeOfChangeNodeModule_ProvideUiNodeFactory.create(
                  builder.responsibleTypeOfChangeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleTypeOfChangeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.responsibleTypeOfChangeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleTypeOfChangeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.responsibleTypeOfChangeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.responsibleTypeOfChangeNodeRuleProviderMembersInjector =
          ResponsibleTypeOfChangeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.responsibleTypeOfChangeNodeRuleProvider =
          DoubleCheck.provider(
              ResponsibleTypeOfChangeNodeRuleProvider_Factory.create(
                  responsibleTypeOfChangeNodeRuleProviderMembersInjector));
    }

    @Override
    public ResponsibleTypeOfChangeNodeRuleProvider getResponsibleTypeOfChangeNodeRuleProvider() {
      return responsibleTypeOfChangeNodeRuleProvider.get();
    }
  }

  private final class ResponsibleMitigationMethodNodeComponentBuilder
      implements ResponsibleMitigationMethodNodeComponent.Builder {
    private ResponsibleMitigationMethodNodeModule responsibleMitigationMethodNodeModule;

    @Override
    public ResponsibleMitigationMethodNodeComponent build() {
      if (responsibleMitigationMethodNodeModule == null) {
        throw new IllegalStateException(
            ResponsibleMitigationMethodNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ResponsibleMitigationMethodNodeComponentImpl(this);
    }

    @Override
    public ResponsibleMitigationMethodNodeComponentBuilder setResponsibleMitigationMethodNodeModule(
        ResponsibleMitigationMethodNodeModule module) {
      this.responsibleMitigationMethodNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ResponsibleMitigationMethodNodeComponentImpl
      implements ResponsibleMitigationMethodNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ResponsibleMitigationMethodNodeRuleProvider>
        responsibleMitigationMethodNodeRuleProviderMembersInjector;

    private Provider<ResponsibleMitigationMethodNodeRuleProvider>
        responsibleMitigationMethodNodeRuleProvider;

    private ResponsibleMitigationMethodNodeComponentImpl(
        ResponsibleMitigationMethodNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ResponsibleMitigationMethodNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleMitigationMethodNodeModule_ProvideUiNodeFactory.create(
                  builder.responsibleMitigationMethodNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleMitigationMethodNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.responsibleMitigationMethodNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleMitigationMethodNodeModule_ProvideStringUiNodeFactory.create(
                  builder.responsibleMitigationMethodNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.responsibleMitigationMethodNodeRuleProviderMembersInjector =
          ResponsibleMitigationMethodNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.responsibleMitigationMethodNodeRuleProvider =
          DoubleCheck.provider(
              ResponsibleMitigationMethodNodeRuleProvider_Factory.create(
                  responsibleMitigationMethodNodeRuleProviderMembersInjector));
    }

    @Override
    public ResponsibleMitigationMethodNodeRuleProvider
        getResponsibleMitigationMethodNodeRuleProvider() {
      return responsibleMitigationMethodNodeRuleProvider.get();
    }
  }

  private final class ResponsibleSignificantChangeFlagNodeComponentBuilder
      implements ResponsibleSignificantChangeFlagNodeComponent.Builder {
    private ResponsibleSignificantChangeFlagNodeModule responsibleSignificantChangeFlagNodeModule;

    @Override
    public ResponsibleSignificantChangeFlagNodeComponent build() {
      if (responsibleSignificantChangeFlagNodeModule == null) {
        throw new IllegalStateException(
            ResponsibleSignificantChangeFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ResponsibleSignificantChangeFlagNodeComponentImpl(this);
    }

    @Override
    public ResponsibleSignificantChangeFlagNodeComponentBuilder
        setResponsibleSignificantChangeFlagNodeModule(
            ResponsibleSignificantChangeFlagNodeModule module) {
      this.responsibleSignificantChangeFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ResponsibleSignificantChangeFlagNodeComponentImpl
      implements ResponsibleSignificantChangeFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<ResponsibleSignificantChangeFlagNode>
        provideResponsibleSignificantChangeFlagNodeProvider;

    private Provider<ResponsibleSignificantChangeRuleImpl>
        responsibleSignificantChangeRuleImplProvider;

    private Provider<ResponsibleSignificantChangeRule>
        provideResponsibleSignificantChangeRuleProvider;

    private MembersInjector<ResponsibleSignificantChangeFlagNodeRuleProvider>
        responsibleSignificantChangeFlagNodeRuleProviderMembersInjector;

    private Provider<ResponsibleSignificantChangeFlagNodeRuleProvider>
        responsibleSignificantChangeFlagNodeRuleProvider;

    private ResponsibleSignificantChangeFlagNodeComponentImpl(
        ResponsibleSignificantChangeFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ResponsibleSignificantChangeFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleSignificantChangeFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.responsibleSignificantChangeFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleSignificantChangeFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.responsibleSignificantChangeFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleSignificantChangeFlagNodeModule_ProvideStringUiNodeFactory.create(
                  builder.responsibleSignificantChangeFlagNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.provideResponsibleSignificantChangeFlagNodeProvider =
          DoubleCheck.provider(
              ResponsibleSignificantChangeFlagNodeModule_ProvideResponsibleSignificantChangeFlagNodeFactory
                  .create(builder.responsibleSignificantChangeFlagNodeModule));

      this.responsibleSignificantChangeRuleImplProvider =
          ResponsibleSignificantChangeRuleImpl_Factory.create(
              MembersInjectors.<ResponsibleSignificantChangeRuleImpl>noOp(),
              provideResponsibleSignificantChangeFlagNodeProvider);

      this.provideResponsibleSignificantChangeRuleProvider =
          (Provider) responsibleSignificantChangeRuleImplProvider;

      this.responsibleSignificantChangeFlagNodeRuleProviderMembersInjector =
          ResponsibleSignificantChangeFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              provideResponsibleSignificantChangeRuleProvider);

      this.responsibleSignificantChangeFlagNodeRuleProvider =
          DoubleCheck.provider(
              ResponsibleSignificantChangeFlagNodeRuleProvider_Factory.create(
                  responsibleSignificantChangeFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ResponsibleSignificantChangeFlagNodeRuleProvider
        getResponsibleSignificantChangeFlagNodeRuleProvider() {
      return responsibleSignificantChangeFlagNodeRuleProvider.get();
    }
  }

  private final class ResponsibleRepaymentDifficultyNodeComponentBuilder
      implements ResponsibleRepaymentDifficultyNodeComponent.Builder {
    private ResponsibleRepaymentDifficultyNodeModule responsibleRepaymentDifficultyNodeModule;

    @Override
    public ResponsibleRepaymentDifficultyNodeComponent build() {
      if (responsibleRepaymentDifficultyNodeModule == null) {
        throw new IllegalStateException(
            ResponsibleRepaymentDifficultyNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ResponsibleRepaymentDifficultyNodeComponentImpl(this);
    }

    @Override
    public ResponsibleRepaymentDifficultyNodeComponentBuilder
        setResponsibleRepaymentDifficultyNodeModule(
            ResponsibleRepaymentDifficultyNodeModule module) {
      this.responsibleRepaymentDifficultyNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ResponsibleRepaymentDifficultyNodeComponentImpl
      implements ResponsibleRepaymentDifficultyNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ResponsibleRepaymentDifficultyNodeRuleProvider>
        responsibleRepaymentDifficultyNodeRuleProviderMembersInjector;

    private Provider<ResponsibleRepaymentDifficultyNodeRuleProvider>
        responsibleRepaymentDifficultyNodeRuleProvider;

    private ResponsibleRepaymentDifficultyNodeComponentImpl(
        ResponsibleRepaymentDifficultyNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ResponsibleRepaymentDifficultyNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleRepaymentDifficultyNodeModule_ProvideUiNodeFactory.create(
                  builder.responsibleRepaymentDifficultyNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleRepaymentDifficultyNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.responsibleRepaymentDifficultyNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ResponsibleRepaymentDifficultyNodeModule_ProvideStringUiNodeFactory.create(
                  builder.responsibleRepaymentDifficultyNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.responsibleRepaymentDifficultyNodeRuleProviderMembersInjector =
          ResponsibleRepaymentDifficultyNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.responsibleRepaymentDifficultyNodeRuleProvider =
          DoubleCheck.provider(
              ResponsibleRepaymentDifficultyNodeRuleProvider_Factory.create(
                  responsibleRepaymentDifficultyNodeRuleProviderMembersInjector));
    }

    @Override
    public ResponsibleRepaymentDifficultyNodeRuleProvider
        getResponsibleRepaymentDifficultyNodeRuleProvider() {
      return responsibleRepaymentDifficultyNodeRuleProvider.get();
    }
  }

  private final class PersonResponsibleLendNodeComponentBuilder
      implements PersonResponsibleLendNodeComponent.Builder {
    private PersonResponsibleLendNodeModule personResponsibleLendNodeModule;

    @Override
    public PersonResponsibleLendNodeComponent build() {
      if (personResponsibleLendNodeModule == null) {
        throw new IllegalStateException(
            PersonResponsibleLendNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonResponsibleLendNodeComponentImpl(this);
    }

    @Override
    public PersonResponsibleLendNodeComponentBuilder setPersonResponsibleLendNodeModule(
        PersonResponsibleLendNodeModule module) {
      this.personResponsibleLendNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonResponsibleLendNodeComponentImpl
      implements PersonResponsibleLendNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<PersonResponsibleLendNodeRuleProvider>
        personResponsibleLendNodeRuleProviderMembersInjector;

    private Provider<PersonResponsibleLendNodeRuleProvider> personResponsibleLendNodeRuleProvider;

    private PersonResponsibleLendNodeComponentImpl(
        PersonResponsibleLendNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonResponsibleLendNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonResponsibleLendNodeModule_ProvideUiNodeFactory.create(
                  builder.personResponsibleLendNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PersonResponsibleLendNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.personResponsibleLendNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.personResponsibleLendNodeRuleProviderMembersInjector =
          PersonResponsibleLendNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.personResponsibleLendNodeRuleProvider =
          DoubleCheck.provider(
              PersonResponsibleLendNodeRuleProvider_Factory.create(
                  personResponsibleLendNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonResponsibleLendNodeRuleProvider getPersonResponsibleLendNodeRuleProvider() {
      return personResponsibleLendNodeRuleProvider.get();
    }
  }

  private final class UnemployedOnBenefitFlagNodeComponentBuilder
      implements UnemployedOnBenefitFlagNodeComponent.Builder {
    private UnemployedOnBenefitFlagNodeModule unemployedOnBenefitFlagNodeModule;

    @Override
    public UnemployedOnBenefitFlagNodeComponent build() {
      if (unemployedOnBenefitFlagNodeModule == null) {
        throw new IllegalStateException(
            UnemployedOnBenefitFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new UnemployedOnBenefitFlagNodeComponentImpl(this);
    }

    @Override
    public UnemployedOnBenefitFlagNodeComponentBuilder setUnemployedOnBenefitFlagNodeModule(
        UnemployedOnBenefitFlagNodeModule module) {
      this.unemployedOnBenefitFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class UnemployedOnBenefitFlagNodeComponentImpl
      implements UnemployedOnBenefitFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<UnemployedOnBenefitFlagNodeRuleProvider>
        unemployedOnBenefitFlagNodeRuleProviderMembersInjector;

    private Provider<UnemployedOnBenefitFlagNodeRuleProvider>
        unemployedOnBenefitFlagNodeRuleProvider;

    private UnemployedOnBenefitFlagNodeComponentImpl(
        UnemployedOnBenefitFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final UnemployedOnBenefitFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              UnemployedOnBenefitFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.unemployedOnBenefitFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              UnemployedOnBenefitFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.unemployedOnBenefitFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              UnemployedOnBenefitFlagNodeModule_ProvideStringUiNodeFactory.create(
                  builder.unemployedOnBenefitFlagNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.unemployedOnBenefitFlagNodeRuleProviderMembersInjector =
          UnemployedOnBenefitFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.unemployedOnBenefitFlagNodeRuleProvider =
          DoubleCheck.provider(
              UnemployedOnBenefitFlagNodeRuleProvider_Factory.create(
                  unemployedOnBenefitFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public UnemployedOnBenefitFlagNodeRuleProvider getUnemployedOnBenefitFlagNodeRuleProvider() {
      return unemployedOnBenefitFlagNodeRuleProvider.get();
    }
  }

  private final class StudentFlagNodeComponentBuilder implements StudentFlagNodeComponent.Builder {
    private StudentFlagNodeModule studentFlagNodeModule;

    @Override
    public StudentFlagNodeComponent build() {
      if (studentFlagNodeModule == null) {
        throw new IllegalStateException(
            StudentFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new StudentFlagNodeComponentImpl(this);
    }

    @Override
    public StudentFlagNodeComponentBuilder setStudentFlagNodeModule(StudentFlagNodeModule module) {
      this.studentFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class StudentFlagNodeComponentImpl implements StudentFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<StudentFlagNodeRuleProvider> studentFlagNodeRuleProviderMembersInjector;

    private Provider<StudentFlagNodeRuleProvider> studentFlagNodeRuleProvider;

    private StudentFlagNodeComponentImpl(StudentFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final StudentFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              StudentFlagNodeModule_ProvideUiNodeFactory.create(builder.studentFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              StudentFlagNodeModule_ProvideLeafUiNodeFactory.create(builder.studentFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              StudentFlagNodeModule_ProvideStringUiNodeFactory.create(
                  builder.studentFlagNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.studentFlagNodeRuleProviderMembersInjector =
          StudentFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.studentFlagNodeRuleProvider =
          DoubleCheck.provider(
              StudentFlagNodeRuleProvider_Factory.create(
                  studentFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public StudentFlagNodeRuleProvider getStudentFlagNodeRuleProvider() {
      return studentFlagNodeRuleProvider.get();
    }
  }

  private final class YearNodeComponentBuilder implements YearNodeComponent.Builder {
    private YearNodeModule yearNodeModule;

    @Override
    public YearNodeComponent build() {
      if (yearNodeModule == null) {
        throw new IllegalStateException(YearNodeModule.class.getCanonicalName() + " must be set");
      }
      return new YearNodeComponentImpl(this);
    }

    @Override
    public YearNodeComponentBuilder setYearNodeModule(YearNodeModule module) {
      this.yearNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class YearNodeComponentImpl implements YearNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<YearNodeRuleProvider> yearNodeRuleProviderMembersInjector;

    private Provider<YearNodeRuleProvider> yearNodeRuleProvider;

    private YearNodeComponentImpl(YearNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final YearNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(YearNodeModule_ProvideUiNodeFactory.create(builder.yearNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              YearNodeModule_ProvideLeafUiNodeFactory.create(builder.yearNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              YearNodeModule_ProvideBigDecimalUiNodeFactory.create(builder.yearNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.yearNodeRuleProviderMembersInjector =
          YearNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.yearNodeRuleProvider =
          DoubleCheck.provider(
              YearNodeRuleProvider_Factory.create(yearNodeRuleProviderMembersInjector));
    }

    @Override
    public YearNodeRuleProvider getYearNodeRuleProvider() {
      return yearNodeRuleProvider.get();
    }
  }

  private final class MonthNodeComponentBuilder implements MonthNodeComponent.Builder {
    private MonthNodeModule monthNodeModule;

    @Override
    public MonthNodeComponent build() {
      if (monthNodeModule == null) {
        throw new IllegalStateException(MonthNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MonthNodeComponentImpl(this);
    }

    @Override
    public MonthNodeComponentBuilder setMonthNodeModule(MonthNodeModule module) {
      this.monthNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MonthNodeComponentImpl implements MonthNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<MonthNodeRuleProvider> monthNodeRuleProviderMembersInjector;

    private Provider<MonthNodeRuleProvider> monthNodeRuleProvider;

    private MonthNodeComponentImpl(MonthNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MonthNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MonthNodeModule_ProvideUiNodeFactory.create(builder.monthNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MonthNodeModule_ProvideLeafUiNodeFactory.create(builder.monthNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              MonthNodeModule_ProvideBigDecimalUiNodeFactory.create(builder.monthNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.monthNodeRuleProviderMembersInjector =
          MonthNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.monthNodeRuleProvider =
          DoubleCheck.provider(
              MonthNodeRuleProvider_Factory.create(monthNodeRuleProviderMembersInjector));
    }

    @Override
    public MonthNodeRuleProvider getMonthNodeRuleProvider() {
      return monthNodeRuleProvider.get();
    }
  }

  private final class UnemployedSinceNodeComponentBuilder
      implements UnemployedSinceNodeComponent.Builder {
    private UnemployedSinceNodeModule unemployedSinceNodeModule;

    @Override
    public UnemployedSinceNodeComponent build() {
      if (unemployedSinceNodeModule == null) {
        throw new IllegalStateException(
            UnemployedSinceNodeModule.class.getCanonicalName() + " must be set");
      }
      return new UnemployedSinceNodeComponentImpl(this);
    }

    @Override
    public UnemployedSinceNodeComponentBuilder setUnemployedSinceNodeModule(
        UnemployedSinceNodeModule module) {
      this.unemployedSinceNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class UnemployedSinceNodeComponentImpl implements UnemployedSinceNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<MonthYearNode<?>> provideMonthYearNodeProvider;

    private Provider<MonthYearNotInFutureRuleImpl> monthYearNotInFutureRuleImplProvider;

    private Provider<MonthYearNotInFutureRule> provideMonthYearNotInFutureRuleProvider;

    private MembersInjector<UnemployedSinceNodeRuleProvider>
        unemployedSinceNodeRuleProviderMembersInjector;

    private Provider<UnemployedSinceNodeRuleProvider> unemployedSinceNodeRuleProvider;

    private UnemployedSinceNodeComponentImpl(UnemployedSinceNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final UnemployedSinceNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              UnemployedSinceNodeModule_ProvideUiNodeFactory.create(
                  builder.unemployedSinceNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              UnemployedSinceNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.unemployedSinceNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideMonthYearNodeProvider =
          DoubleCheck.provider(
              UnemployedSinceNodeModule_ProvideMonthYearNodeFactory.create(
                  builder.unemployedSinceNodeModule));

      this.monthYearNotInFutureRuleImplProvider =
          MonthYearNotInFutureRuleImpl_Factory.create(
              MembersInjectors.<MonthYearNotInFutureRuleImpl>noOp(), provideMonthYearNodeProvider);

      this.provideMonthYearNotInFutureRuleProvider =
          (Provider) monthYearNotInFutureRuleImplProvider;

      this.unemployedSinceNodeRuleProviderMembersInjector =
          UnemployedSinceNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideMonthYearNotInFutureRuleProvider);

      this.unemployedSinceNodeRuleProvider =
          DoubleCheck.provider(
              UnemployedSinceNodeRuleProvider_Factory.create(
                  unemployedSinceNodeRuleProviderMembersInjector));
    }

    @Override
    public UnemployedSinceNodeRuleProvider getUnemployedSinceNodeRuleProvider() {
      return unemployedSinceNodeRuleProvider.get();
    }
  }

  private final class StudentTypeNodeComponentBuilder implements StudentTypeNodeComponent.Builder {
    private StudentTypeNodeModule studentTypeNodeModule;

    @Override
    public StudentTypeNodeComponent build() {
      if (studentTypeNodeModule == null) {
        throw new IllegalStateException(
            StudentTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new StudentTypeNodeComponentImpl(this);
    }

    @Override
    public StudentTypeNodeComponentBuilder setStudentTypeNodeModule(StudentTypeNodeModule module) {
      this.studentTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class StudentTypeNodeComponentImpl implements StudentTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<StudentTypeNodeRuleProvider> studentTypeNodeRuleProviderMembersInjector;

    private Provider<StudentTypeNodeRuleProvider> studentTypeNodeRuleProvider;

    private StudentTypeNodeComponentImpl(StudentTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final StudentTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              StudentTypeNodeModule_ProvideUiNodeFactory.create(builder.studentTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              StudentTypeNodeModule_ProvideLeafUiNodeFactory.create(builder.studentTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              StudentTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.studentTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.studentTypeNodeRuleProviderMembersInjector =
          StudentTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.studentTypeNodeRuleProvider =
          DoubleCheck.provider(
              StudentTypeNodeRuleProvider_Factory.create(
                  studentTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public StudentTypeNodeRuleProvider getStudentTypeNodeRuleProvider() {
      return studentTypeNodeRuleProvider.get();
    }
  }

  private final class HouseDutiesFlagNodeComponentBuilder
      implements HouseDutiesFlagNodeComponent.Builder {
    private HouseDutiesFlagNodeModule houseDutiesFlagNodeModule;

    @Override
    public HouseDutiesFlagNodeComponent build() {
      if (houseDutiesFlagNodeModule == null) {
        throw new IllegalStateException(
            HouseDutiesFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new HouseDutiesFlagNodeComponentImpl(this);
    }

    @Override
    public HouseDutiesFlagNodeComponentBuilder setHouseDutiesFlagNodeModule(
        HouseDutiesFlagNodeModule module) {
      this.houseDutiesFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class HouseDutiesFlagNodeComponentImpl implements HouseDutiesFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<HouseDutiesFlagNodeRuleProvider>
        houseDutiesFlagNodeRuleProviderMembersInjector;

    private Provider<HouseDutiesFlagNodeRuleProvider> houseDutiesFlagNodeRuleProvider;

    private HouseDutiesFlagNodeComponentImpl(HouseDutiesFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HouseDutiesFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              HouseDutiesFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.houseDutiesFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              HouseDutiesFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.houseDutiesFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              HouseDutiesFlagNodeModule_ProvideStringUiNodeFactory.create(
                  builder.houseDutiesFlagNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.houseDutiesFlagNodeRuleProviderMembersInjector =
          HouseDutiesFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.houseDutiesFlagNodeRuleProvider =
          DoubleCheck.provider(
              HouseDutiesFlagNodeRuleProvider_Factory.create(
                  houseDutiesFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public HouseDutiesFlagNodeRuleProvider getHouseDutiesFlagNodeRuleProvider() {
      return houseDutiesFlagNodeRuleProvider.get();
    }
  }

  private final class UnemployedNodeComponentBuilder implements UnemployedNodeComponent.Builder {
    private UnemployedNodeModule unemployedNodeModule;

    @Override
    public UnemployedNodeComponent build() {
      if (unemployedNodeModule == null) {
        throw new IllegalStateException(
            UnemployedNodeModule.class.getCanonicalName() + " must be set");
      }
      return new UnemployedNodeComponentImpl(this);
    }

    @Override
    public UnemployedNodeComponentBuilder setUnemployedNodeModule(UnemployedNodeModule module) {
      this.unemployedNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class UnemployedNodeComponentImpl implements UnemployedNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<UnemployedNodeRuleProvider> unemployedNodeRuleProviderMembersInjector;

    private Provider<UnemployedNodeRuleProvider> unemployedNodeRuleProvider;

    private UnemployedNodeComponentImpl(UnemployedNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final UnemployedNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              UnemployedNodeModule_ProvideUiNodeFactory.create(builder.unemployedNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              UnemployedNodeModule_ProvideObjectUiNodeFactory.create(builder.unemployedNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.unemployedNodeRuleProviderMembersInjector =
          UnemployedNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.unemployedNodeRuleProvider =
          DoubleCheck.provider(
              UnemployedNodeRuleProvider_Factory.create(unemployedNodeRuleProviderMembersInjector));
    }

    @Override
    public UnemployedNodeRuleProvider getUnemployedNodeRuleProvider() {
      return unemployedNodeRuleProvider.get();
    }
  }

  private final class RetiredOnBenefitFlagNodeComponentBuilder
      implements RetiredOnBenefitFlagNodeComponent.Builder {
    private RetiredOnBenefitFlagNodeModule retiredOnBenefitFlagNodeModule;

    @Override
    public RetiredOnBenefitFlagNodeComponent build() {
      if (retiredOnBenefitFlagNodeModule == null) {
        throw new IllegalStateException(
            RetiredOnBenefitFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RetiredOnBenefitFlagNodeComponentImpl(this);
    }

    @Override
    public RetiredOnBenefitFlagNodeComponentBuilder setRetiredOnBenefitFlagNodeModule(
        RetiredOnBenefitFlagNodeModule module) {
      this.retiredOnBenefitFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RetiredOnBenefitFlagNodeComponentImpl
      implements RetiredOnBenefitFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<RetiredOnBenefitFlagNodeRuleProvider>
        retiredOnBenefitFlagNodeRuleProviderMembersInjector;

    private Provider<RetiredOnBenefitFlagNodeRuleProvider> retiredOnBenefitFlagNodeRuleProvider;

    private RetiredOnBenefitFlagNodeComponentImpl(
        RetiredOnBenefitFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RetiredOnBenefitFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RetiredOnBenefitFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.retiredOnBenefitFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              RetiredOnBenefitFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.retiredOnBenefitFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              RetiredOnBenefitFlagNodeModule_ProvideStringUiNodeFactory.create(
                  builder.retiredOnBenefitFlagNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.retiredOnBenefitFlagNodeRuleProviderMembersInjector =
          RetiredOnBenefitFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.retiredOnBenefitFlagNodeRuleProvider =
          DoubleCheck.provider(
              RetiredOnBenefitFlagNodeRuleProvider_Factory.create(
                  retiredOnBenefitFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public RetiredOnBenefitFlagNodeRuleProvider getRetiredOnBenefitFlagNodeRuleProvider() {
      return retiredOnBenefitFlagNodeRuleProvider.get();
    }
  }

  private final class RetiredSinceNodeComponentBuilder
      implements RetiredSinceNodeComponent.Builder {
    private RetiredSinceNodeModule retiredSinceNodeModule;

    @Override
    public RetiredSinceNodeComponent build() {
      if (retiredSinceNodeModule == null) {
        throw new IllegalStateException(
            RetiredSinceNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RetiredSinceNodeComponentImpl(this);
    }

    @Override
    public RetiredSinceNodeComponentBuilder setRetiredSinceNodeModule(
        RetiredSinceNodeModule module) {
      this.retiredSinceNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RetiredSinceNodeComponentImpl implements RetiredSinceNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<MonthYearNode<?>> provideMonthYearNodeProvider;

    private Provider<MonthYearNotInFutureRuleImpl> monthYearNotInFutureRuleImplProvider;

    private Provider<MonthYearNotInFutureRule> provideMonthYearNotInFutureRuleProvider;

    private MembersInjector<RetiredSinceNodeRuleProvider>
        retiredSinceNodeRuleProviderMembersInjector;

    private Provider<RetiredSinceNodeRuleProvider> retiredSinceNodeRuleProvider;

    private RetiredSinceNodeComponentImpl(RetiredSinceNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RetiredSinceNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RetiredSinceNodeModule_ProvideUiNodeFactory.create(builder.retiredSinceNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              RetiredSinceNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.retiredSinceNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideMonthYearNodeProvider =
          DoubleCheck.provider(
              RetiredSinceNodeModule_ProvideMonthYearNodeFactory.create(
                  builder.retiredSinceNodeModule));

      this.monthYearNotInFutureRuleImplProvider =
          MonthYearNotInFutureRuleImpl_Factory.create(
              MembersInjectors.<MonthYearNotInFutureRuleImpl>noOp(), provideMonthYearNodeProvider);

      this.provideMonthYearNotInFutureRuleProvider =
          (Provider) monthYearNotInFutureRuleImplProvider;

      this.retiredSinceNodeRuleProviderMembersInjector =
          RetiredSinceNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideMonthYearNotInFutureRuleProvider);

      this.retiredSinceNodeRuleProvider =
          DoubleCheck.provider(
              RetiredSinceNodeRuleProvider_Factory.create(
                  retiredSinceNodeRuleProviderMembersInjector));
    }

    @Override
    public RetiredSinceNodeRuleProvider getRetiredSinceNodeRuleProvider() {
      return retiredSinceNodeRuleProvider.get();
    }
  }

  private final class RetiredEmploymentNodeComponentBuilder
      implements RetiredEmploymentNodeComponent.Builder {
    private RetiredEmploymentNodeModule retiredEmploymentNodeModule;

    @Override
    public RetiredEmploymentNodeComponent build() {
      if (retiredEmploymentNodeModule == null) {
        throw new IllegalStateException(
            RetiredEmploymentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RetiredEmploymentNodeComponentImpl(this);
    }

    @Override
    public RetiredEmploymentNodeComponentBuilder setRetiredEmploymentNodeModule(
        RetiredEmploymentNodeModule module) {
      this.retiredEmploymentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RetiredEmploymentNodeComponentImpl implements RetiredEmploymentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<RetiredEmploymentNodeRuleProvider>
        retiredEmploymentNodeRuleProviderMembersInjector;

    private Provider<RetiredEmploymentNodeRuleProvider> retiredEmploymentNodeRuleProvider;

    private RetiredEmploymentNodeComponentImpl(RetiredEmploymentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RetiredEmploymentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RetiredEmploymentNodeModule_ProvideUiNodeFactory.create(
                  builder.retiredEmploymentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              RetiredEmploymentNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.retiredEmploymentNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.retiredEmploymentNodeRuleProviderMembersInjector =
          RetiredEmploymentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.retiredEmploymentNodeRuleProvider =
          DoubleCheck.provider(
              RetiredEmploymentNodeRuleProvider_Factory.create(
                  retiredEmploymentNodeRuleProviderMembersInjector));
    }

    @Override
    public RetiredEmploymentNodeRuleProvider getRetiredEmploymentNodeRuleProvider() {
      return retiredEmploymentNodeRuleProvider.get();
    }
  }

  private final class EmployerNameNodeComponentBuilder
      implements EmployerNameNodeComponent.Builder {
    private EmployerNameNodeModule employerNameNodeModule;

    @Override
    public EmployerNameNodeComponent build() {
      if (employerNameNodeModule == null) {
        throw new IllegalStateException(
            EmployerNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new EmployerNameNodeComponentImpl(this);
    }

    @Override
    public EmployerNameNodeComponentBuilder setEmployerNameNodeModule(
        EmployerNameNodeModule module) {
      this.employerNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class EmployerNameNodeComponentImpl implements EmployerNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<EmployerNameNodeRuleProvider>
        employerNameNodeRuleProviderMembersInjector;

    private Provider<EmployerNameNodeRuleProvider> employerNameNodeRuleProvider;

    private EmployerNameNodeComponentImpl(EmployerNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EmployerNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              EmployerNameNodeModule_ProvideUiNodeFactory.create(builder.employerNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              EmployerNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.employerNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              EmployerNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.employerNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.employerNameNodeRuleProviderMembersInjector =
          EmployerNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.employerNameNodeRuleProvider =
          DoubleCheck.provider(
              EmployerNameNodeRuleProvider_Factory.create(
                  employerNameNodeRuleProviderMembersInjector));
    }

    @Override
    public EmployerNameNodeRuleProvider getEmployerNameNodeRuleProvider() {
      return employerNameNodeRuleProvider.get();
    }
  }

  private final class AddressLineNodeComponentBuilder implements AddressLineNodeComponent.Builder {
    private AddressLineNodeModule addressLineNodeModule;

    @Override
    public AddressLineNodeComponent build() {
      if (addressLineNodeModule == null) {
        throw new IllegalStateException(
            AddressLineNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AddressLineNodeComponentImpl(this);
    }

    @Override
    public AddressLineNodeComponentBuilder setAddressLineNodeModule(AddressLineNodeModule module) {
      this.addressLineNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AddressLineNodeComponentImpl implements AddressLineNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AddressLineNodeRuleProvider> addressLineNodeRuleProviderMembersInjector;

    private Provider<AddressLineNodeRuleProvider> addressLineNodeRuleProvider;

    private AddressLineNodeComponentImpl(AddressLineNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AddressLineNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AddressLineNodeModule_ProvideUiNodeFactory.create(builder.addressLineNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AddressLineNodeModule_ProvideLeafUiNodeFactory.create(builder.addressLineNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AddressLineNodeModule_ProvideStringUiNodeFactory.create(
                  builder.addressLineNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.addressLineNodeRuleProviderMembersInjector =
          AddressLineNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.addressLineNodeRuleProvider =
          DoubleCheck.provider(
              AddressLineNodeRuleProvider_Factory.create(
                  addressLineNodeRuleProviderMembersInjector));
    }

    @Override
    public AddressLineNodeRuleProvider getAddressLineNodeRuleProvider() {
      return addressLineNodeRuleProvider.get();
    }
  }

  private final class PostcodeNodeComponentBuilder implements PostcodeNodeComponent.Builder {
    private PostcodeNodeModule postcodeNodeModule;

    @Override
    public PostcodeNodeComponent build() {
      if (postcodeNodeModule == null) {
        throw new IllegalStateException(
            PostcodeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PostcodeNodeComponentImpl(this);
    }

    @Override
    public PostcodeNodeComponentBuilder setPostcodeNodeModule(PostcodeNodeModule module) {
      this.postcodeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PostcodeNodeComponentImpl implements PostcodeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<PostcodeNodeRuleProvider> postcodeNodeRuleProviderMembersInjector;

    private Provider<PostcodeNodeRuleProvider> postcodeNodeRuleProvider;

    private PostcodeNodeComponentImpl(PostcodeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PostcodeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PostcodeNodeModule_ProvideUiNodeFactory.create(builder.postcodeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PostcodeNodeModule_ProvideLeafUiNodeFactory.create(builder.postcodeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              PostcodeNodeModule_ProvideStringUiNodeFactory.create(builder.postcodeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.postcodeNodeRuleProviderMembersInjector =
          PostcodeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.postcodeNodeRuleProvider =
          DoubleCheck.provider(
              PostcodeNodeRuleProvider_Factory.create(postcodeNodeRuleProviderMembersInjector));
    }

    @Override
    public PostcodeNodeRuleProvider getPostcodeNodeRuleProvider() {
      return postcodeNodeRuleProvider.get();
    }
  }

  private final class SuburbNodeComponentBuilder implements SuburbNodeComponent.Builder {
    private SuburbNodeModule suburbNodeModule;

    @Override
    public SuburbNodeComponent build() {
      if (suburbNodeModule == null) {
        throw new IllegalStateException(SuburbNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SuburbNodeComponentImpl(this);
    }

    @Override
    public SuburbNodeComponentBuilder setSuburbNodeModule(SuburbNodeModule module) {
      this.suburbNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SuburbNodeComponentImpl implements SuburbNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<SuburbNodeRuleProvider> suburbNodeRuleProviderMembersInjector;

    private Provider<SuburbNodeRuleProvider> suburbNodeRuleProvider;

    private SuburbNodeComponentImpl(SuburbNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SuburbNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SuburbNodeModule_ProvideUiNodeFactory.create(builder.suburbNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SuburbNodeModule_ProvideLeafUiNodeFactory.create(builder.suburbNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              SuburbNodeModule_ProvideStringUiNodeFactory.create(builder.suburbNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.suburbNodeRuleProviderMembersInjector =
          SuburbNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.suburbNodeRuleProvider =
          DoubleCheck.provider(
              SuburbNodeRuleProvider_Factory.create(suburbNodeRuleProviderMembersInjector));
    }

    @Override
    public SuburbNodeRuleProvider getSuburbNodeRuleProvider() {
      return suburbNodeRuleProvider.get();
    }
  }

  private final class CountryNodeComponentBuilder implements CountryNodeComponent.Builder {
    private CountryNodeModule countryNodeModule;

    @Override
    public CountryNodeComponent build() {
      if (countryNodeModule == null) {
        throw new IllegalStateException(
            CountryNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CountryNodeComponentImpl(this);
    }

    @Override
    public CountryNodeComponentBuilder setCountryNodeModule(CountryNodeModule module) {
      this.countryNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CountryNodeComponentImpl implements CountryNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CountryNodeRuleProvider> countryNodeRuleProviderMembersInjector;

    private Provider<CountryNodeRuleProvider> countryNodeRuleProvider;

    private CountryNodeComponentImpl(CountryNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CountryNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CountryNodeModule_ProvideUiNodeFactory.create(builder.countryNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CountryNodeModule_ProvideLeafUiNodeFactory.create(builder.countryNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CountryNodeModule_ProvideStringUiNodeFactory.create(builder.countryNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.countryNodeRuleProviderMembersInjector =
          CountryNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.countryNodeRuleProvider =
          DoubleCheck.provider(
              CountryNodeRuleProvider_Factory.create(countryNodeRuleProviderMembersInjector));
    }

    @Override
    public CountryNodeRuleProvider getCountryNodeRuleProvider() {
      return countryNodeRuleProvider.get();
    }
  }

  private final class EmployerAddressNodeComponentBuilder
      implements EmployerAddressNodeComponent.Builder {
    private EmployerAddressNodeModule employerAddressNodeModule;

    @Override
    public EmployerAddressNodeComponent build() {
      if (employerAddressNodeModule == null) {
        throw new IllegalStateException(
            EmployerAddressNodeModule.class.getCanonicalName() + " must be set");
      }
      return new EmployerAddressNodeComponentImpl(this);
    }

    @Override
    public EmployerAddressNodeComponentBuilder setEmployerAddressNodeModule(
        EmployerAddressNodeModule module) {
      this.employerAddressNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class EmployerAddressNodeComponentImpl implements EmployerAddressNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<AddressNode<?>> provideAddressNodeProvider;

    private Provider<UpdateAddressRefListRuleImpl> updateAddressRefListRuleImplProvider;

    private Provider<UpdateAddressRefListRule> provideUpdateAddressRefListRuleProvider;

    private MembersInjector<EmployerAddressNodeRuleProvider>
        employerAddressNodeRuleProviderMembersInjector;

    private Provider<EmployerAddressNodeRuleProvider> employerAddressNodeRuleProvider;

    private EmployerAddressNodeComponentImpl(EmployerAddressNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EmployerAddressNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              EmployerAddressNodeModule_ProvideUiNodeFactory.create(
                  builder.employerAddressNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              EmployerAddressNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.employerAddressNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideAddressNodeProvider =
          DoubleCheck.provider(
              EmployerAddressNodeModule_ProvideAddressNodeFactory.create(
                  builder.employerAddressNodeModule));

      this.updateAddressRefListRuleImplProvider =
          UpdateAddressRefListRuleImpl_Factory.create(
              MembersInjectors.<UpdateAddressRefListRuleImpl>noOp(), provideAddressNodeProvider);

      this.provideUpdateAddressRefListRuleProvider =
          (Provider) updateAddressRefListRuleImplProvider;

      this.employerAddressNodeRuleProviderMembersInjector =
          EmployerAddressNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideUpdateAddressRefListRuleProvider);

      this.employerAddressNodeRuleProvider =
          DoubleCheck.provider(
              EmployerAddressNodeRuleProvider_Factory.create(
                  employerAddressNodeRuleProviderMembersInjector));
    }

    @Override
    public EmployerAddressNodeRuleProvider getEmployerAddressNodeRuleProvider() {
      return employerAddressNodeRuleProvider.get();
    }
  }

  private final class OccupationNodeComponentBuilder implements OccupationNodeComponent.Builder {
    private OccupationNodeModule occupationNodeModule;

    @Override
    public OccupationNodeComponent build() {
      if (occupationNodeModule == null) {
        throw new IllegalStateException(
            OccupationNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OccupationNodeComponentImpl(this);
    }

    @Override
    public OccupationNodeComponentBuilder setOccupationNodeModule(OccupationNodeModule module) {
      this.occupationNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OccupationNodeComponentImpl implements OccupationNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<OccupationNodeRuleProvider> occupationNodeRuleProviderMembersInjector;

    private Provider<OccupationNodeRuleProvider> occupationNodeRuleProvider;

    private OccupationNodeComponentImpl(OccupationNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OccupationNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OccupationNodeModule_ProvideUiNodeFactory.create(builder.occupationNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OccupationNodeModule_ProvideLeafUiNodeFactory.create(builder.occupationNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              OccupationNodeModule_ProvideStringUiNodeFactory.create(builder.occupationNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.occupationNodeRuleProviderMembersInjector =
          OccupationNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.occupationNodeRuleProvider =
          DoubleCheck.provider(
              OccupationNodeRuleProvider_Factory.create(occupationNodeRuleProviderMembersInjector));
    }

    @Override
    public OccupationNodeRuleProvider getOccupationNodeRuleProvider() {
      return occupationNodeRuleProvider.get();
    }
  }

  private final class EmployerPhoneNodeComponentBuilder
      implements EmployerPhoneNodeComponent.Builder {
    private EmployerPhoneNodeModule employerPhoneNodeModule;

    @Override
    public EmployerPhoneNodeComponent build() {
      if (employerPhoneNodeModule == null) {
        throw new IllegalStateException(
            EmployerPhoneNodeModule.class.getCanonicalName() + " must be set");
      }
      return new EmployerPhoneNodeComponentImpl(this);
    }

    @Override
    public EmployerPhoneNodeComponentBuilder setEmployerPhoneNodeModule(
        EmployerPhoneNodeModule module) {
      this.employerPhoneNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class EmployerPhoneNodeComponentImpl implements EmployerPhoneNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<TelephoneNode<?>> provideTelephoneNodeProvider;

    private Provider<TelephoneCompleteRuleImpl> telephoneCompleteRuleImplProvider;

    private Provider<TelephoneCompleteRule> provideTelephoneCompleteRuleProvider;

    private MembersInjector<EmployerPhoneNodeRuleProvider>
        employerPhoneNodeRuleProviderMembersInjector;

    private Provider<EmployerPhoneNodeRuleProvider> employerPhoneNodeRuleProvider;

    private EmployerPhoneNodeComponentImpl(EmployerPhoneNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EmployerPhoneNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              EmployerPhoneNodeModule_ProvideUiNodeFactory.create(builder.employerPhoneNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              EmployerPhoneNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.employerPhoneNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideTelephoneNodeProvider =
          DoubleCheck.provider(
              EmployerPhoneNodeModule_ProvideTelephoneNodeFactory.create(
                  builder.employerPhoneNodeModule));

      this.telephoneCompleteRuleImplProvider =
          TelephoneCompleteRuleImpl_Factory.create(
              MembersInjectors.<TelephoneCompleteRuleImpl>noOp(), provideTelephoneNodeProvider);

      this.provideTelephoneCompleteRuleProvider = (Provider) telephoneCompleteRuleImplProvider;

      this.employerPhoneNodeRuleProviderMembersInjector =
          EmployerPhoneNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              provideTelephoneCompleteRuleProvider);

      this.employerPhoneNodeRuleProvider =
          DoubleCheck.provider(
              EmployerPhoneNodeRuleProvider_Factory.create(
                  employerPhoneNodeRuleProviderMembersInjector));
    }

    @Override
    public EmployerPhoneNodeRuleProvider getEmployerPhoneNodeRuleProvider() {
      return employerPhoneNodeRuleProvider.get();
    }
  }

  private final class EmploymentStatusNodeComponentBuilder
      implements EmploymentStatusNodeComponent.Builder {
    private EmploymentStatusNodeModule employmentStatusNodeModule;

    @Override
    public EmploymentStatusNodeComponent build() {
      if (employmentStatusNodeModule == null) {
        throw new IllegalStateException(
            EmploymentStatusNodeModule.class.getCanonicalName() + " must be set");
      }
      return new EmploymentStatusNodeComponentImpl(this);
    }

    @Override
    public EmploymentStatusNodeComponentBuilder setEmploymentStatusNodeModule(
        EmploymentStatusNodeModule module) {
      this.employmentStatusNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class EmploymentStatusNodeComponentImpl implements EmploymentStatusNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<EmploymentStatusNodeRuleProvider>
        employmentStatusNodeRuleProviderMembersInjector;

    private Provider<EmploymentStatusNodeRuleProvider> employmentStatusNodeRuleProvider;

    private EmploymentStatusNodeComponentImpl(EmploymentStatusNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EmploymentStatusNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              EmploymentStatusNodeModule_ProvideUiNodeFactory.create(
                  builder.employmentStatusNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              EmploymentStatusNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.employmentStatusNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              EmploymentStatusNodeModule_ProvideStringUiNodeFactory.create(
                  builder.employmentStatusNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.employmentStatusNodeRuleProviderMembersInjector =
          EmploymentStatusNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.employmentStatusNodeRuleProvider =
          DoubleCheck.provider(
              EmploymentStatusNodeRuleProvider_Factory.create(
                  employmentStatusNodeRuleProviderMembersInjector));
    }

    @Override
    public EmploymentStatusNodeRuleProvider getEmploymentStatusNodeRuleProvider() {
      return employmentStatusNodeRuleProvider.get();
    }
  }

  private final class EmploymentStartedNodeComponentBuilder
      implements EmploymentStartedNodeComponent.Builder {
    private EmploymentStartedNodeModule employmentStartedNodeModule;

    @Override
    public EmploymentStartedNodeComponent build() {
      if (employmentStartedNodeModule == null) {
        throw new IllegalStateException(
            EmploymentStartedNodeModule.class.getCanonicalName() + " must be set");
      }
      return new EmploymentStartedNodeComponentImpl(this);
    }

    @Override
    public EmploymentStartedNodeComponentBuilder setEmploymentStartedNodeModule(
        EmploymentStartedNodeModule module) {
      this.employmentStartedNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class EmploymentStartedNodeComponentImpl implements EmploymentStartedNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<MonthYearNode<?>> provideMonthYearNodeProvider;

    private Provider<MonthYearNotInFutureRuleImpl> monthYearNotInFutureRuleImplProvider;

    private Provider<MonthYearNotInFutureRule> provideMonthYearNotInFutureRuleProvider;

    private MembersInjector<EmploymentStartedNodeRuleProvider>
        employmentStartedNodeRuleProviderMembersInjector;

    private Provider<EmploymentStartedNodeRuleProvider> employmentStartedNodeRuleProvider;

    private EmploymentStartedNodeComponentImpl(EmploymentStartedNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EmploymentStartedNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              EmploymentStartedNodeModule_ProvideUiNodeFactory.create(
                  builder.employmentStartedNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              EmploymentStartedNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.employmentStartedNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideMonthYearNodeProvider =
          DoubleCheck.provider(
              EmploymentStartedNodeModule_ProvideMonthYearNodeFactory.create(
                  builder.employmentStartedNodeModule));

      this.monthYearNotInFutureRuleImplProvider =
          MonthYearNotInFutureRuleImpl_Factory.create(
              MembersInjectors.<MonthYearNotInFutureRuleImpl>noOp(), provideMonthYearNodeProvider);

      this.provideMonthYearNotInFutureRuleProvider =
          (Provider) monthYearNotInFutureRuleImplProvider;

      this.employmentStartedNodeRuleProviderMembersInjector =
          EmploymentStartedNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideMonthYearNotInFutureRuleProvider);

      this.employmentStartedNodeRuleProvider =
          DoubleCheck.provider(
              EmploymentStartedNodeRuleProvider_Factory.create(
                  employmentStartedNodeRuleProviderMembersInjector));
    }

    @Override
    public EmploymentStartedNodeRuleProvider getEmploymentStartedNodeRuleProvider() {
      return employmentStartedNodeRuleProvider.get();
    }
  }

  private final class EmploymentEndedNodeComponentBuilder
      implements EmploymentEndedNodeComponent.Builder {
    private EmploymentEndedNodeModule employmentEndedNodeModule;

    @Override
    public EmploymentEndedNodeComponent build() {
      if (employmentEndedNodeModule == null) {
        throw new IllegalStateException(
            EmploymentEndedNodeModule.class.getCanonicalName() + " must be set");
      }
      return new EmploymentEndedNodeComponentImpl(this);
    }

    @Override
    public EmploymentEndedNodeComponentBuilder setEmploymentEndedNodeModule(
        EmploymentEndedNodeModule module) {
      this.employmentEndedNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class EmploymentEndedNodeComponentImpl implements EmploymentEndedNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<MonthYearNode<?>> provideMonthYearNodeProvider;

    private Provider<MonthYearNotInFutureRuleImpl> monthYearNotInFutureRuleImplProvider;

    private Provider<MonthYearNotInFutureRule> provideMonthYearNotInFutureRuleProvider;

    private Provider<EmploymentEndedNode> provideEmploymentEndedNodeProvider;

    private Provider<EmploymentEndedNoEarlierThanEmploymentStartedRuleImpl>
        employmentEndedNoEarlierThanEmploymentStartedRuleImplProvider;

    private Provider<EmploymentEndedNoEarlierThanEmploymentStartedRule>
        provideEmploymentEndedNoEarlierThanEmploymentStartedRuleProvider;

    private MembersInjector<EmploymentEndedNodeRuleProvider>
        employmentEndedNodeRuleProviderMembersInjector;

    private Provider<EmploymentEndedNodeRuleProvider> employmentEndedNodeRuleProvider;

    private EmploymentEndedNodeComponentImpl(EmploymentEndedNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EmploymentEndedNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              EmploymentEndedNodeModule_ProvideUiNodeFactory.create(
                  builder.employmentEndedNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              EmploymentEndedNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.employmentEndedNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideMonthYearNodeProvider =
          DoubleCheck.provider(
              EmploymentEndedNodeModule_ProvideMonthYearNodeFactory.create(
                  builder.employmentEndedNodeModule));

      this.monthYearNotInFutureRuleImplProvider =
          MonthYearNotInFutureRuleImpl_Factory.create(
              MembersInjectors.<MonthYearNotInFutureRuleImpl>noOp(), provideMonthYearNodeProvider);

      this.provideMonthYearNotInFutureRuleProvider =
          (Provider) monthYearNotInFutureRuleImplProvider;

      this.provideEmploymentEndedNodeProvider =
          DoubleCheck.provider(
              EmploymentEndedNodeModule_ProvideEmploymentEndedNodeFactory.create(
                  builder.employmentEndedNodeModule));

      this.employmentEndedNoEarlierThanEmploymentStartedRuleImplProvider =
          EmploymentEndedNoEarlierThanEmploymentStartedRuleImpl_Factory.create(
              MembersInjectors.<EmploymentEndedNoEarlierThanEmploymentStartedRuleImpl>noOp(),
              provideEmploymentEndedNodeProvider);

      this.provideEmploymentEndedNoEarlierThanEmploymentStartedRuleProvider =
          (Provider) employmentEndedNoEarlierThanEmploymentStartedRuleImplProvider;

      this.employmentEndedNodeRuleProviderMembersInjector =
          EmploymentEndedNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideMonthYearNotInFutureRuleProvider,
              provideEmploymentEndedNoEarlierThanEmploymentStartedRuleProvider);

      this.employmentEndedNodeRuleProvider =
          DoubleCheck.provider(
              EmploymentEndedNodeRuleProvider_Factory.create(
                  employmentEndedNodeRuleProviderMembersInjector));
    }

    @Override
    public EmploymentEndedNodeRuleProvider getEmploymentEndedNodeRuleProvider() {
      return employmentEndedNodeRuleProvider.get();
    }
  }

  private final class GrossYearlySalaryNodeComponentBuilder
      implements GrossYearlySalaryNodeComponent.Builder {
    private GrossYearlySalaryNodeModule grossYearlySalaryNodeModule;

    @Override
    public GrossYearlySalaryNodeComponent build() {
      if (grossYearlySalaryNodeModule == null) {
        throw new IllegalStateException(
            GrossYearlySalaryNodeModule.class.getCanonicalName() + " must be set");
      }
      return new GrossYearlySalaryNodeComponentImpl(this);
    }

    @Override
    public GrossYearlySalaryNodeComponentBuilder setGrossYearlySalaryNodeModule(
        GrossYearlySalaryNodeModule module) {
      this.grossYearlySalaryNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class GrossYearlySalaryNodeComponentImpl implements GrossYearlySalaryNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<GrossYearlySalaryNodeRuleProvider>
        grossYearlySalaryNodeRuleProviderMembersInjector;

    private Provider<GrossYearlySalaryNodeRuleProvider> grossYearlySalaryNodeRuleProvider;

    private GrossYearlySalaryNodeComponentImpl(GrossYearlySalaryNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final GrossYearlySalaryNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              GrossYearlySalaryNodeModule_ProvideUiNodeFactory.create(
                  builder.grossYearlySalaryNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              GrossYearlySalaryNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.grossYearlySalaryNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              GrossYearlySalaryNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.grossYearlySalaryNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.grossYearlySalaryNodeRuleProviderMembersInjector =
          GrossYearlySalaryNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.grossYearlySalaryNodeRuleProvider =
          DoubleCheck.provider(
              GrossYearlySalaryNodeRuleProvider_Factory.create(
                  grossYearlySalaryNodeRuleProviderMembersInjector));
    }

    @Override
    public GrossYearlySalaryNodeRuleProvider getGrossYearlySalaryNodeRuleProvider() {
      return grossYearlySalaryNodeRuleProvider.get();
    }
  }

  private final class PayeEmployedNodeComponentBuilder
      implements PayeEmployedNodeComponent.Builder {
    private PayeEmployedNodeModule payeEmployedNodeModule;

    @Override
    public PayeEmployedNodeComponent build() {
      if (payeEmployedNodeModule == null) {
        throw new IllegalStateException(
            PayeEmployedNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PayeEmployedNodeComponentImpl(this);
    }

    @Override
    public PayeEmployedNodeComponentBuilder setPayeEmployedNodeModule(
        PayeEmployedNodeModule module) {
      this.payeEmployedNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PayeEmployedNodeComponentImpl implements PayeEmployedNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<PayeEmployedNodeRuleProvider>
        payeEmployedNodeRuleProviderMembersInjector;

    private Provider<PayeEmployedNodeRuleProvider> payeEmployedNodeRuleProvider;

    private PayeEmployedNodeComponentImpl(PayeEmployedNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PayeEmployedNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PayeEmployedNodeModule_ProvideUiNodeFactory.create(builder.payeEmployedNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PayeEmployedNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.payeEmployedNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.payeEmployedNodeRuleProviderMembersInjector =
          PayeEmployedNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.payeEmployedNodeRuleProvider =
          DoubleCheck.provider(
              PayeEmployedNodeRuleProvider_Factory.create(
                  payeEmployedNodeRuleProviderMembersInjector));
    }

    @Override
    public PayeEmployedNodeRuleProvider getPayeEmployedNodeRuleProvider() {
      return payeEmployedNodeRuleProvider.get();
    }
  }

  private final class ProfitPreviousYearNodeComponentBuilder
      implements ProfitPreviousYearNodeComponent.Builder {
    private ProfitPreviousYearNodeModule profitPreviousYearNodeModule;

    @Override
    public ProfitPreviousYearNodeComponent build() {
      if (profitPreviousYearNodeModule == null) {
        throw new IllegalStateException(
            ProfitPreviousYearNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProfitPreviousYearNodeComponentImpl(this);
    }

    @Override
    public ProfitPreviousYearNodeComponentBuilder setProfitPreviousYearNodeModule(
        ProfitPreviousYearNodeModule module) {
      this.profitPreviousYearNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProfitPreviousYearNodeComponentImpl
      implements ProfitPreviousYearNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProfitPreviousYearNodeRuleProvider>
        profitPreviousYearNodeRuleProviderMembersInjector;

    private Provider<ProfitPreviousYearNodeRuleProvider> profitPreviousYearNodeRuleProvider;

    private ProfitPreviousYearNodeComponentImpl(ProfitPreviousYearNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProfitPreviousYearNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProfitPreviousYearNodeModule_ProvideUiNodeFactory.create(
                  builder.profitPreviousYearNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProfitPreviousYearNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.profitPreviousYearNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProfitPreviousYearNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.profitPreviousYearNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.profitPreviousYearNodeRuleProviderMembersInjector =
          ProfitPreviousYearNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.profitPreviousYearNodeRuleProvider =
          DoubleCheck.provider(
              ProfitPreviousYearNodeRuleProvider_Factory.create(
                  profitPreviousYearNodeRuleProviderMembersInjector));
    }

    @Override
    public ProfitPreviousYearNodeRuleProvider getProfitPreviousYearNodeRuleProvider() {
      return profitPreviousYearNodeRuleProvider.get();
    }
  }

  private final class BusinessTypeNodeComponentBuilder
      implements BusinessTypeNodeComponent.Builder {
    private BusinessTypeNodeModule businessTypeNodeModule;

    @Override
    public BusinessTypeNodeComponent build() {
      if (businessTypeNodeModule == null) {
        throw new IllegalStateException(
            BusinessTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new BusinessTypeNodeComponentImpl(this);
    }

    @Override
    public BusinessTypeNodeComponentBuilder setBusinessTypeNodeModule(
        BusinessTypeNodeModule module) {
      this.businessTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class BusinessTypeNodeComponentImpl implements BusinessTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<BusinessTypeNodeRuleProvider>
        businessTypeNodeRuleProviderMembersInjector;

    private Provider<BusinessTypeNodeRuleProvider> businessTypeNodeRuleProvider;

    private BusinessTypeNodeComponentImpl(BusinessTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final BusinessTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              BusinessTypeNodeModule_ProvideUiNodeFactory.create(builder.businessTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              BusinessTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.businessTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              BusinessTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.businessTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.businessTypeNodeRuleProviderMembersInjector =
          BusinessTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.businessTypeNodeRuleProvider =
          DoubleCheck.provider(
              BusinessTypeNodeRuleProvider_Factory.create(
                  businessTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public BusinessTypeNodeRuleProvider getBusinessTypeNodeRuleProvider() {
      return businessTypeNodeRuleProvider.get();
    }
  }

  private final class ProfitThisYearNodeComponentBuilder
      implements ProfitThisYearNodeComponent.Builder {
    private ProfitThisYearNodeModule profitThisYearNodeModule;

    @Override
    public ProfitThisYearNodeComponent build() {
      if (profitThisYearNodeModule == null) {
        throw new IllegalStateException(
            ProfitThisYearNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProfitThisYearNodeComponentImpl(this);
    }

    @Override
    public ProfitThisYearNodeComponentBuilder setProfitThisYearNodeModule(
        ProfitThisYearNodeModule module) {
      this.profitThisYearNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProfitThisYearNodeComponentImpl implements ProfitThisYearNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProfitThisYearNodeRuleProvider>
        profitThisYearNodeRuleProviderMembersInjector;

    private Provider<ProfitThisYearNodeRuleProvider> profitThisYearNodeRuleProvider;

    private ProfitThisYearNodeComponentImpl(ProfitThisYearNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProfitThisYearNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProfitThisYearNodeModule_ProvideUiNodeFactory.create(
                  builder.profitThisYearNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProfitThisYearNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.profitThisYearNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProfitThisYearNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.profitThisYearNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.profitThisYearNodeRuleProviderMembersInjector =
          ProfitThisYearNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.profitThisYearNodeRuleProvider =
          DoubleCheck.provider(
              ProfitThisYearNodeRuleProvider_Factory.create(
                  profitThisYearNodeRuleProviderMembersInjector));
    }

    @Override
    public ProfitThisYearNodeRuleProvider getProfitThisYearNodeRuleProvider() {
      return profitThisYearNodeRuleProvider.get();
    }
  }

  private final class SelfEmployedNodeComponentBuilder
      implements SelfEmployedNodeComponent.Builder {
    private SelfEmployedNodeModule selfEmployedNodeModule;

    @Override
    public SelfEmployedNodeComponent build() {
      if (selfEmployedNodeModule == null) {
        throw new IllegalStateException(
            SelfEmployedNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SelfEmployedNodeComponentImpl(this);
    }

    @Override
    public SelfEmployedNodeComponentBuilder setSelfEmployedNodeModule(
        SelfEmployedNodeModule module) {
      this.selfEmployedNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SelfEmployedNodeComponentImpl implements SelfEmployedNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<SelfEmployedNodeRuleProvider>
        selfEmployedNodeRuleProviderMembersInjector;

    private Provider<SelfEmployedNodeRuleProvider> selfEmployedNodeRuleProvider;

    private SelfEmployedNodeComponentImpl(SelfEmployedNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SelfEmployedNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SelfEmployedNodeModule_ProvideUiNodeFactory.create(builder.selfEmployedNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              SelfEmployedNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.selfEmployedNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.selfEmployedNodeRuleProviderMembersInjector =
          SelfEmployedNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.selfEmployedNodeRuleProvider =
          DoubleCheck.provider(
              SelfEmployedNodeRuleProvider_Factory.create(
                  selfEmployedNodeRuleProviderMembersInjector));
    }

    @Override
    public SelfEmployedNodeRuleProvider getSelfEmployedNodeRuleProvider() {
      return selfEmployedNodeRuleProvider.get();
    }
  }

  private final class EmploymentTypeNodeComponentBuilder
      implements EmploymentTypeNodeComponent.Builder {
    private EmploymentTypeNodeModule employmentTypeNodeModule;

    @Override
    public EmploymentTypeNodeComponent build() {
      if (employmentTypeNodeModule == null) {
        throw new IllegalStateException(
            EmploymentTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new EmploymentTypeNodeComponentImpl(this);
    }

    @Override
    public EmploymentTypeNodeComponentBuilder setEmploymentTypeNodeModule(
        EmploymentTypeNodeModule module) {
      this.employmentTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class EmploymentTypeNodeComponentImpl implements EmploymentTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<EmploymentTypeNode> provideEmploymentTypeNodeProvider;

    private Provider<EmploymentTypeChangedRuleImpl> employmentTypeChangedRuleImplProvider;

    private Provider<EmploymentTypeChangedRule> provideEmploymentTypeChangedRuleProvider;

    private MembersInjector<EmploymentTypeNodeRuleProvider>
        employmentTypeNodeRuleProviderMembersInjector;

    private Provider<EmploymentTypeNodeRuleProvider> employmentTypeNodeRuleProvider;

    private EmploymentTypeNodeComponentImpl(EmploymentTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EmploymentTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              EmploymentTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.employmentTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              EmploymentTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.employmentTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              EmploymentTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.employmentTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.provideEmploymentTypeNodeProvider =
          DoubleCheck.provider(
              EmploymentTypeNodeModule_ProvideEmploymentTypeNodeFactory.create(
                  builder.employmentTypeNodeModule));

      this.employmentTypeChangedRuleImplProvider =
          EmploymentTypeChangedRuleImpl_Factory.create(
              MembersInjectors.<EmploymentTypeChangedRuleImpl>noOp(),
              provideEmploymentTypeNodeProvider);

      this.provideEmploymentTypeChangedRuleProvider =
          (Provider) employmentTypeChangedRuleImplProvider;

      this.employmentTypeNodeRuleProviderMembersInjector =
          EmploymentTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              provideEmploymentTypeChangedRuleProvider);

      this.employmentTypeNodeRuleProvider =
          DoubleCheck.provider(
              EmploymentTypeNodeRuleProvider_Factory.create(
                  employmentTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public EmploymentTypeNodeRuleProvider getEmploymentTypeNodeRuleProvider() {
      return employmentTypeNodeRuleProvider.get();
    }
  }

  private final class CurrentEmploymentNodeComponentBuilder
      implements CurrentEmploymentNodeComponent.Builder {
    private CurrentEmploymentNodeModule currentEmploymentNodeModule;

    @Override
    public CurrentEmploymentNodeComponent build() {
      if (currentEmploymentNodeModule == null) {
        throw new IllegalStateException(
            CurrentEmploymentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CurrentEmploymentNodeComponentImpl(this);
    }

    @Override
    public CurrentEmploymentNodeComponentBuilder setCurrentEmploymentNodeModule(
        CurrentEmploymentNodeModule module) {
      this.currentEmploymentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CurrentEmploymentNodeComponentImpl implements CurrentEmploymentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<CurrentEmploymentNodeRuleProvider>
        currentEmploymentNodeRuleProviderMembersInjector;

    private Provider<CurrentEmploymentNodeRuleProvider> currentEmploymentNodeRuleProvider;

    private CurrentEmploymentNodeComponentImpl(CurrentEmploymentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CurrentEmploymentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CurrentEmploymentNodeModule_ProvideUiNodeFactory.create(
                  builder.currentEmploymentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              CurrentEmploymentNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.currentEmploymentNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.currentEmploymentNodeRuleProviderMembersInjector =
          CurrentEmploymentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.currentEmploymentNodeRuleProvider =
          DoubleCheck.provider(
              CurrentEmploymentNodeRuleProvider_Factory.create(
                  currentEmploymentNodeRuleProviderMembersInjector));
    }

    @Override
    public CurrentEmploymentNodeRuleProvider getCurrentEmploymentNodeRuleProvider() {
      return currentEmploymentNodeRuleProvider.get();
    }
  }

  private final class CurrentEmploymentListNodeComponentBuilder
      implements CurrentEmploymentListNodeComponent.Builder {
    private CurrentEmploymentListNodeModule currentEmploymentListNodeModule;

    @Override
    public CurrentEmploymentListNodeComponent build() {
      if (currentEmploymentListNodeModule == null) {
        throw new IllegalStateException(
            CurrentEmploymentListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CurrentEmploymentListNodeComponentImpl(this);
    }

    @Override
    public CurrentEmploymentListNodeComponentBuilder setCurrentEmploymentListNodeModule(
        CurrentEmploymentListNodeModule module) {
      this.currentEmploymentListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CurrentEmploymentListNodeComponentImpl
      implements CurrentEmploymentListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<CurrentEmploymentListNodeRuleProvider>
        currentEmploymentListNodeRuleProviderMembersInjector;

    private Provider<CurrentEmploymentListNodeRuleProvider> currentEmploymentListNodeRuleProvider;

    private CurrentEmploymentListNodeComponentImpl(
        CurrentEmploymentListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CurrentEmploymentListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CurrentEmploymentListNodeModule_ProvideUiNodeFactory.create(
                  builder.currentEmploymentListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.currentEmploymentListNodeRuleProviderMembersInjector =
          CurrentEmploymentListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.currentEmploymentListNodeRuleProvider =
          DoubleCheck.provider(
              CurrentEmploymentListNodeRuleProvider_Factory.create(
                  currentEmploymentListNodeRuleProviderMembersInjector));
    }

    @Override
    public CurrentEmploymentListNodeRuleProvider getCurrentEmploymentListNodeRuleProvider() {
      return currentEmploymentListNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyDisclosureFlagNodeComponentBuilder
      implements ThirdPartyDisclosureFlagNodeComponent.Builder {
    private ThirdPartyDisclosureFlagNodeModule thirdPartyDisclosureFlagNodeModule;

    @Override
    public ThirdPartyDisclosureFlagNodeComponent build() {
      if (thirdPartyDisclosureFlagNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyDisclosureFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyDisclosureFlagNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyDisclosureFlagNodeComponentBuilder setThirdPartyDisclosureFlagNodeModule(
        ThirdPartyDisclosureFlagNodeModule module) {
      this.thirdPartyDisclosureFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyDisclosureFlagNodeComponentImpl
      implements ThirdPartyDisclosureFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ThirdPartyDisclosureFlagNodeRuleProvider>
        thirdPartyDisclosureFlagNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyDisclosureFlagNodeRuleProvider>
        thirdPartyDisclosureFlagNodeRuleProvider;

    private ThirdPartyDisclosureFlagNodeComponentImpl(
        ThirdPartyDisclosureFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyDisclosureFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDisclosureFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyDisclosureFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDisclosureFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyDisclosureFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDisclosureFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.thirdPartyDisclosureFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.thirdPartyDisclosureFlagNodeRuleProviderMembersInjector =
          ThirdPartyDisclosureFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.thirdPartyDisclosureFlagNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyDisclosureFlagNodeRuleProvider_Factory.create(
                  thirdPartyDisclosureFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyDisclosureFlagNodeRuleProvider getThirdPartyDisclosureFlagNodeRuleProvider() {
      return thirdPartyDisclosureFlagNodeRuleProvider.get();
    }
  }

  private final class CreditHistoryNodeComponentBuilder
      implements CreditHistoryNodeComponent.Builder {
    private CreditHistoryNodeModule creditHistoryNodeModule;

    @Override
    public CreditHistoryNodeComponent build() {
      if (creditHistoryNodeModule == null) {
        throw new IllegalStateException(
            CreditHistoryNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditHistoryNodeComponentImpl(this);
    }

    @Override
    public CreditHistoryNodeComponentBuilder setCreditHistoryNodeModule(
        CreditHistoryNodeModule module) {
      this.creditHistoryNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditHistoryNodeComponentImpl implements CreditHistoryNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CreditHistoryNodeRuleProvider>
        creditHistoryNodeRuleProviderMembersInjector;

    private Provider<CreditHistoryNodeRuleProvider> creditHistoryNodeRuleProvider;

    private CreditHistoryNodeComponentImpl(CreditHistoryNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditHistoryNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditHistoryNodeModule_ProvideUiNodeFactory.create(builder.creditHistoryNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditHistoryNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditHistoryNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CreditHistoryNodeModule_ProvideStringUiNodeFactory.create(
                  builder.creditHistoryNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.creditHistoryNodeRuleProviderMembersInjector =
          CreditHistoryNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.creditHistoryNodeRuleProvider =
          DoubleCheck.provider(
              CreditHistoryNodeRuleProvider_Factory.create(
                  creditHistoryNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditHistoryNodeRuleProvider getCreditHistoryNodeRuleProvider() {
      return creditHistoryNodeRuleProvider.get();
    }
  }

  private final class CreditHistoryListNodeComponentBuilder
      implements CreditHistoryListNodeComponent.Builder {
    private CreditHistoryListNodeModule creditHistoryListNodeModule;

    @Override
    public CreditHistoryListNodeComponent build() {
      if (creditHistoryListNodeModule == null) {
        throw new IllegalStateException(
            CreditHistoryListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditHistoryListNodeComponentImpl(this);
    }

    @Override
    public CreditHistoryListNodeComponentBuilder setCreditHistoryListNodeModule(
        CreditHistoryListNodeModule module) {
      this.creditHistoryListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditHistoryListNodeComponentImpl implements CreditHistoryListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<CreditHistoryListNodeRuleProvider>
        creditHistoryListNodeRuleProviderMembersInjector;

    private Provider<CreditHistoryListNodeRuleProvider> creditHistoryListNodeRuleProvider;

    private CreditHistoryListNodeComponentImpl(CreditHistoryListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditHistoryListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditHistoryListNodeModule_ProvideUiNodeFactory.create(
                  builder.creditHistoryListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.creditHistoryListNodeRuleProviderMembersInjector =
          CreditHistoryListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.creditHistoryListNodeRuleProvider =
          DoubleCheck.provider(
              CreditHistoryListNodeRuleProvider_Factory.create(
                  creditHistoryListNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditHistoryListNodeRuleProvider getCreditHistoryListNodeRuleProvider() {
      return creditHistoryListNodeRuleProvider.get();
    }
  }

  private final class LegalActionNodeComponentBuilder implements LegalActionNodeComponent.Builder {
    private LegalActionNodeModule legalActionNodeModule;

    @Override
    public LegalActionNodeComponent build() {
      if (legalActionNodeModule == null) {
        throw new IllegalStateException(
            LegalActionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LegalActionNodeComponentImpl(this);
    }

    @Override
    public LegalActionNodeComponentBuilder setLegalActionNodeModule(LegalActionNodeModule module) {
      this.legalActionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LegalActionNodeComponentImpl implements LegalActionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<StringEnableSiblingRule> stringEnableSiblingRuleProvider;

    @SuppressWarnings("rawtypes")
    private MembersInjector legalActionNodeRuleProviderImplMembersInjector;

    @SuppressWarnings("rawtypes")
    private Provider legalActionNodeRuleProviderImplProvider;

    private Provider<LegalActionNodeRuleProvider> provideLegalActionNodeRuleProvider;

    private LegalActionNodeComponentImpl(LegalActionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LegalActionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LegalActionNodeModule_ProvideUiNodeFactory.create(builder.legalActionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LegalActionNodeModule_ProvideLeafUiNodeFactory.create(builder.legalActionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              LegalActionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.legalActionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.stringEnableSiblingRuleProvider =
          StringEnableSiblingRule_Factory.create(
              MembersInjectors.<StringEnableSiblingRule>noOp(), provideStringUiNodeProvider);

      this.legalActionNodeRuleProviderImplMembersInjector =
          LegalActionNodeRuleProviderImpl_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              stringEnableSiblingRuleProvider);

      this.legalActionNodeRuleProviderImplProvider =
          DoubleCheck.provider(
              LegalActionNodeRuleProviderImpl_Factory.create(
                  legalActionNodeRuleProviderImplMembersInjector));

      this.provideLegalActionNodeRuleProvider = (Provider) legalActionNodeRuleProviderImplProvider;
    }

    @Override
    public LegalActionNodeRuleProvider getLegalActionNodeRuleProvider() {
      return provideLegalActionNodeRuleProvider.get();
    }
  }

  private final class CreditCheckFlagNodeComponentBuilder
      implements CreditCheckFlagNodeComponent.Builder {
    private CreditCheckFlagNodeModule creditCheckFlagNodeModule;

    @Override
    public CreditCheckFlagNodeComponent build() {
      if (creditCheckFlagNodeModule == null) {
        throw new IllegalStateException(
            CreditCheckFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCheckFlagNodeComponentImpl(this);
    }

    @Override
    public CreditCheckFlagNodeComponentBuilder setCreditCheckFlagNodeModule(
        CreditCheckFlagNodeModule module) {
      this.creditCheckFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCheckFlagNodeComponentImpl implements CreditCheckFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<CreditCheckFlagNodeRuleProvider>
        creditCheckFlagNodeRuleProviderMembersInjector;

    private Provider<CreditCheckFlagNodeRuleProvider> creditCheckFlagNodeRuleProvider;

    private CreditCheckFlagNodeComponentImpl(CreditCheckFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCheckFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCheckFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCheckFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditCheckFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditCheckFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              CreditCheckFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.creditCheckFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.creditCheckFlagNodeRuleProviderMembersInjector =
          CreditCheckFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.creditCheckFlagNodeRuleProvider =
          DoubleCheck.provider(
              CreditCheckFlagNodeRuleProvider_Factory.create(
                  creditCheckFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCheckFlagNodeRuleProvider getCreditCheckFlagNodeRuleProvider() {
      return creditCheckFlagNodeRuleProvider.get();
    }
  }

  private final class PersonPrivacyNodeComponentBuilder
      implements PersonPrivacyNodeComponent.Builder {
    private PersonPrivacyNodeModule personPrivacyNodeModule;

    @Override
    public PersonPrivacyNodeComponent build() {
      if (personPrivacyNodeModule == null) {
        throw new IllegalStateException(
            PersonPrivacyNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonPrivacyNodeComponentImpl(this);
    }

    @Override
    public PersonPrivacyNodeComponentBuilder setPersonPrivacyNodeModule(
        PersonPrivacyNodeModule module) {
      this.personPrivacyNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonPrivacyNodeComponentImpl implements PersonPrivacyNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<PersonPrivacyNodeRuleProvider>
        personPrivacyNodeRuleProviderMembersInjector;

    private Provider<PersonPrivacyNodeRuleProvider> personPrivacyNodeRuleProvider;

    private PersonPrivacyNodeComponentImpl(PersonPrivacyNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonPrivacyNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonPrivacyNodeModule_ProvideUiNodeFactory.create(builder.personPrivacyNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PersonPrivacyNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.personPrivacyNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.personPrivacyNodeRuleProviderMembersInjector =
          PersonPrivacyNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.personPrivacyNodeRuleProvider =
          DoubleCheck.provider(
              PersonPrivacyNodeRuleProvider_Factory.create(
                  personPrivacyNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonPrivacyNodeRuleProvider getPersonPrivacyNodeRuleProvider() {
      return personPrivacyNodeRuleProvider.get();
    }
  }

  private final class MovedFromPreviousAddressNodeComponentBuilder
      implements MovedFromPreviousAddressNodeComponent.Builder {
    private MovedFromPreviousAddressNodeModule movedFromPreviousAddressNodeModule;

    @Override
    public MovedFromPreviousAddressNodeComponent build() {
      if (movedFromPreviousAddressNodeModule == null) {
        throw new IllegalStateException(
            MovedFromPreviousAddressNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MovedFromPreviousAddressNodeComponentImpl(this);
    }

    @Override
    public MovedFromPreviousAddressNodeComponentBuilder setMovedFromPreviousAddressNodeModule(
        MovedFromPreviousAddressNodeModule module) {
      this.movedFromPreviousAddressNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MovedFromPreviousAddressNodeComponentImpl
      implements MovedFromPreviousAddressNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<MonthYearNode<?>> provideMonthYearNodeProvider;

    private Provider<MonthYearNotInFutureRuleImpl> monthYearNotInFutureRuleImplProvider;

    private Provider<MonthYearNotInFutureRule> provideMonthYearNotInFutureRuleProvider;

    private Provider<MovedFromPreviousAddressNode> provideMovedFromPreviousAddressNodeProvider;

    private Provider<FromPreviousNoEarlierThanToPreviousRuleImpl>
        fromPreviousNoEarlierThanToPreviousRuleImplProvider;

    private Provider<FromPreviousNoEarlierThanToPreviousRule>
        provideFromPreviousNoEarlierThanToPreviousRuleProvider;

    private MembersInjector<MovedFromPreviousAddressNodeRuleProvider>
        movedFromPreviousAddressNodeRuleProviderMembersInjector;

    private Provider<MovedFromPreviousAddressNodeRuleProvider>
        movedFromPreviousAddressNodeRuleProvider;

    private MovedFromPreviousAddressNodeComponentImpl(
        MovedFromPreviousAddressNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MovedFromPreviousAddressNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MovedFromPreviousAddressNodeModule_ProvideUiNodeFactory.create(
                  builder.movedFromPreviousAddressNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              MovedFromPreviousAddressNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.movedFromPreviousAddressNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideMonthYearNodeProvider =
          DoubleCheck.provider(
              MovedFromPreviousAddressNodeModule_ProvideMonthYearNodeFactory.create(
                  builder.movedFromPreviousAddressNodeModule));

      this.monthYearNotInFutureRuleImplProvider =
          MonthYearNotInFutureRuleImpl_Factory.create(
              MembersInjectors.<MonthYearNotInFutureRuleImpl>noOp(), provideMonthYearNodeProvider);

      this.provideMonthYearNotInFutureRuleProvider =
          (Provider) monthYearNotInFutureRuleImplProvider;

      this.provideMovedFromPreviousAddressNodeProvider =
          DoubleCheck.provider(
              MovedFromPreviousAddressNodeModule_ProvideMovedFromPreviousAddressNodeFactory.create(
                  builder.movedFromPreviousAddressNodeModule));

      this.fromPreviousNoEarlierThanToPreviousRuleImplProvider =
          FromPreviousNoEarlierThanToPreviousRuleImpl_Factory.create(
              MembersInjectors.<FromPreviousNoEarlierThanToPreviousRuleImpl>noOp(),
              provideMovedFromPreviousAddressNodeProvider);

      this.provideFromPreviousNoEarlierThanToPreviousRuleProvider =
          (Provider) fromPreviousNoEarlierThanToPreviousRuleImplProvider;

      this.movedFromPreviousAddressNodeRuleProviderMembersInjector =
          MovedFromPreviousAddressNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideMonthYearNotInFutureRuleProvider,
              provideFromPreviousNoEarlierThanToPreviousRuleProvider);

      this.movedFromPreviousAddressNodeRuleProvider =
          DoubleCheck.provider(
              MovedFromPreviousAddressNodeRuleProvider_Factory.create(
                  movedFromPreviousAddressNodeRuleProviderMembersInjector));
    }

    @Override
    public MovedFromPreviousAddressNodeRuleProvider getMovedFromPreviousAddressNodeRuleProvider() {
      return movedFromPreviousAddressNodeRuleProvider.get();
    }
  }

  private final class ContactAddressNodeComponentBuilder
      implements ContactAddressNodeComponent.Builder {
    private ContactAddressNodeModule contactAddressNodeModule;

    @Override
    public ContactAddressNodeComponent build() {
      if (contactAddressNodeModule == null) {
        throw new IllegalStateException(
            ContactAddressNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ContactAddressNodeComponentImpl(this);
    }

    @Override
    public ContactAddressNodeComponentBuilder setContactAddressNodeModule(
        ContactAddressNodeModule module) {
      this.contactAddressNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ContactAddressNodeComponentImpl implements ContactAddressNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<AddressNode<?>> provideAddressNodeProvider;

    private Provider<UpdateAddressRefListRuleImpl> updateAddressRefListRuleImplProvider;

    private Provider<UpdateAddressRefListRule> provideUpdateAddressRefListRuleProvider;

    private MembersInjector<ContactAddressNodeRuleProvider>
        contactAddressNodeRuleProviderMembersInjector;

    private Provider<ContactAddressNodeRuleProvider> contactAddressNodeRuleProvider;

    private ContactAddressNodeComponentImpl(ContactAddressNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ContactAddressNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ContactAddressNodeModule_ProvideUiNodeFactory.create(
                  builder.contactAddressNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ContactAddressNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.contactAddressNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideAddressNodeProvider =
          DoubleCheck.provider(
              ContactAddressNodeModule_ProvideAddressNodeFactory.create(
                  builder.contactAddressNodeModule));

      this.updateAddressRefListRuleImplProvider =
          UpdateAddressRefListRuleImpl_Factory.create(
              MembersInjectors.<UpdateAddressRefListRuleImpl>noOp(), provideAddressNodeProvider);

      this.provideUpdateAddressRefListRuleProvider =
          (Provider) updateAddressRefListRuleImplProvider;

      this.contactAddressNodeRuleProviderMembersInjector =
          ContactAddressNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideUpdateAddressRefListRuleProvider);

      this.contactAddressNodeRuleProvider =
          DoubleCheck.provider(
              ContactAddressNodeRuleProvider_Factory.create(
                  contactAddressNodeRuleProviderMembersInjector));
    }

    @Override
    public ContactAddressNodeRuleProvider getContactAddressNodeRuleProvider() {
      return contactAddressNodeRuleProvider.get();
    }
  }

  private final class ContactTelephoneNodeComponentBuilder
      implements ContactTelephoneNodeComponent.Builder {
    private ContactTelephoneNodeModule contactTelephoneNodeModule;

    @Override
    public ContactTelephoneNodeComponent build() {
      if (contactTelephoneNodeModule == null) {
        throw new IllegalStateException(
            ContactTelephoneNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ContactTelephoneNodeComponentImpl(this);
    }

    @Override
    public ContactTelephoneNodeComponentBuilder setContactTelephoneNodeModule(
        ContactTelephoneNodeModule module) {
      this.contactTelephoneNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ContactTelephoneNodeComponentImpl implements ContactTelephoneNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<TelephoneNode<?>> provideTelephoneNodeProvider;

    private Provider<TelephoneCompleteRuleImpl> telephoneCompleteRuleImplProvider;

    private Provider<TelephoneCompleteRule> provideTelephoneCompleteRuleProvider;

    private MembersInjector<ContactTelephoneNodeRuleProvider>
        contactTelephoneNodeRuleProviderMembersInjector;

    private Provider<ContactTelephoneNodeRuleProvider> contactTelephoneNodeRuleProvider;

    private ContactTelephoneNodeComponentImpl(ContactTelephoneNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ContactTelephoneNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ContactTelephoneNodeModule_ProvideUiNodeFactory.create(
                  builder.contactTelephoneNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ContactTelephoneNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.contactTelephoneNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideTelephoneNodeProvider =
          DoubleCheck.provider(
              ContactTelephoneNodeModule_ProvideTelephoneNodeFactory.create(
                  builder.contactTelephoneNodeModule));

      this.telephoneCompleteRuleImplProvider =
          TelephoneCompleteRuleImpl_Factory.create(
              MembersInjectors.<TelephoneCompleteRuleImpl>noOp(), provideTelephoneNodeProvider);

      this.provideTelephoneCompleteRuleProvider = (Provider) telephoneCompleteRuleImplProvider;

      this.contactTelephoneNodeRuleProviderMembersInjector =
          ContactTelephoneNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              provideTelephoneCompleteRuleProvider);

      this.contactTelephoneNodeRuleProvider =
          DoubleCheck.provider(
              ContactTelephoneNodeRuleProvider_Factory.create(
                  contactTelephoneNodeRuleProviderMembersInjector));
    }

    @Override
    public ContactTelephoneNodeRuleProvider getContactTelephoneNodeRuleProvider() {
      return contactTelephoneNodeRuleProvider.get();
    }
  }

  private final class ContactEmailNodeComponentBuilder
      implements ContactEmailNodeComponent.Builder {
    private ContactEmailNodeModule contactEmailNodeModule;

    @Override
    public ContactEmailNodeComponent build() {
      if (contactEmailNodeModule == null) {
        throw new IllegalStateException(
            ContactEmailNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ContactEmailNodeComponentImpl(this);
    }

    @Override
    public ContactEmailNodeComponentBuilder setContactEmailNodeModule(
        ContactEmailNodeModule module) {
      this.contactEmailNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ContactEmailNodeComponentImpl implements ContactEmailNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ContactEmailNodeRuleProvider>
        contactEmailNodeRuleProviderMembersInjector;

    private Provider<ContactEmailNodeRuleProvider> contactEmailNodeRuleProvider;

    private ContactEmailNodeComponentImpl(ContactEmailNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ContactEmailNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ContactEmailNodeModule_ProvideUiNodeFactory.create(builder.contactEmailNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ContactEmailNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.contactEmailNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ContactEmailNodeModule_ProvideStringUiNodeFactory.create(
                  builder.contactEmailNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.contactEmailNodeRuleProviderMembersInjector =
          ContactEmailNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.contactEmailNodeRuleProvider =
          DoubleCheck.provider(
              ContactEmailNodeRuleProvider_Factory.create(
                  contactEmailNodeRuleProviderMembersInjector));
    }

    @Override
    public ContactEmailNodeRuleProvider getContactEmailNodeRuleProvider() {
      return contactEmailNodeRuleProvider.get();
    }
  }

  private final class MovedToPreviousAddressNodeComponentBuilder
      implements MovedToPreviousAddressNodeComponent.Builder {
    private MovedToPreviousAddressNodeModule movedToPreviousAddressNodeModule;

    @Override
    public MovedToPreviousAddressNodeComponent build() {
      if (movedToPreviousAddressNodeModule == null) {
        throw new IllegalStateException(
            MovedToPreviousAddressNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MovedToPreviousAddressNodeComponentImpl(this);
    }

    @Override
    public MovedToPreviousAddressNodeComponentBuilder setMovedToPreviousAddressNodeModule(
        MovedToPreviousAddressNodeModule module) {
      this.movedToPreviousAddressNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MovedToPreviousAddressNodeComponentImpl
      implements MovedToPreviousAddressNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<MonthYearNode<?>> provideMonthYearNodeProvider;

    private Provider<MonthYearNotInFutureRuleImpl> monthYearNotInFutureRuleImplProvider;

    private Provider<MonthYearNotInFutureRule> provideMonthYearNotInFutureRuleProvider;

    private MembersInjector<MovedToPreviousAddressNodeRuleProvider>
        movedToPreviousAddressNodeRuleProviderMembersInjector;

    private Provider<MovedToPreviousAddressNodeRuleProvider> movedToPreviousAddressNodeRuleProvider;

    private MovedToPreviousAddressNodeComponentImpl(
        MovedToPreviousAddressNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MovedToPreviousAddressNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MovedToPreviousAddressNodeModule_ProvideUiNodeFactory.create(
                  builder.movedToPreviousAddressNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              MovedToPreviousAddressNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.movedToPreviousAddressNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideMonthYearNodeProvider =
          DoubleCheck.provider(
              MovedToPreviousAddressNodeModule_ProvideMonthYearNodeFactory.create(
                  builder.movedToPreviousAddressNodeModule));

      this.monthYearNotInFutureRuleImplProvider =
          MonthYearNotInFutureRuleImpl_Factory.create(
              MembersInjectors.<MonthYearNotInFutureRuleImpl>noOp(), provideMonthYearNodeProvider);

      this.provideMonthYearNotInFutureRuleProvider =
          (Provider) monthYearNotInFutureRuleImplProvider;

      this.movedToPreviousAddressNodeRuleProviderMembersInjector =
          MovedToPreviousAddressNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideMonthYearNotInFutureRuleProvider);

      this.movedToPreviousAddressNodeRuleProvider =
          DoubleCheck.provider(
              MovedToPreviousAddressNodeRuleProvider_Factory.create(
                  movedToPreviousAddressNodeRuleProviderMembersInjector));
    }

    @Override
    public MovedToPreviousAddressNodeRuleProvider getMovedToPreviousAddressNodeRuleProvider() {
      return movedToPreviousAddressNodeRuleProvider.get();
    }
  }

  private final class MobileNumberNodeComponentBuilder
      implements MobileNumberNodeComponent.Builder {
    private MobileNumberNodeModule mobileNumberNodeModule;

    @Override
    public MobileNumberNodeComponent build() {
      if (mobileNumberNodeModule == null) {
        throw new IllegalStateException(
            MobileNumberNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MobileNumberNodeComponentImpl(this);
    }

    @Override
    public MobileNumberNodeComponentBuilder setMobileNumberNodeModule(
        MobileNumberNodeModule module) {
      this.mobileNumberNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MobileNumberNodeComponentImpl implements MobileNumberNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MobileNumberNodeRuleProvider>
        mobileNumberNodeRuleProviderMembersInjector;

    private Provider<MobileNumberNodeRuleProvider> mobileNumberNodeRuleProvider;

    private MobileNumberNodeComponentImpl(MobileNumberNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MobileNumberNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MobileNumberNodeModule_ProvideUiNodeFactory.create(builder.mobileNumberNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MobileNumberNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mobileNumberNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MobileNumberNodeModule_ProvideStringUiNodeFactory.create(
                  builder.mobileNumberNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.mobileNumberNodeRuleProviderMembersInjector =
          MobileNumberNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.mobileNumberNodeRuleProvider =
          DoubleCheck.provider(
              MobileNumberNodeRuleProvider_Factory.create(
                  mobileNumberNodeRuleProviderMembersInjector));
    }

    @Override
    public MobileNumberNodeRuleProvider getMobileNumberNodeRuleProvider() {
      return mobileNumberNodeRuleProvider.get();
    }
  }

  private final class MovedToCurrentAddressNodeComponentBuilder
      implements MovedToCurrentAddressNodeComponent.Builder {
    private MovedToCurrentAddressNodeModule movedToCurrentAddressNodeModule;

    @Override
    public MovedToCurrentAddressNodeComponent build() {
      if (movedToCurrentAddressNodeModule == null) {
        throw new IllegalStateException(
            MovedToCurrentAddressNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MovedToCurrentAddressNodeComponentImpl(this);
    }

    @Override
    public MovedToCurrentAddressNodeComponentBuilder setMovedToCurrentAddressNodeModule(
        MovedToCurrentAddressNodeModule module) {
      this.movedToCurrentAddressNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MovedToCurrentAddressNodeComponentImpl
      implements MovedToCurrentAddressNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<MonthYearNode<?>> provideMonthYearNodeProvider;

    private Provider<MonthYearNotInFutureRuleImpl> monthYearNotInFutureRuleImplProvider;

    private Provider<MonthYearNotInFutureRule> provideMonthYearNotInFutureRuleProvider;

    private Provider<MovedToCurrentAddressNode> provideMovedToCurrentAddressNodeProvider;

    private Provider<ToCurrentNoEarlierThanToPreviousRuleImpl>
        toCurrentNoEarlierThanToPreviousRuleImplProvider;

    private Provider<ToCurrentNoEarlierThanToPreviousRule>
        provideToCurrentNoEarlierThanToPreviousRuleProvider;

    private Provider<ToCurrentNoEarlierThanFromPreviousRuleImpl>
        toCurrentNoEarlierThanFromPreviousRuleImplProvider;

    private Provider<ToCurrentNoEarlierThanFromPreviousRule>
        provideToCurrentNoEarlierThanFromPreviousRuleProvider;

    private MembersInjector<MovedToCurrentAddressNodeRuleProvider>
        movedToCurrentAddressNodeRuleProviderMembersInjector;

    private Provider<MovedToCurrentAddressNodeRuleProvider> movedToCurrentAddressNodeRuleProvider;

    private MovedToCurrentAddressNodeComponentImpl(
        MovedToCurrentAddressNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MovedToCurrentAddressNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MovedToCurrentAddressNodeModule_ProvideUiNodeFactory.create(
                  builder.movedToCurrentAddressNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              MovedToCurrentAddressNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.movedToCurrentAddressNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideMonthYearNodeProvider =
          DoubleCheck.provider(
              MovedToCurrentAddressNodeModule_ProvideMonthYearNodeFactory.create(
                  builder.movedToCurrentAddressNodeModule));

      this.monthYearNotInFutureRuleImplProvider =
          MonthYearNotInFutureRuleImpl_Factory.create(
              MembersInjectors.<MonthYearNotInFutureRuleImpl>noOp(), provideMonthYearNodeProvider);

      this.provideMonthYearNotInFutureRuleProvider =
          (Provider) monthYearNotInFutureRuleImplProvider;

      this.provideMovedToCurrentAddressNodeProvider =
          DoubleCheck.provider(
              MovedToCurrentAddressNodeModule_ProvideMovedToCurrentAddressNodeFactory.create(
                  builder.movedToCurrentAddressNodeModule));

      this.toCurrentNoEarlierThanToPreviousRuleImplProvider =
          ToCurrentNoEarlierThanToPreviousRuleImpl_Factory.create(
              MembersInjectors.<ToCurrentNoEarlierThanToPreviousRuleImpl>noOp(),
              provideMovedToCurrentAddressNodeProvider);

      this.provideToCurrentNoEarlierThanToPreviousRuleProvider =
          (Provider) toCurrentNoEarlierThanToPreviousRuleImplProvider;

      this.toCurrentNoEarlierThanFromPreviousRuleImplProvider =
          ToCurrentNoEarlierThanFromPreviousRuleImpl_Factory.create(
              MembersInjectors.<ToCurrentNoEarlierThanFromPreviousRuleImpl>noOp(),
              provideMovedToCurrentAddressNodeProvider);

      this.provideToCurrentNoEarlierThanFromPreviousRuleProvider =
          (Provider) toCurrentNoEarlierThanFromPreviousRuleImplProvider;

      this.movedToCurrentAddressNodeRuleProviderMembersInjector =
          MovedToCurrentAddressNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideMonthYearNotInFutureRuleProvider,
              provideToCurrentNoEarlierThanToPreviousRuleProvider,
              provideToCurrentNoEarlierThanFromPreviousRuleProvider);

      this.movedToCurrentAddressNodeRuleProvider =
          DoubleCheck.provider(
              MovedToCurrentAddressNodeRuleProvider_Factory.create(
                  movedToCurrentAddressNodeRuleProviderMembersInjector));
    }

    @Override
    public MovedToCurrentAddressNodeRuleProvider getMovedToCurrentAddressNodeRuleProvider() {
      return movedToCurrentAddressNodeRuleProvider.get();
    }
  }

  private final class PersonHomePhoneNodeComponentBuilder
      implements PersonHomePhoneNodeComponent.Builder {
    private PersonHomePhoneNodeModule personHomePhoneNodeModule;

    @Override
    public PersonHomePhoneNodeComponent build() {
      if (personHomePhoneNodeModule == null) {
        throw new IllegalStateException(
            PersonHomePhoneNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonHomePhoneNodeComponentImpl(this);
    }

    @Override
    public PersonHomePhoneNodeComponentBuilder setPersonHomePhoneNodeModule(
        PersonHomePhoneNodeModule module) {
      this.personHomePhoneNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonHomePhoneNodeComponentImpl implements PersonHomePhoneNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<TelephoneNode<?>> provideTelephoneNodeProvider;

    private Provider<TelephoneCompleteRuleImpl> telephoneCompleteRuleImplProvider;

    private Provider<TelephoneCompleteRule> provideTelephoneCompleteRuleProvider;

    private MembersInjector<PersonHomePhoneNodeRuleProvider>
        personHomePhoneNodeRuleProviderMembersInjector;

    private Provider<PersonHomePhoneNodeRuleProvider> personHomePhoneNodeRuleProvider;

    private PersonHomePhoneNodeComponentImpl(PersonHomePhoneNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonHomePhoneNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonHomePhoneNodeModule_ProvideUiNodeFactory.create(
                  builder.personHomePhoneNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PersonHomePhoneNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.personHomePhoneNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideTelephoneNodeProvider =
          DoubleCheck.provider(
              PersonHomePhoneNodeModule_ProvideTelephoneNodeFactory.create(
                  builder.personHomePhoneNodeModule));

      this.telephoneCompleteRuleImplProvider =
          TelephoneCompleteRuleImpl_Factory.create(
              MembersInjectors.<TelephoneCompleteRuleImpl>noOp(), provideTelephoneNodeProvider);

      this.provideTelephoneCompleteRuleProvider = (Provider) telephoneCompleteRuleImplProvider;

      this.personHomePhoneNodeRuleProviderMembersInjector =
          PersonHomePhoneNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              provideTelephoneCompleteRuleProvider);

      this.personHomePhoneNodeRuleProvider =
          DoubleCheck.provider(
              PersonHomePhoneNodeRuleProvider_Factory.create(
                  personHomePhoneNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonHomePhoneNodeRuleProvider getPersonHomePhoneNodeRuleProvider() {
      return personHomePhoneNodeRuleProvider.get();
    }
  }

  private final class PersonContactNodeComponentBuilder
      implements PersonContactNodeComponent.Builder {
    private PersonContactNodeModule personContactNodeModule;

    @Override
    public PersonContactNodeComponent build() {
      if (personContactNodeModule == null) {
        throw new IllegalStateException(
            PersonContactNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonContactNodeComponentImpl(this);
    }

    @Override
    public PersonContactNodeComponentBuilder setPersonContactNodeModule(
        PersonContactNodeModule module) {
      this.personContactNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonContactNodeComponentImpl implements PersonContactNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<PersonContactNode> providePersonContactNodeProvider;

    private Provider<HomeOrWorkPhoneRequiredRuleImpl> homeOrWorkPhoneRequiredRuleImplProvider;

    private Provider<HomeOrWorkPhoneRequiredRule> provideHomeOrWorkPhoneRequiredRuleProvider;

    private MembersInjector<PersonContactNodeRuleProvider>
        personContactNodeRuleProviderMembersInjector;

    private Provider<PersonContactNodeRuleProvider> personContactNodeRuleProvider;

    private PersonContactNodeComponentImpl(PersonContactNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonContactNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonContactNodeModule_ProvideUiNodeFactory.create(builder.personContactNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PersonContactNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.personContactNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.providePersonContactNodeProvider =
          DoubleCheck.provider(
              PersonContactNodeModule_ProvidePersonContactNodeFactory.create(
                  builder.personContactNodeModule));

      this.homeOrWorkPhoneRequiredRuleImplProvider =
          HomeOrWorkPhoneRequiredRuleImpl_Factory.create(
              MembersInjectors.<HomeOrWorkPhoneRequiredRuleImpl>noOp(),
              providePersonContactNodeProvider);

      this.provideHomeOrWorkPhoneRequiredRuleProvider =
          (Provider) homeOrWorkPhoneRequiredRuleImplProvider;

      this.personContactNodeRuleProviderMembersInjector =
          PersonContactNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideHomeOrWorkPhoneRequiredRuleProvider);

      this.personContactNodeRuleProvider =
          DoubleCheck.provider(
              PersonContactNodeRuleProvider_Factory.create(
                  personContactNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonContactNodeRuleProvider getPersonContactNodeRuleProvider() {
      return personContactNodeRuleProvider.get();
    }
  }

  private final class PreviousEmploymentNodeComponentBuilder
      implements PreviousEmploymentNodeComponent.Builder {
    private PreviousEmploymentNodeModule previousEmploymentNodeModule;

    @Override
    public PreviousEmploymentNodeComponent build() {
      if (previousEmploymentNodeModule == null) {
        throw new IllegalStateException(
            PreviousEmploymentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PreviousEmploymentNodeComponentImpl(this);
    }

    @Override
    public PreviousEmploymentNodeComponentBuilder setPreviousEmploymentNodeModule(
        PreviousEmploymentNodeModule module) {
      this.previousEmploymentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PreviousEmploymentNodeComponentImpl
      implements PreviousEmploymentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<PreviousEmploymentNodeRuleProvider>
        previousEmploymentNodeRuleProviderMembersInjector;

    private Provider<PreviousEmploymentNodeRuleProvider> previousEmploymentNodeRuleProvider;

    private PreviousEmploymentNodeComponentImpl(PreviousEmploymentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PreviousEmploymentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PreviousEmploymentNodeModule_ProvideUiNodeFactory.create(
                  builder.previousEmploymentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PreviousEmploymentNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.previousEmploymentNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.previousEmploymentNodeRuleProviderMembersInjector =
          PreviousEmploymentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.previousEmploymentNodeRuleProvider =
          DoubleCheck.provider(
              PreviousEmploymentNodeRuleProvider_Factory.create(
                  previousEmploymentNodeRuleProviderMembersInjector));
    }

    @Override
    public PreviousEmploymentNodeRuleProvider getPreviousEmploymentNodeRuleProvider() {
      return previousEmploymentNodeRuleProvider.get();
    }
  }

  private final class PreviousEmploymentListNodeComponentBuilder
      implements PreviousEmploymentListNodeComponent.Builder {
    private PreviousEmploymentListNodeModule previousEmploymentListNodeModule;

    @Override
    public PreviousEmploymentListNodeComponent build() {
      if (previousEmploymentListNodeModule == null) {
        throw new IllegalStateException(
            PreviousEmploymentListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PreviousEmploymentListNodeComponentImpl(this);
    }

    @Override
    public PreviousEmploymentListNodeComponentBuilder setPreviousEmploymentListNodeModule(
        PreviousEmploymentListNodeModule module) {
      this.previousEmploymentListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PreviousEmploymentListNodeComponentImpl
      implements PreviousEmploymentListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<PreviousEmploymentListNodeRuleProvider>
        previousEmploymentListNodeRuleProviderMembersInjector;

    private Provider<PreviousEmploymentListNodeRuleProvider> previousEmploymentListNodeRuleProvider;

    private PreviousEmploymentListNodeComponentImpl(
        PreviousEmploymentListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PreviousEmploymentListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PreviousEmploymentListNodeModule_ProvideUiNodeFactory.create(
                  builder.previousEmploymentListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.previousEmploymentListNodeRuleProviderMembersInjector =
          PreviousEmploymentListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.previousEmploymentListNodeRuleProvider =
          DoubleCheck.provider(
              PreviousEmploymentListNodeRuleProvider_Factory.create(
                  previousEmploymentListNodeRuleProviderMembersInjector));
    }

    @Override
    public PreviousEmploymentListNodeRuleProvider getPreviousEmploymentListNodeRuleProvider() {
      return previousEmploymentListNodeRuleProvider.get();
    }
  }

  private final class TrustRegistrationDateNodeComponentBuilder
      implements TrustRegistrationDateNodeComponent.Builder {
    private TrustRegistrationDateNodeModule trustRegistrationDateNodeModule;

    @Override
    public TrustRegistrationDateNodeComponent build() {
      if (trustRegistrationDateNodeModule == null) {
        throw new IllegalStateException(
            TrustRegistrationDateNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustRegistrationDateNodeComponentImpl(this);
    }

    @Override
    public TrustRegistrationDateNodeComponentBuilder setTrustRegistrationDateNodeModule(
        TrustRegistrationDateNodeModule module) {
      this.trustRegistrationDateNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustRegistrationDateNodeComponentImpl
      implements TrustRegistrationDateNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<TrustRegistrationDateNodeRuleProvider>
        trustRegistrationDateNodeRuleProviderMembersInjector;

    private Provider<TrustRegistrationDateNodeRuleProvider> trustRegistrationDateNodeRuleProvider;

    private TrustRegistrationDateNodeComponentImpl(
        TrustRegistrationDateNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustRegistrationDateNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustRegistrationDateNodeModule_ProvideUiNodeFactory.create(
                  builder.trustRegistrationDateNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TrustRegistrationDateNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.trustRegistrationDateNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              TrustRegistrationDateNodeModule_ProvideStringUiNodeFactory.create(
                  builder.trustRegistrationDateNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.trustRegistrationDateNodeRuleProviderMembersInjector =
          TrustRegistrationDateNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.trustRegistrationDateNodeRuleProvider =
          DoubleCheck.provider(
              TrustRegistrationDateNodeRuleProvider_Factory.create(
                  trustRegistrationDateNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustRegistrationDateNodeRuleProvider getTrustRegistrationDateNodeRuleProvider() {
      return trustRegistrationDateNodeRuleProvider.get();
    }
  }

  private final class TrustTypeNodeComponentBuilder implements TrustTypeNodeComponent.Builder {
    private TrustTypeNodeModule trustTypeNodeModule;

    @Override
    public TrustTypeNodeComponent build() {
      if (trustTypeNodeModule == null) {
        throw new IllegalStateException(
            TrustTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustTypeNodeComponentImpl(this);
    }

    @Override
    public TrustTypeNodeComponentBuilder setTrustTypeNodeModule(TrustTypeNodeModule module) {
      this.trustTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustTypeNodeComponentImpl implements TrustTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<TrustTypeNode> provideTrustTypeNodeProvider;

    private Provider<TrustTypeChangedRuleImpl> trustTypeChangedRuleImplProvider;

    private Provider<TrustTypeChangedRule> provideTrustTypeChangedRuleProvider;

    private MembersInjector<TrustTypeNodeRuleProvider> trustTypeNodeRuleProviderMembersInjector;

    private Provider<TrustTypeNodeRuleProvider> trustTypeNodeRuleProvider;

    private TrustTypeNodeComponentImpl(TrustTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustTypeNodeModule_ProvideUiNodeFactory.create(builder.trustTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TrustTypeNodeModule_ProvideLeafUiNodeFactory.create(builder.trustTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              TrustTypeNodeModule_ProvideStringUiNodeFactory.create(builder.trustTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.provideTrustTypeNodeProvider =
          DoubleCheck.provider(
              TrustTypeNodeModule_ProvideTrustTypeNodeFactory.create(builder.trustTypeNodeModule));

      this.trustTypeChangedRuleImplProvider =
          TrustTypeChangedRuleImpl_Factory.create(
              MembersInjectors.<TrustTypeChangedRuleImpl>noOp(), provideTrustTypeNodeProvider);

      this.provideTrustTypeChangedRuleProvider = (Provider) trustTypeChangedRuleImplProvider;

      this.trustTypeNodeRuleProviderMembersInjector =
          TrustTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              provideTrustTypeChangedRuleProvider);

      this.trustTypeNodeRuleProvider =
          DoubleCheck.provider(
              TrustTypeNodeRuleProvider_Factory.create(trustTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustTypeNodeRuleProvider getTrustTypeNodeRuleProvider() {
      return trustTypeNodeRuleProvider.get();
    }
  }

  private final class TrustSettlorNotRequiredReasonNodeComponentBuilder
      implements TrustSettlorNotRequiredReasonNodeComponent.Builder {
    private TrustSettlorNotRequiredReasonNodeModule trustSettlorNotRequiredReasonNodeModule;

    @Override
    public TrustSettlorNotRequiredReasonNodeComponent build() {
      if (trustSettlorNotRequiredReasonNodeModule == null) {
        throw new IllegalStateException(
            TrustSettlorNotRequiredReasonNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustSettlorNotRequiredReasonNodeComponentImpl(this);
    }

    @Override
    public TrustSettlorNotRequiredReasonNodeComponentBuilder
        setTrustSettlorNotRequiredReasonNodeModule(TrustSettlorNotRequiredReasonNodeModule module) {
      this.trustSettlorNotRequiredReasonNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustSettlorNotRequiredReasonNodeComponentImpl
      implements TrustSettlorNotRequiredReasonNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<TrustSettlorNotRequiredReasonNodeRuleProvider>
        trustSettlorNotRequiredReasonNodeRuleProviderMembersInjector;

    private Provider<TrustSettlorNotRequiredReasonNodeRuleProvider>
        trustSettlorNotRequiredReasonNodeRuleProvider;

    private TrustSettlorNotRequiredReasonNodeComponentImpl(
        TrustSettlorNotRequiredReasonNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustSettlorNotRequiredReasonNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustSettlorNotRequiredReasonNodeModule_ProvideUiNodeFactory.create(
                  builder.trustSettlorNotRequiredReasonNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TrustSettlorNotRequiredReasonNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.trustSettlorNotRequiredReasonNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              TrustSettlorNotRequiredReasonNodeModule_ProvideStringUiNodeFactory.create(
                  builder.trustSettlorNotRequiredReasonNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.trustSettlorNotRequiredReasonNodeRuleProviderMembersInjector =
          TrustSettlorNotRequiredReasonNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.trustSettlorNotRequiredReasonNodeRuleProvider =
          DoubleCheck.provider(
              TrustSettlorNotRequiredReasonNodeRuleProvider_Factory.create(
                  trustSettlorNotRequiredReasonNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustSettlorNotRequiredReasonNodeRuleProvider
        getTrustSettlorNotRequiredReasonNodeRuleProvider() {
      return trustSettlorNotRequiredReasonNodeRuleProvider.get();
    }
  }

  private final class TrustIndustryNodeComponentBuilder
      implements TrustIndustryNodeComponent.Builder {
    private TrustIndustryNodeModule trustIndustryNodeModule;

    @Override
    public TrustIndustryNodeComponent build() {
      if (trustIndustryNodeModule == null) {
        throw new IllegalStateException(
            TrustIndustryNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustIndustryNodeComponentImpl(this);
    }

    @Override
    public TrustIndustryNodeComponentBuilder setTrustIndustryNodeModule(
        TrustIndustryNodeModule module) {
      this.trustIndustryNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustIndustryNodeComponentImpl implements TrustIndustryNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<TrustIndustryNodeRuleProvider>
        trustIndustryNodeRuleProviderMembersInjector;

    private Provider<TrustIndustryNodeRuleProvider> trustIndustryNodeRuleProvider;

    private TrustIndustryNodeComponentImpl(TrustIndustryNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustIndustryNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustIndustryNodeModule_ProvideUiNodeFactory.create(builder.trustIndustryNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TrustIndustryNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.trustIndustryNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              TrustIndustryNodeModule_ProvideStringUiNodeFactory.create(
                  builder.trustIndustryNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.trustIndustryNodeRuleProviderMembersInjector =
          TrustIndustryNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.trustIndustryNodeRuleProvider =
          DoubleCheck.provider(
              TrustIndustryNodeRuleProvider_Factory.create(
                  trustIndustryNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustIndustryNodeRuleProvider getTrustIndustryNodeRuleProvider() {
      return trustIndustryNodeRuleProvider.get();
    }
  }

  private final class TrustAddressNodeComponentBuilder
      implements TrustAddressNodeComponent.Builder {
    private TrustAddressNodeModule trustAddressNodeModule;

    @Override
    public TrustAddressNodeComponent build() {
      if (trustAddressNodeModule == null) {
        throw new IllegalStateException(
            TrustAddressNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustAddressNodeComponentImpl(this);
    }

    @Override
    public TrustAddressNodeComponentBuilder setTrustAddressNodeModule(
        TrustAddressNodeModule module) {
      this.trustAddressNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustAddressNodeComponentImpl implements TrustAddressNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<AddressNode<?>> provideAddressNodeProvider;

    private Provider<UpdateAddressRefListRuleImpl> updateAddressRefListRuleImplProvider;

    private Provider<UpdateAddressRefListRule> provideUpdateAddressRefListRuleProvider;

    private MembersInjector<TrustAddressNodeRuleProvider>
        trustAddressNodeRuleProviderMembersInjector;

    private Provider<TrustAddressNodeRuleProvider> trustAddressNodeRuleProvider;

    private TrustAddressNodeComponentImpl(TrustAddressNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustAddressNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustAddressNodeModule_ProvideUiNodeFactory.create(builder.trustAddressNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              TrustAddressNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.trustAddressNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideAddressNodeProvider =
          DoubleCheck.provider(
              TrustAddressNodeModule_ProvideAddressNodeFactory.create(
                  builder.trustAddressNodeModule));

      this.updateAddressRefListRuleImplProvider =
          UpdateAddressRefListRuleImpl_Factory.create(
              MembersInjectors.<UpdateAddressRefListRuleImpl>noOp(), provideAddressNodeProvider);

      this.provideUpdateAddressRefListRuleProvider =
          (Provider) updateAddressRefListRuleImplProvider;

      this.trustAddressNodeRuleProviderMembersInjector =
          TrustAddressNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideUpdateAddressRefListRuleProvider);

      this.trustAddressNodeRuleProvider =
          DoubleCheck.provider(
              TrustAddressNodeRuleProvider_Factory.create(
                  trustAddressNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustAddressNodeRuleProvider getTrustAddressNodeRuleProvider() {
      return trustAddressNodeRuleProvider.get();
    }
  }

  private final class SelectAccountHolderFlagNodeComponentBuilder
      implements SelectAccountHolderFlagNodeComponent.Builder {
    private SelectAccountHolderFlagNodeModule selectAccountHolderFlagNodeModule;

    @Override
    public SelectAccountHolderFlagNodeComponent build() {
      if (selectAccountHolderFlagNodeModule == null) {
        throw new IllegalStateException(
            SelectAccountHolderFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SelectAccountHolderFlagNodeComponentImpl(this);
    }

    @Override
    public SelectAccountHolderFlagNodeComponentBuilder setSelectAccountHolderFlagNodeModule(
        SelectAccountHolderFlagNodeModule module) {
      this.selectAccountHolderFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SelectAccountHolderFlagNodeComponentImpl
      implements SelectAccountHolderFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<SelectAccountHolderFlagNodeRuleProvider>
        selectAccountHolderFlagNodeRuleProviderMembersInjector;

    private Provider<SelectAccountHolderFlagNodeRuleProvider>
        selectAccountHolderFlagNodeRuleProvider;

    private SelectAccountHolderFlagNodeComponentImpl(
        SelectAccountHolderFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SelectAccountHolderFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SelectAccountHolderFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.selectAccountHolderFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SelectAccountHolderFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.selectAccountHolderFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              SelectAccountHolderFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.selectAccountHolderFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.selectAccountHolderFlagNodeRuleProviderMembersInjector =
          SelectAccountHolderFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.selectAccountHolderFlagNodeRuleProvider =
          DoubleCheck.provider(
              SelectAccountHolderFlagNodeRuleProvider_Factory.create(
                  selectAccountHolderFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public SelectAccountHolderFlagNodeRuleProvider getSelectAccountHolderFlagNodeRuleProvider() {
      return selectAccountHolderFlagNodeRuleProvider.get();
    }
  }

  private final class AccountHolderReferenceNodeComponentBuilder
      implements AccountHolderReferenceNodeComponent.Builder {
    private AccountHolderReferenceNodeModule accountHolderReferenceNodeModule;

    @Override
    public AccountHolderReferenceNodeComponent build() {
      if (accountHolderReferenceNodeModule == null) {
        throw new IllegalStateException(
            AccountHolderReferenceNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccountHolderReferenceNodeComponentImpl(this);
    }

    @Override
    public AccountHolderReferenceNodeComponentBuilder setAccountHolderReferenceNodeModule(
        AccountHolderReferenceNodeModule module) {
      this.accountHolderReferenceNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccountHolderReferenceNodeComponentImpl
      implements AccountHolderReferenceNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private MembersInjector<NodeReferenceChangeRule> nodeReferenceChangeRuleMembersInjector;

    private Provider<ReferenceUiNode<?>> provideReferenceUiNodeProvider;

    private Provider<NodeReferenceChangeRule> nodeReferenceChangeRuleProvider;

    private MembersInjector<AccountHolderReferenceNodeRuleProvider>
        accountHolderReferenceNodeRuleProviderMembersInjector;

    private Provider<AccountHolderReferenceNodeRuleProvider> accountHolderReferenceNodeRuleProvider;

    private AccountHolderReferenceNodeComponentImpl(
        AccountHolderReferenceNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccountHolderReferenceNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccountHolderReferenceNodeModule_ProvideUiNodeFactory.create(
                  builder.accountHolderReferenceNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AccountHolderReferenceNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.accountHolderReferenceNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.nodeReferenceChangeRuleMembersInjector =
          NodeReferenceChangeRule_MembersInjector.create(
              DaggerDefaultProfileComponent.this.nodeReferenceRegistryProvider);

      this.provideReferenceUiNodeProvider =
          DoubleCheck.provider(
              AccountHolderReferenceNodeModule_ProvideReferenceUiNodeFactory.create(
                  builder.accountHolderReferenceNodeModule));

      this.nodeReferenceChangeRuleProvider =
          NodeReferenceChangeRule_Factory.create(
              nodeReferenceChangeRuleMembersInjector, provideReferenceUiNodeProvider);

      this.accountHolderReferenceNodeRuleProviderMembersInjector =
          AccountHolderReferenceNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              nodeReferenceChangeRuleProvider);

      this.accountHolderReferenceNodeRuleProvider =
          DoubleCheck.provider(
              AccountHolderReferenceNodeRuleProvider_Factory.create(
                  accountHolderReferenceNodeRuleProviderMembersInjector));
    }

    @Override
    public AccountHolderReferenceNodeRuleProvider getAccountHolderReferenceNodeRuleProvider() {
      return accountHolderReferenceNodeRuleProvider.get();
    }
  }

  private final class SelectAccountHolderNodeComponentBuilder
      implements SelectAccountHolderNodeComponent.Builder {
    private SelectAccountHolderNodeModule selectAccountHolderNodeModule;

    @Override
    public SelectAccountHolderNodeComponent build() {
      if (selectAccountHolderNodeModule == null) {
        throw new IllegalStateException(
            SelectAccountHolderNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SelectAccountHolderNodeComponentImpl(this);
    }

    @Override
    public SelectAccountHolderNodeComponentBuilder setSelectAccountHolderNodeModule(
        SelectAccountHolderNodeModule module) {
      this.selectAccountHolderNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SelectAccountHolderNodeComponentImpl
      implements SelectAccountHolderNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<SelectAccountHolderNodeRuleProvider>
        selectAccountHolderNodeRuleProviderMembersInjector;

    private Provider<SelectAccountHolderNodeRuleProvider> selectAccountHolderNodeRuleProvider;

    private SelectAccountHolderNodeComponentImpl(SelectAccountHolderNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SelectAccountHolderNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SelectAccountHolderNodeModule_ProvideUiNodeFactory.create(
                  builder.selectAccountHolderNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              SelectAccountHolderNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.selectAccountHolderNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.selectAccountHolderNodeRuleProviderMembersInjector =
          SelectAccountHolderNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.selectAccountHolderNodeRuleProvider =
          DoubleCheck.provider(
              SelectAccountHolderNodeRuleProvider_Factory.create(
                  selectAccountHolderNodeRuleProviderMembersInjector));
    }

    @Override
    public SelectAccountHolderNodeRuleProvider getSelectAccountHolderNodeRuleProvider() {
      return selectAccountHolderNodeRuleProvider.get();
    }
  }

  private final class TrustBeneficiaryListNodeComponentBuilder
      implements TrustBeneficiaryListNodeComponent.Builder {
    private TrustBeneficiaryListNodeModule trustBeneficiaryListNodeModule;

    @Override
    public TrustBeneficiaryListNodeComponent build() {
      if (trustBeneficiaryListNodeModule == null) {
        throw new IllegalStateException(
            TrustBeneficiaryListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustBeneficiaryListNodeComponentImpl(this);
    }

    @Override
    public TrustBeneficiaryListNodeComponentBuilder setTrustBeneficiaryListNodeModule(
        TrustBeneficiaryListNodeModule module) {
      this.trustBeneficiaryListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustBeneficiaryListNodeComponentImpl
      implements TrustBeneficiaryListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<TrustBeneficiaryListNodeRuleProvider>
        trustBeneficiaryListNodeRuleProviderMembersInjector;

    private Provider<TrustBeneficiaryListNodeRuleProvider> trustBeneficiaryListNodeRuleProvider;

    private TrustBeneficiaryListNodeComponentImpl(
        TrustBeneficiaryListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustBeneficiaryListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustBeneficiaryListNodeModule_ProvideUiNodeFactory.create(
                  builder.trustBeneficiaryListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.trustBeneficiaryListNodeRuleProviderMembersInjector =
          TrustBeneficiaryListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.trustBeneficiaryListNodeRuleProvider =
          DoubleCheck.provider(
              TrustBeneficiaryListNodeRuleProvider_Factory.create(
                  trustBeneficiaryListNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustBeneficiaryListNodeRuleProvider getTrustBeneficiaryListNodeRuleProvider() {
      return trustBeneficiaryListNodeRuleProvider.get();
    }
  }

  private final class TrustNameNodeComponentBuilder implements TrustNameNodeComponent.Builder {
    private TrustNameNodeModule trustNameNodeModule;

    @Override
    public TrustNameNodeComponent build() {
      if (trustNameNodeModule == null) {
        throw new IllegalStateException(
            TrustNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustNameNodeComponentImpl(this);
    }

    @Override
    public TrustNameNodeComponentBuilder setTrustNameNodeModule(TrustNameNodeModule module) {
      this.trustNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustNameNodeComponentImpl implements TrustNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<TrustNameNodeRuleProvider> trustNameNodeRuleProviderMembersInjector;

    private Provider<TrustNameNodeRuleProvider> trustNameNodeRuleProvider;

    private TrustNameNodeComponentImpl(TrustNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustNameNodeModule_ProvideUiNodeFactory.create(builder.trustNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TrustNameNodeModule_ProvideLeafUiNodeFactory.create(builder.trustNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              TrustNameNodeModule_ProvideStringUiNodeFactory.create(builder.trustNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.trustNameNodeRuleProviderMembersInjector =
          TrustNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.trustNameNodeRuleProvider =
          DoubleCheck.provider(
              TrustNameNodeRuleProvider_Factory.create(trustNameNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustNameNodeRuleProvider getTrustNameNodeRuleProvider() {
      return trustNameNodeRuleProvider.get();
    }
  }

  private final class TrustBeneficiaryClassNodeComponentBuilder
      implements TrustBeneficiaryClassNodeComponent.Builder {
    private TrustBeneficiaryClassNodeModule trustBeneficiaryClassNodeModule;

    @Override
    public TrustBeneficiaryClassNodeComponent build() {
      if (trustBeneficiaryClassNodeModule == null) {
        throw new IllegalStateException(
            TrustBeneficiaryClassNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustBeneficiaryClassNodeComponentImpl(this);
    }

    @Override
    public TrustBeneficiaryClassNodeComponentBuilder setTrustBeneficiaryClassNodeModule(
        TrustBeneficiaryClassNodeModule module) {
      this.trustBeneficiaryClassNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustBeneficiaryClassNodeComponentImpl
      implements TrustBeneficiaryClassNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<TrustBeneficiaryClassNodeRuleProvider>
        trustBeneficiaryClassNodeRuleProviderMembersInjector;

    private Provider<TrustBeneficiaryClassNodeRuleProvider> trustBeneficiaryClassNodeRuleProvider;

    private TrustBeneficiaryClassNodeComponentImpl(
        TrustBeneficiaryClassNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustBeneficiaryClassNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustBeneficiaryClassNodeModule_ProvideUiNodeFactory.create(
                  builder.trustBeneficiaryClassNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TrustBeneficiaryClassNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.trustBeneficiaryClassNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              TrustBeneficiaryClassNodeModule_ProvideStringUiNodeFactory.create(
                  builder.trustBeneficiaryClassNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.trustBeneficiaryClassNodeRuleProviderMembersInjector =
          TrustBeneficiaryClassNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.trustBeneficiaryClassNodeRuleProvider =
          DoubleCheck.provider(
              TrustBeneficiaryClassNodeRuleProvider_Factory.create(
                  trustBeneficiaryClassNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustBeneficiaryClassNodeRuleProvider getTrustBeneficiaryClassNodeRuleProvider() {
      return trustBeneficiaryClassNodeRuleProvider.get();
    }
  }

  private final class TrustBeneficiaryClassListNodeComponentBuilder
      implements TrustBeneficiaryClassListNodeComponent.Builder {
    private TrustBeneficiaryClassListNodeModule trustBeneficiaryClassListNodeModule;

    @Override
    public TrustBeneficiaryClassListNodeComponent build() {
      if (trustBeneficiaryClassListNodeModule == null) {
        throw new IllegalStateException(
            TrustBeneficiaryClassListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustBeneficiaryClassListNodeComponentImpl(this);
    }

    @Override
    public TrustBeneficiaryClassListNodeComponentBuilder setTrustBeneficiaryClassListNodeModule(
        TrustBeneficiaryClassListNodeModule module) {
      this.trustBeneficiaryClassListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustBeneficiaryClassListNodeComponentImpl
      implements TrustBeneficiaryClassListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<TrustBeneficiaryClassListNodeRuleProvider>
        trustBeneficiaryClassListNodeRuleProviderMembersInjector;

    private Provider<TrustBeneficiaryClassListNodeRuleProvider>
        trustBeneficiaryClassListNodeRuleProvider;

    private TrustBeneficiaryClassListNodeComponentImpl(
        TrustBeneficiaryClassListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustBeneficiaryClassListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustBeneficiaryClassListNodeModule_ProvideUiNodeFactory.create(
                  builder.trustBeneficiaryClassListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.trustBeneficiaryClassListNodeRuleProviderMembersInjector =
          TrustBeneficiaryClassListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.trustBeneficiaryClassListNodeRuleProvider =
          DoubleCheck.provider(
              TrustBeneficiaryClassListNodeRuleProvider_Factory.create(
                  trustBeneficiaryClassListNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustBeneficiaryClassListNodeRuleProvider
        getTrustBeneficiaryClassListNodeRuleProvider() {
      return trustBeneficiaryClassListNodeRuleProvider.get();
    }
  }

  private final class TrustSettlorListNodeComponentBuilder
      implements TrustSettlorListNodeComponent.Builder {
    private TrustSettlorListNodeModule trustSettlorListNodeModule;

    @Override
    public TrustSettlorListNodeComponent build() {
      if (trustSettlorListNodeModule == null) {
        throw new IllegalStateException(
            TrustSettlorListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustSettlorListNodeComponentImpl(this);
    }

    @Override
    public TrustSettlorListNodeComponentBuilder setTrustSettlorListNodeModule(
        TrustSettlorListNodeModule module) {
      this.trustSettlorListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustSettlorListNodeComponentImpl implements TrustSettlorListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<TrustSettlorListNodeRuleProvider>
        trustSettlorListNodeRuleProviderMembersInjector;

    private Provider<TrustSettlorListNodeRuleProvider> trustSettlorListNodeRuleProvider;

    private TrustSettlorListNodeComponentImpl(TrustSettlorListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustSettlorListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustSettlorListNodeModule_ProvideUiNodeFactory.create(
                  builder.trustSettlorListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.trustSettlorListNodeRuleProviderMembersInjector =
          TrustSettlorListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.trustSettlorListNodeRuleProvider =
          DoubleCheck.provider(
              TrustSettlorListNodeRuleProvider_Factory.create(
                  trustSettlorListNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustSettlorListNodeRuleProvider getTrustSettlorListNodeRuleProvider() {
      return trustSettlorListNodeRuleProvider.get();
    }
  }

  private final class TrustCountryNodeComponentBuilder
      implements TrustCountryNodeComponent.Builder {
    private TrustCountryNodeModule trustCountryNodeModule;

    @Override
    public TrustCountryNodeComponent build() {
      if (trustCountryNodeModule == null) {
        throw new IllegalStateException(
            TrustCountryNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustCountryNodeComponentImpl(this);
    }

    @Override
    public TrustCountryNodeComponentBuilder setTrustCountryNodeModule(
        TrustCountryNodeModule module) {
      this.trustCountryNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustCountryNodeComponentImpl implements TrustCountryNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<TrustCountryNodeRuleProvider>
        trustCountryNodeRuleProviderMembersInjector;

    private Provider<TrustCountryNodeRuleProvider> trustCountryNodeRuleProvider;

    private TrustCountryNodeComponentImpl(TrustCountryNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustCountryNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustCountryNodeModule_ProvideUiNodeFactory.create(builder.trustCountryNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TrustCountryNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.trustCountryNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              TrustCountryNodeModule_ProvideStringUiNodeFactory.create(
                  builder.trustCountryNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.trustCountryNodeRuleProviderMembersInjector =
          TrustCountryNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.trustCountryNodeRuleProvider =
          DoubleCheck.provider(
              TrustCountryNodeRuleProvider_Factory.create(
                  trustCountryNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustCountryNodeRuleProvider getTrustCountryNodeRuleProvider() {
      return trustCountryNodeRuleProvider.get();
    }
  }

  private final class TrustBeneficialOwnerListNodeComponentBuilder
      implements TrustBeneficialOwnerListNodeComponent.Builder {
    private TrustBeneficialOwnerListNodeModule trustBeneficialOwnerListNodeModule;

    @Override
    public TrustBeneficialOwnerListNodeComponent build() {
      if (trustBeneficialOwnerListNodeModule == null) {
        throw new IllegalStateException(
            TrustBeneficialOwnerListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TrustBeneficialOwnerListNodeComponentImpl(this);
    }

    @Override
    public TrustBeneficialOwnerListNodeComponentBuilder setTrustBeneficialOwnerListNodeModule(
        TrustBeneficialOwnerListNodeModule module) {
      this.trustBeneficialOwnerListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TrustBeneficialOwnerListNodeComponentImpl
      implements TrustBeneficialOwnerListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<TrustBeneficialOwnerListNodeRuleProvider>
        trustBeneficialOwnerListNodeRuleProviderMembersInjector;

    private Provider<TrustBeneficialOwnerListNodeRuleProvider>
        trustBeneficialOwnerListNodeRuleProvider;

    private TrustBeneficialOwnerListNodeComponentImpl(
        TrustBeneficialOwnerListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TrustBeneficialOwnerListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TrustBeneficialOwnerListNodeModule_ProvideUiNodeFactory.create(
                  builder.trustBeneficialOwnerListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.trustBeneficialOwnerListNodeRuleProviderMembersInjector =
          TrustBeneficialOwnerListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.trustBeneficialOwnerListNodeRuleProvider =
          DoubleCheck.provider(
              TrustBeneficialOwnerListNodeRuleProvider_Factory.create(
                  trustBeneficialOwnerListNodeRuleProviderMembersInjector));
    }

    @Override
    public TrustBeneficialOwnerListNodeRuleProvider getTrustBeneficialOwnerListNodeRuleProvider() {
      return trustBeneficialOwnerListNodeRuleProvider.get();
    }
  }

  private final class PersonTrustNodeComponentBuilder implements PersonTrustNodeComponent.Builder {
    private PersonTrustNodeModule personTrustNodeModule;

    @Override
    public PersonTrustNodeComponent build() {
      if (personTrustNodeModule == null) {
        throw new IllegalStateException(
            PersonTrustNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonTrustNodeComponentImpl(this);
    }

    @Override
    public PersonTrustNodeComponentBuilder setPersonTrustNodeModule(PersonTrustNodeModule module) {
      this.personTrustNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonTrustNodeComponentImpl implements PersonTrustNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<PersonTrustNodeRuleProvider> personTrustNodeRuleProviderMembersInjector;

    private Provider<PersonTrustNodeRuleProvider> personTrustNodeRuleProvider;

    private PersonTrustNodeComponentImpl(PersonTrustNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonTrustNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonTrustNodeModule_ProvideUiNodeFactory.create(builder.personTrustNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PersonTrustNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.personTrustNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.personTrustNodeRuleProviderMembersInjector =
          PersonTrustNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.personTrustNodeRuleProvider =
          DoubleCheck.provider(
              PersonTrustNodeRuleProvider_Factory.create(
                  personTrustNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonTrustNodeRuleProvider getPersonTrustNodeRuleProvider() {
      return personTrustNodeRuleProvider.get();
    }
  }

  private final class PersonNodeComponentBuilder implements PersonNodeComponent.Builder {
    private PersonNodeModule personNodeModule;

    @Override
    public PersonNodeComponent build() {
      if (personNodeModule == null) {
        throw new IllegalStateException(PersonNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonNodeComponentImpl(this);
    }

    @Override
    public PersonNodeComponentBuilder setPersonNodeModule(PersonNodeModule module) {
      this.personNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonNodeComponentImpl implements PersonNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<PersonNode> providePersonNodeProvider;

    private Provider<UpdatePersonNodeLabelRuleImpl> updatePersonNodeLabelRuleImplProvider;

    private Provider<UpdatePersonNodeLabelRule> provideUpdatePersonNodeLabelRuleProvider;

    private MembersInjector<PersonNodeRuleProvider> personNodeRuleProviderMembersInjector;

    private Provider<PersonNodeRuleProvider> personNodeRuleProvider;

    private PersonNodeComponentImpl(PersonNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonNodeModule_ProvideUiNodeFactory.create(builder.personNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PersonNodeModule_ProvideObjectUiNodeFactory.create(builder.personNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.providePersonNodeProvider =
          DoubleCheck.provider(
              PersonNodeModule_ProvidePersonNodeFactory.create(builder.personNodeModule));

      this.updatePersonNodeLabelRuleImplProvider =
          DoubleCheck.provider(
              UpdatePersonNodeLabelRuleImpl_Factory.create(
                  MembersInjectors.<UpdatePersonNodeLabelRuleImpl>noOp(),
                  providePersonNodeProvider));

      this.provideUpdatePersonNodeLabelRuleProvider =
          (Provider) updatePersonNodeLabelRuleImplProvider;

      this.personNodeRuleProviderMembersInjector =
          PersonNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideUpdatePersonNodeLabelRuleProvider);

      this.personNodeRuleProvider =
          DoubleCheck.provider(
              PersonNodeRuleProvider_Factory.create(personNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonNodeRuleProvider getPersonNodeRuleProvider() {
      return personNodeRuleProvider.get();
    }
  }

  private final class PersonListNodeComponentBuilder implements PersonListNodeComponent.Builder {
    private PersonListNodeModule personListNodeModule;

    @Override
    public PersonListNodeComponent build() {
      if (personListNodeModule == null) {
        throw new IllegalStateException(
            PersonListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PersonListNodeComponentImpl(this);
    }

    @Override
    public PersonListNodeComponentBuilder setPersonListNodeModule(PersonListNodeModule module) {
      this.personListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PersonListNodeComponentImpl implements PersonListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<PersonListNodeRuleProvider> personListNodeRuleProviderMembersInjector;

    private Provider<PersonListNodeRuleProvider> personListNodeRuleProvider;

    private PersonListNodeComponentImpl(PersonListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PersonListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PersonListNodeModule_ProvideUiNodeFactory.create(builder.personListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.personListNodeRuleProviderMembersInjector =
          PersonListNodeRuleProvider_MembersInjector.create(clearErrorsForDisabledNodeRuleProvider);

      this.personListNodeRuleProvider =
          DoubleCheck.provider(
              PersonListNodeRuleProvider_Factory.create(personListNodeRuleProviderMembersInjector));
    }

    @Override
    public PersonListNodeRuleProvider getPersonListNodeRuleProvider() {
      return personListNodeRuleProvider.get();
    }
  }

  private final class TotalLiabilityNodeComponentBuilder
      implements TotalLiabilityNodeComponent.Builder {
    private TotalLiabilityNodeModule totalLiabilityNodeModule;

    @Override
    public TotalLiabilityNodeComponent build() {
      if (totalLiabilityNodeModule == null) {
        throw new IllegalStateException(
            TotalLiabilityNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TotalLiabilityNodeComponentImpl(this);
    }

    @Override
    public TotalLiabilityNodeComponentBuilder setTotalLiabilityNodeModule(
        TotalLiabilityNodeModule module) {
      this.totalLiabilityNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TotalLiabilityNodeComponentImpl implements TotalLiabilityNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<TotalLiabilityNodeRuleProvider>
        totalLiabilityNodeRuleProviderMembersInjector;

    private Provider<TotalLiabilityNodeRuleProvider> totalLiabilityNodeRuleProvider;

    private TotalLiabilityNodeComponentImpl(TotalLiabilityNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TotalLiabilityNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TotalLiabilityNodeModule_ProvideUiNodeFactory.create(
                  builder.totalLiabilityNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TotalLiabilityNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.totalLiabilityNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              TotalLiabilityNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.totalLiabilityNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.totalLiabilityNodeRuleProviderMembersInjector =
          TotalLiabilityNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.totalLiabilityNodeRuleProvider =
          DoubleCheck.provider(
              TotalLiabilityNodeRuleProvider_Factory.create(
                  totalLiabilityNodeRuleProviderMembersInjector));
    }

    @Override
    public TotalLiabilityNodeRuleProvider getTotalLiabilityNodeRuleProvider() {
      return totalLiabilityNodeRuleProvider.get();
    }
  }

  private final class TotalAssetNodeComponentBuilder implements TotalAssetNodeComponent.Builder {
    private TotalAssetNodeModule totalAssetNodeModule;

    @Override
    public TotalAssetNodeComponent build() {
      if (totalAssetNodeModule == null) {
        throw new IllegalStateException(
            TotalAssetNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TotalAssetNodeComponentImpl(this);
    }

    @Override
    public TotalAssetNodeComponentBuilder setTotalAssetNodeModule(TotalAssetNodeModule module) {
      this.totalAssetNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TotalAssetNodeComponentImpl implements TotalAssetNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<TotalAssetNodeRuleProvider> totalAssetNodeRuleProviderMembersInjector;

    private Provider<TotalAssetNodeRuleProvider> totalAssetNodeRuleProvider;

    private TotalAssetNodeComponentImpl(TotalAssetNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TotalAssetNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TotalAssetNodeModule_ProvideUiNodeFactory.create(builder.totalAssetNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TotalAssetNodeModule_ProvideLeafUiNodeFactory.create(builder.totalAssetNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              TotalAssetNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.totalAssetNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.totalAssetNodeRuleProviderMembersInjector =
          TotalAssetNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.totalAssetNodeRuleProvider =
          DoubleCheck.provider(
              TotalAssetNodeRuleProvider_Factory.create(totalAssetNodeRuleProviderMembersInjector));
    }

    @Override
    public TotalAssetNodeRuleProvider getTotalAssetNodeRuleProvider() {
      return totalAssetNodeRuleProvider.get();
    }
  }

  private final class TotalExpenseNodeComponentBuilder
      implements TotalExpenseNodeComponent.Builder {
    private TotalExpenseNodeModule totalExpenseNodeModule;

    @Override
    public TotalExpenseNodeComponent build() {
      if (totalExpenseNodeModule == null) {
        throw new IllegalStateException(
            TotalExpenseNodeModule.class.getCanonicalName() + " must be set");
      }
      return new TotalExpenseNodeComponentImpl(this);
    }

    @Override
    public TotalExpenseNodeComponentBuilder setTotalExpenseNodeModule(
        TotalExpenseNodeModule module) {
      this.totalExpenseNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class TotalExpenseNodeComponentImpl implements TotalExpenseNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<TotalExpenseNodeRuleProvider>
        totalExpenseNodeRuleProviderMembersInjector;

    private Provider<TotalExpenseNodeRuleProvider> totalExpenseNodeRuleProvider;

    private TotalExpenseNodeComponentImpl(TotalExpenseNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final TotalExpenseNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              TotalExpenseNodeModule_ProvideUiNodeFactory.create(builder.totalExpenseNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              TotalExpenseNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.totalExpenseNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              TotalExpenseNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.totalExpenseNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.totalExpenseNodeRuleProviderMembersInjector =
          TotalExpenseNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.totalExpenseNodeRuleProvider =
          DoubleCheck.provider(
              TotalExpenseNodeRuleProvider_Factory.create(
                  totalExpenseNodeRuleProviderMembersInjector));
    }

    @Override
    public TotalExpenseNodeRuleProvider getTotalExpenseNodeRuleProvider() {
      return totalExpenseNodeRuleProvider.get();
    }
  }

  private final class ExpenseDescriptionNodeComponentBuilder
      implements ExpenseDescriptionNodeComponent.Builder {
    private ExpenseDescriptionNodeModule expenseDescriptionNodeModule;

    @Override
    public ExpenseDescriptionNodeComponent build() {
      if (expenseDescriptionNodeModule == null) {
        throw new IllegalStateException(
            ExpenseDescriptionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ExpenseDescriptionNodeComponentImpl(this);
    }

    @Override
    public ExpenseDescriptionNodeComponentBuilder setExpenseDescriptionNodeModule(
        ExpenseDescriptionNodeModule module) {
      this.expenseDescriptionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ExpenseDescriptionNodeComponentImpl
      implements ExpenseDescriptionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ExpenseDescriptionNodeRuleProvider>
        expenseDescriptionNodeRuleProviderMembersInjector;

    private Provider<ExpenseDescriptionNodeRuleProvider> expenseDescriptionNodeRuleProvider;

    private ExpenseDescriptionNodeComponentImpl(ExpenseDescriptionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ExpenseDescriptionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ExpenseDescriptionNodeModule_ProvideUiNodeFactory.create(
                  builder.expenseDescriptionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ExpenseDescriptionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.expenseDescriptionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ExpenseDescriptionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.expenseDescriptionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.expenseDescriptionNodeRuleProviderMembersInjector =
          ExpenseDescriptionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.expenseDescriptionNodeRuleProvider =
          DoubleCheck.provider(
              ExpenseDescriptionNodeRuleProvider_Factory.create(
                  expenseDescriptionNodeRuleProviderMembersInjector));
    }

    @Override
    public ExpenseDescriptionNodeRuleProvider getExpenseDescriptionNodeRuleProvider() {
      return expenseDescriptionNodeRuleProvider.get();
    }
  }

  private final class ExpenseTypeNodeComponentBuilder implements ExpenseTypeNodeComponent.Builder {
    private ExpenseTypeNodeModule expenseTypeNodeModule;

    @Override
    public ExpenseTypeNodeComponent build() {
      if (expenseTypeNodeModule == null) {
        throw new IllegalStateException(
            ExpenseTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ExpenseTypeNodeComponentImpl(this);
    }

    @Override
    public ExpenseTypeNodeComponentBuilder setExpenseTypeNodeModule(ExpenseTypeNodeModule module) {
      this.expenseTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ExpenseTypeNodeComponentImpl implements ExpenseTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ExpenseTypeNodeRuleProvider> expenseTypeNodeRuleProviderMembersInjector;

    private Provider<ExpenseTypeNodeRuleProvider> expenseTypeNodeRuleProvider;

    private ExpenseTypeNodeComponentImpl(ExpenseTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ExpenseTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ExpenseTypeNodeModule_ProvideUiNodeFactory.create(builder.expenseTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ExpenseTypeNodeModule_ProvideLeafUiNodeFactory.create(builder.expenseTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ExpenseTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.expenseTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.expenseTypeNodeRuleProviderMembersInjector =
          ExpenseTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.expenseTypeNodeRuleProvider =
          DoubleCheck.provider(
              ExpenseTypeNodeRuleProvider_Factory.create(
                  expenseTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public ExpenseTypeNodeRuleProvider getExpenseTypeNodeRuleProvider() {
      return expenseTypeNodeRuleProvider.get();
    }
  }

  private final class ExpenseMonthlyRepaymentNodeComponentBuilder
      implements ExpenseMonthlyRepaymentNodeComponent.Builder {
    private ExpenseMonthlyRepaymentNodeModule expenseMonthlyRepaymentNodeModule;

    @Override
    public ExpenseMonthlyRepaymentNodeComponent build() {
      if (expenseMonthlyRepaymentNodeModule == null) {
        throw new IllegalStateException(
            ExpenseMonthlyRepaymentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ExpenseMonthlyRepaymentNodeComponentImpl(this);
    }

    @Override
    public ExpenseMonthlyRepaymentNodeComponentBuilder setExpenseMonthlyRepaymentNodeModule(
        ExpenseMonthlyRepaymentNodeModule module) {
      this.expenseMonthlyRepaymentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ExpenseMonthlyRepaymentNodeComponentImpl
      implements ExpenseMonthlyRepaymentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ExpenseMonthlyRepaymentNodeRuleProvider>
        expenseMonthlyRepaymentNodeRuleProviderMembersInjector;

    private Provider<ExpenseMonthlyRepaymentNodeRuleProvider>
        expenseMonthlyRepaymentNodeRuleProvider;

    private ExpenseMonthlyRepaymentNodeComponentImpl(
        ExpenseMonthlyRepaymentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ExpenseMonthlyRepaymentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ExpenseMonthlyRepaymentNodeModule_ProvideUiNodeFactory.create(
                  builder.expenseMonthlyRepaymentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ExpenseMonthlyRepaymentNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.expenseMonthlyRepaymentNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ExpenseMonthlyRepaymentNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.expenseMonthlyRepaymentNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.expenseMonthlyRepaymentNodeRuleProviderMembersInjector =
          ExpenseMonthlyRepaymentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.expenseMonthlyRepaymentNodeRuleProvider =
          DoubleCheck.provider(
              ExpenseMonthlyRepaymentNodeRuleProvider_Factory.create(
                  expenseMonthlyRepaymentNodeRuleProviderMembersInjector));
    }

    @Override
    public ExpenseMonthlyRepaymentNodeRuleProvider getExpenseMonthlyRepaymentNodeRuleProvider() {
      return expenseMonthlyRepaymentNodeRuleProvider.get();
    }
  }

  private final class ExpenseNodeComponentBuilder implements ExpenseNodeComponent.Builder {
    private ExpenseNodeModule expenseNodeModule;

    @Override
    public ExpenseNodeComponent build() {
      if (expenseNodeModule == null) {
        throw new IllegalStateException(
            ExpenseNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ExpenseNodeComponentImpl(this);
    }

    @Override
    public ExpenseNodeComponentBuilder setExpenseNodeModule(ExpenseNodeModule module) {
      this.expenseNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ExpenseNodeComponentImpl implements ExpenseNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ExpenseNodeRuleProvider> expenseNodeRuleProviderMembersInjector;

    private Provider<ExpenseNodeRuleProvider> expenseNodeRuleProvider;

    private ExpenseNodeComponentImpl(ExpenseNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ExpenseNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ExpenseNodeModule_ProvideUiNodeFactory.create(builder.expenseNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ExpenseNodeModule_ProvideObjectUiNodeFactory.create(builder.expenseNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.expenseNodeRuleProviderMembersInjector =
          ExpenseNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.expenseNodeRuleProvider =
          DoubleCheck.provider(
              ExpenseNodeRuleProvider_Factory.create(expenseNodeRuleProviderMembersInjector));
    }

    @Override
    public ExpenseNodeRuleProvider getExpenseNodeRuleProvider() {
      return expenseNodeRuleProvider.get();
    }
  }

  private final class ExpenseListNodeComponentBuilder implements ExpenseListNodeComponent.Builder {
    private ExpenseListNodeModule expenseListNodeModule;

    @Override
    public ExpenseListNodeComponent build() {
      if (expenseListNodeModule == null) {
        throw new IllegalStateException(
            ExpenseListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ExpenseListNodeComponentImpl(this);
    }

    @Override
    public ExpenseListNodeComponentBuilder setExpenseListNodeModule(ExpenseListNodeModule module) {
      this.expenseListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ExpenseListNodeComponentImpl implements ExpenseListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<ExpenseListNodeRuleProvider> expenseListNodeRuleProviderMembersInjector;

    private Provider<ExpenseListNodeRuleProvider> expenseListNodeRuleProvider;

    private ExpenseListNodeComponentImpl(ExpenseListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ExpenseListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ExpenseListNodeModule_ProvideUiNodeFactory.create(builder.expenseListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.expenseListNodeRuleProviderMembersInjector =
          ExpenseListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.expenseListNodeRuleProvider =
          DoubleCheck.provider(
              ExpenseListNodeRuleProvider_Factory.create(
                  expenseListNodeRuleProviderMembersInjector));
    }

    @Override
    public ExpenseListNodeRuleProvider getExpenseListNodeRuleProvider() {
      return expenseListNodeRuleProvider.get();
    }
  }

  private final class CreditCardLenderNameNodeComponentBuilder
      implements CreditCardLenderNameNodeComponent.Builder {
    private CreditCardLenderNameNodeModule creditCardLenderNameNodeModule;

    @Override
    public CreditCardLenderNameNodeComponent build() {
      if (creditCardLenderNameNodeModule == null) {
        throw new IllegalStateException(
            CreditCardLenderNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardLenderNameNodeComponentImpl(this);
    }

    @Override
    public CreditCardLenderNameNodeComponentBuilder setCreditCardLenderNameNodeModule(
        CreditCardLenderNameNodeModule module) {
      this.creditCardLenderNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardLenderNameNodeComponentImpl
      implements CreditCardLenderNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CreditCardLenderNameNodeRuleProvider>
        creditCardLenderNameNodeRuleProviderMembersInjector;

    private Provider<CreditCardLenderNameNodeRuleProvider> creditCardLenderNameNodeRuleProvider;

    private CreditCardLenderNameNodeComponentImpl(
        CreditCardLenderNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardLenderNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardLenderNameNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCardLenderNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditCardLenderNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditCardLenderNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CreditCardLenderNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.creditCardLenderNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.creditCardLenderNameNodeRuleProviderMembersInjector =
          CreditCardLenderNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.creditCardLenderNameNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardLenderNameNodeRuleProvider_Factory.create(
                  creditCardLenderNameNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardLenderNameNodeRuleProvider getCreditCardLenderNameNodeRuleProvider() {
      return creditCardLenderNameNodeRuleProvider.get();
    }
  }

  private final class CreditCardMonthlyRepaymentNodeComponentBuilder
      implements CreditCardMonthlyRepaymentNodeComponent.Builder {
    private CreditCardMonthlyRepaymentNodeModule creditCardMonthlyRepaymentNodeModule;

    @Override
    public CreditCardMonthlyRepaymentNodeComponent build() {
      if (creditCardMonthlyRepaymentNodeModule == null) {
        throw new IllegalStateException(
            CreditCardMonthlyRepaymentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardMonthlyRepaymentNodeComponentImpl(this);
    }

    @Override
    public CreditCardMonthlyRepaymentNodeComponentBuilder setCreditCardMonthlyRepaymentNodeModule(
        CreditCardMonthlyRepaymentNodeModule module) {
      this.creditCardMonthlyRepaymentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardMonthlyRepaymentNodeComponentImpl
      implements CreditCardMonthlyRepaymentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<CreditCardMonthlyRepaymentNodeRuleProvider>
        creditCardMonthlyRepaymentNodeRuleProviderMembersInjector;

    private Provider<CreditCardMonthlyRepaymentNodeRuleProvider>
        creditCardMonthlyRepaymentNodeRuleProvider;

    private CreditCardMonthlyRepaymentNodeComponentImpl(
        CreditCardMonthlyRepaymentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardMonthlyRepaymentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardMonthlyRepaymentNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCardMonthlyRepaymentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditCardMonthlyRepaymentNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditCardMonthlyRepaymentNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              CreditCardMonthlyRepaymentNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.creditCardMonthlyRepaymentNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.creditCardMonthlyRepaymentNodeRuleProviderMembersInjector =
          CreditCardMonthlyRepaymentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.creditCardMonthlyRepaymentNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardMonthlyRepaymentNodeRuleProvider_Factory.create(
                  creditCardMonthlyRepaymentNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardMonthlyRepaymentNodeRuleProvider
        getCreditCardMonthlyRepaymentNodeRuleProvider() {
      return creditCardMonthlyRepaymentNodeRuleProvider.get();
    }
  }

  private final class CreditCardAmountOwingNodeComponentBuilder
      implements CreditCardAmountOwingNodeComponent.Builder {
    private CreditCardAmountOwingNodeModule creditCardAmountOwingNodeModule;

    @Override
    public CreditCardAmountOwingNodeComponent build() {
      if (creditCardAmountOwingNodeModule == null) {
        throw new IllegalStateException(
            CreditCardAmountOwingNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardAmountOwingNodeComponentImpl(this);
    }

    @Override
    public CreditCardAmountOwingNodeComponentBuilder setCreditCardAmountOwingNodeModule(
        CreditCardAmountOwingNodeModule module) {
      this.creditCardAmountOwingNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardAmountOwingNodeComponentImpl
      implements CreditCardAmountOwingNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<CreditCardAmountOwingNodeRuleProvider>
        creditCardAmountOwingNodeRuleProviderMembersInjector;

    private Provider<CreditCardAmountOwingNodeRuleProvider> creditCardAmountOwingNodeRuleProvider;

    private CreditCardAmountOwingNodeComponentImpl(
        CreditCardAmountOwingNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardAmountOwingNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardAmountOwingNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCardAmountOwingNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditCardAmountOwingNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditCardAmountOwingNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              CreditCardAmountOwingNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.creditCardAmountOwingNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.creditCardAmountOwingNodeRuleProviderMembersInjector =
          CreditCardAmountOwingNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.creditCardAmountOwingNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardAmountOwingNodeRuleProvider_Factory.create(
                  creditCardAmountOwingNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardAmountOwingNodeRuleProvider getCreditCardAmountOwingNodeRuleProvider() {
      return creditCardAmountOwingNodeRuleProvider.get();
    }
  }

  private final class CreditCardLimitAmountNodeComponentBuilder
      implements CreditCardLimitAmountNodeComponent.Builder {
    private CreditCardLimitAmountNodeModule creditCardLimitAmountNodeModule;

    @Override
    public CreditCardLimitAmountNodeComponent build() {
      if (creditCardLimitAmountNodeModule == null) {
        throw new IllegalStateException(
            CreditCardLimitAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardLimitAmountNodeComponentImpl(this);
    }

    @Override
    public CreditCardLimitAmountNodeComponentBuilder setCreditCardLimitAmountNodeModule(
        CreditCardLimitAmountNodeModule module) {
      this.creditCardLimitAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardLimitAmountNodeComponentImpl
      implements CreditCardLimitAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<CreditCardLimitAmountNodeRuleProvider>
        creditCardLimitAmountNodeRuleProviderMembersInjector;

    private Provider<CreditCardLimitAmountNodeRuleProvider> creditCardLimitAmountNodeRuleProvider;

    private CreditCardLimitAmountNodeComponentImpl(
        CreditCardLimitAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardLimitAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardLimitAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCardLimitAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditCardLimitAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditCardLimitAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              CreditCardLimitAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.creditCardLimitAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.creditCardLimitAmountNodeRuleProviderMembersInjector =
          CreditCardLimitAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.creditCardLimitAmountNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardLimitAmountNodeRuleProvider_Factory.create(
                  creditCardLimitAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardLimitAmountNodeRuleProvider getCreditCardLimitAmountNodeRuleProvider() {
      return creditCardLimitAmountNodeRuleProvider.get();
    }
  }

  private final class CreditCardTypeNodeComponentBuilder
      implements CreditCardTypeNodeComponent.Builder {
    private CreditCardTypeNodeModule creditCardTypeNodeModule;

    @Override
    public CreditCardTypeNodeComponent build() {
      if (creditCardTypeNodeModule == null) {
        throw new IllegalStateException(
            CreditCardTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardTypeNodeComponentImpl(this);
    }

    @Override
    public CreditCardTypeNodeComponentBuilder setCreditCardTypeNodeModule(
        CreditCardTypeNodeModule module) {
      this.creditCardTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardTypeNodeComponentImpl implements CreditCardTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CreditCardTypeNodeRuleProvider>
        creditCardTypeNodeRuleProviderMembersInjector;

    private Provider<CreditCardTypeNodeRuleProvider> creditCardTypeNodeRuleProvider;

    private CreditCardTypeNodeComponentImpl(CreditCardTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCardTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditCardTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditCardTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CreditCardTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.creditCardTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.creditCardTypeNodeRuleProviderMembersInjector =
          CreditCardTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.creditCardTypeNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardTypeNodeRuleProvider_Factory.create(
                  creditCardTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardTypeNodeRuleProvider getCreditCardTypeNodeRuleProvider() {
      return creditCardTypeNodeRuleProvider.get();
    }
  }

  private final class CreditCardClearingFlagNodeComponentBuilder
      implements CreditCardClearingFlagNodeComponent.Builder {
    private CreditCardClearingFlagNodeModule creditCardClearingFlagNodeModule;

    @Override
    public CreditCardClearingFlagNodeComponent build() {
      if (creditCardClearingFlagNodeModule == null) {
        throw new IllegalStateException(
            CreditCardClearingFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardClearingFlagNodeComponentImpl(this);
    }

    @Override
    public CreditCardClearingFlagNodeComponentBuilder setCreditCardClearingFlagNodeModule(
        CreditCardClearingFlagNodeModule module) {
      this.creditCardClearingFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardClearingFlagNodeComponentImpl
      implements CreditCardClearingFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private Provider<CreditCardClearingFlagNode> provideCreditCardClearingFlagNodeProvider;

    private Provider<CreditCardClearingFlagChangedRuleImpl>
        creditCardClearingFlagChangedRuleImplProvider;

    private Provider<CreditCardClearingFlagChangedRule>
        provideCreditCardClearingFlagChangedRuleProvider;

    private MembersInjector<CreditCardClearingFlagNodeRuleProvider>
        creditCardClearingFlagNodeRuleProviderMembersInjector;

    private Provider<CreditCardClearingFlagNodeRuleProvider> creditCardClearingFlagNodeRuleProvider;

    private CreditCardClearingFlagNodeComponentImpl(
        CreditCardClearingFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardClearingFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardClearingFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCardClearingFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditCardClearingFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditCardClearingFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              CreditCardClearingFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.creditCardClearingFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.provideCreditCardClearingFlagNodeProvider =
          DoubleCheck.provider(
              CreditCardClearingFlagNodeModule_ProvideCreditCardClearingFlagNodeFactory.create(
                  builder.creditCardClearingFlagNodeModule));

      this.creditCardClearingFlagChangedRuleImplProvider =
          CreditCardClearingFlagChangedRuleImpl_Factory.create(
              MembersInjectors.<CreditCardClearingFlagChangedRuleImpl>noOp(),
              provideCreditCardClearingFlagNodeProvider);

      this.provideCreditCardClearingFlagChangedRuleProvider =
          (Provider) creditCardClearingFlagChangedRuleImplProvider;

      this.creditCardClearingFlagNodeRuleProviderMembersInjector =
          CreditCardClearingFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider,
              provideCreditCardClearingFlagChangedRuleProvider);

      this.creditCardClearingFlagNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardClearingFlagNodeRuleProvider_Factory.create(
                  creditCardClearingFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardClearingFlagNodeRuleProvider getCreditCardClearingFlagNodeRuleProvider() {
      return creditCardClearingFlagNodeRuleProvider.get();
    }
  }

  private final class CreditCardBreakCostNodeComponentBuilder
      implements CreditCardBreakCostNodeComponent.Builder {
    private CreditCardBreakCostNodeModule creditCardBreakCostNodeModule;

    @Override
    public CreditCardBreakCostNodeComponent build() {
      if (creditCardBreakCostNodeModule == null) {
        throw new IllegalStateException(
            CreditCardBreakCostNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardBreakCostNodeComponentImpl(this);
    }

    @Override
    public CreditCardBreakCostNodeComponentBuilder setCreditCardBreakCostNodeModule(
        CreditCardBreakCostNodeModule module) {
      this.creditCardBreakCostNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardBreakCostNodeComponentImpl
      implements CreditCardBreakCostNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<CreditCardBreakCostNodeRuleProvider>
        creditCardBreakCostNodeRuleProviderMembersInjector;

    private Provider<CreditCardBreakCostNodeRuleProvider> creditCardBreakCostNodeRuleProvider;

    private CreditCardBreakCostNodeComponentImpl(CreditCardBreakCostNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardBreakCostNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardBreakCostNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCardBreakCostNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CreditCardBreakCostNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.creditCardBreakCostNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              CreditCardBreakCostNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.creditCardBreakCostNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.creditCardBreakCostNodeRuleProviderMembersInjector =
          CreditCardBreakCostNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.creditCardBreakCostNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardBreakCostNodeRuleProvider_Factory.create(
                  creditCardBreakCostNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardBreakCostNodeRuleProvider getCreditCardBreakCostNodeRuleProvider() {
      return creditCardBreakCostNodeRuleProvider.get();
    }
  }

  private final class CreditCardNodeComponentBuilder implements CreditCardNodeComponent.Builder {
    private CreditCardNodeModule creditCardNodeModule;

    @Override
    public CreditCardNodeComponent build() {
      if (creditCardNodeModule == null) {
        throw new IllegalStateException(
            CreditCardNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardNodeComponentImpl(this);
    }

    @Override
    public CreditCardNodeComponentBuilder setCreditCardNodeModule(CreditCardNodeModule module) {
      this.creditCardNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardNodeComponentImpl implements CreditCardNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<CreditCardNodeRuleProvider> creditCardNodeRuleProviderMembersInjector;

    private Provider<CreditCardNodeRuleProvider> creditCardNodeRuleProvider;

    private CreditCardNodeComponentImpl(CreditCardNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardNodeModule_ProvideUiNodeFactory.create(builder.creditCardNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              CreditCardNodeModule_ProvideObjectUiNodeFactory.create(builder.creditCardNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.creditCardNodeRuleProviderMembersInjector =
          CreditCardNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.creditCardNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardNodeRuleProvider_Factory.create(creditCardNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardNodeRuleProvider getCreditCardNodeRuleProvider() {
      return creditCardNodeRuleProvider.get();
    }
  }

  private final class CreditCardListNodeComponentBuilder
      implements CreditCardListNodeComponent.Builder {
    private CreditCardListNodeModule creditCardListNodeModule;

    @Override
    public CreditCardListNodeComponent build() {
      if (creditCardListNodeModule == null) {
        throw new IllegalStateException(
            CreditCardListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CreditCardListNodeComponentImpl(this);
    }

    @Override
    public CreditCardListNodeComponentBuilder setCreditCardListNodeModule(
        CreditCardListNodeModule module) {
      this.creditCardListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CreditCardListNodeComponentImpl implements CreditCardListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<CreditCardListNodeRuleProvider>
        creditCardListNodeRuleProviderMembersInjector;

    private Provider<CreditCardListNodeRuleProvider> creditCardListNodeRuleProvider;

    private CreditCardListNodeComponentImpl(CreditCardListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CreditCardListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CreditCardListNodeModule_ProvideUiNodeFactory.create(
                  builder.creditCardListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.creditCardListNodeRuleProviderMembersInjector =
          CreditCardListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.creditCardListNodeRuleProvider =
          DoubleCheck.provider(
              CreditCardListNodeRuleProvider_Factory.create(
                  creditCardListNodeRuleProviderMembersInjector));
    }

    @Override
    public CreditCardListNodeRuleProvider getCreditCardListNodeRuleProvider() {
      return creditCardListNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityAmountOwningNodeComponentBuilder
      implements OtherLiabilityAmountOwningNodeComponent.Builder {
    private OtherLiabilityAmountOwningNodeModule otherLiabilityAmountOwningNodeModule;

    @Override
    public OtherLiabilityAmountOwningNodeComponent build() {
      if (otherLiabilityAmountOwningNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityAmountOwningNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityAmountOwningNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityAmountOwningNodeComponentBuilder setOtherLiabilityAmountOwningNodeModule(
        OtherLiabilityAmountOwningNodeModule module) {
      this.otherLiabilityAmountOwningNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityAmountOwningNodeComponentImpl
      implements OtherLiabilityAmountOwningNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<OtherLiabilityAmountOwningNodeRuleProvider>
        otherLiabilityAmountOwningNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityAmountOwningNodeRuleProvider>
        otherLiabilityAmountOwningNodeRuleProvider;

    private OtherLiabilityAmountOwningNodeComponentImpl(
        OtherLiabilityAmountOwningNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityAmountOwningNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityAmountOwningNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityAmountOwningNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityAmountOwningNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherLiabilityAmountOwningNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityAmountOwningNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.otherLiabilityAmountOwningNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.otherLiabilityAmountOwningNodeRuleProviderMembersInjector =
          OtherLiabilityAmountOwningNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.otherLiabilityAmountOwningNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityAmountOwningNodeRuleProvider_Factory.create(
                  otherLiabilityAmountOwningNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityAmountOwningNodeRuleProvider
        getOtherLiabilityAmountOwningNodeRuleProvider() {
      return otherLiabilityAmountOwningNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityBreakCostNodeComponentBuilder
      implements OtherLiabilityBreakCostNodeComponent.Builder {
    private OtherLiabilityBreakCostNodeModule otherLiabilityBreakCostNodeModule;

    @Override
    public OtherLiabilityBreakCostNodeComponent build() {
      if (otherLiabilityBreakCostNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityBreakCostNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityBreakCostNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityBreakCostNodeComponentBuilder setOtherLiabilityBreakCostNodeModule(
        OtherLiabilityBreakCostNodeModule module) {
      this.otherLiabilityBreakCostNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityBreakCostNodeComponentImpl
      implements OtherLiabilityBreakCostNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<OtherLiabilityBreakCostNodeRuleProvider>
        otherLiabilityBreakCostNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityBreakCostNodeRuleProvider>
        otherLiabilityBreakCostNodeRuleProvider;

    private OtherLiabilityBreakCostNodeComponentImpl(
        OtherLiabilityBreakCostNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityBreakCostNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityBreakCostNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityBreakCostNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityBreakCostNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherLiabilityBreakCostNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityBreakCostNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.otherLiabilityBreakCostNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.otherLiabilityBreakCostNodeRuleProviderMembersInjector =
          OtherLiabilityBreakCostNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.otherLiabilityBreakCostNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityBreakCostNodeRuleProvider_Factory.create(
                  otherLiabilityBreakCostNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityBreakCostNodeRuleProvider getOtherLiabilityBreakCostNodeRuleProvider() {
      return otherLiabilityBreakCostNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityLimitAmountNodeComponentBuilder
      implements OtherLiabilityLimitAmountNodeComponent.Builder {
    private OtherLiabilityLimitAmountNodeModule otherLiabilityLimitAmountNodeModule;

    @Override
    public OtherLiabilityLimitAmountNodeComponent build() {
      if (otherLiabilityLimitAmountNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityLimitAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityLimitAmountNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityLimitAmountNodeComponentBuilder setOtherLiabilityLimitAmountNodeModule(
        OtherLiabilityLimitAmountNodeModule module) {
      this.otherLiabilityLimitAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityLimitAmountNodeComponentImpl
      implements OtherLiabilityLimitAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<OtherLiabilityLimitAmountNodeRuleProvider>
        otherLiabilityLimitAmountNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityLimitAmountNodeRuleProvider>
        otherLiabilityLimitAmountNodeRuleProvider;

    private OtherLiabilityLimitAmountNodeComponentImpl(
        OtherLiabilityLimitAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityLimitAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityLimitAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityLimitAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityLimitAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherLiabilityLimitAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityLimitAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.otherLiabilityLimitAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.otherLiabilityLimitAmountNodeRuleProviderMembersInjector =
          OtherLiabilityLimitAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.otherLiabilityLimitAmountNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityLimitAmountNodeRuleProvider_Factory.create(
                  otherLiabilityLimitAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityLimitAmountNodeRuleProvider
        getOtherLiabilityLimitAmountNodeRuleProvider() {
      return otherLiabilityLimitAmountNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityMonthlyRepaymentNodeComponentBuilder
      implements OtherLiabilityMonthlyRepaymentNodeComponent.Builder {
    private OtherLiabilityMonthlyRepaymentNodeModule otherLiabilityMonthlyRepaymentNodeModule;

    @Override
    public OtherLiabilityMonthlyRepaymentNodeComponent build() {
      if (otherLiabilityMonthlyRepaymentNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityMonthlyRepaymentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityMonthlyRepaymentNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityMonthlyRepaymentNodeComponentBuilder
        setOtherLiabilityMonthlyRepaymentNodeModule(
            OtherLiabilityMonthlyRepaymentNodeModule module) {
      this.otherLiabilityMonthlyRepaymentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityMonthlyRepaymentNodeComponentImpl
      implements OtherLiabilityMonthlyRepaymentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<OtherLiabilityMonthlyRepaymentNodeRuleProvider>
        otherLiabilityMonthlyRepaymentNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityMonthlyRepaymentNodeRuleProvider>
        otherLiabilityMonthlyRepaymentNodeRuleProvider;

    private OtherLiabilityMonthlyRepaymentNodeComponentImpl(
        OtherLiabilityMonthlyRepaymentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityMonthlyRepaymentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityMonthlyRepaymentNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityMonthlyRepaymentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityMonthlyRepaymentNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherLiabilityMonthlyRepaymentNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityMonthlyRepaymentNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.otherLiabilityMonthlyRepaymentNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.otherLiabilityMonthlyRepaymentNodeRuleProviderMembersInjector =
          OtherLiabilityMonthlyRepaymentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.otherLiabilityMonthlyRepaymentNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityMonthlyRepaymentNodeRuleProvider_Factory.create(
                  otherLiabilityMonthlyRepaymentNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityMonthlyRepaymentNodeRuleProvider
        getOtherLiabilityMonthlyRepaymentNodeRuleProvider() {
      return otherLiabilityMonthlyRepaymentNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityClearingFlagNodeComponentBuilder
      implements OtherLiabilityClearingFlagNodeComponent.Builder {
    private OtherLiabilityClearingFlagNodeModule otherLiabilityClearingFlagNodeModule;

    @Override
    public OtherLiabilityClearingFlagNodeComponent build() {
      if (otherLiabilityClearingFlagNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityClearingFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityClearingFlagNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityClearingFlagNodeComponentBuilder setOtherLiabilityClearingFlagNodeModule(
        OtherLiabilityClearingFlagNodeModule module) {
      this.otherLiabilityClearingFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityClearingFlagNodeComponentImpl
      implements OtherLiabilityClearingFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<OtherLiabilityClearingFlagNodeRuleProvider>
        otherLiabilityClearingFlagNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityClearingFlagNodeRuleProvider>
        otherLiabilityClearingFlagNodeRuleProvider;

    private OtherLiabilityClearingFlagNodeComponentImpl(
        OtherLiabilityClearingFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityClearingFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityClearingFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityClearingFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityClearingFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherLiabilityClearingFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityClearingFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.otherLiabilityClearingFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.otherLiabilityClearingFlagNodeRuleProviderMembersInjector =
          OtherLiabilityClearingFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.otherLiabilityClearingFlagNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityClearingFlagNodeRuleProvider_Factory.create(
                  otherLiabilityClearingFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityClearingFlagNodeRuleProvider
        getOtherLiabilityClearingFlagNodeRuleProvider() {
      return otherLiabilityClearingFlagNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityDescriptionNodeComponentBuilder
      implements OtherLiabilityDescriptionNodeComponent.Builder {
    private OtherLiabilityDescriptionNodeModule otherLiabilityDescriptionNodeModule;

    @Override
    public OtherLiabilityDescriptionNodeComponent build() {
      if (otherLiabilityDescriptionNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityDescriptionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityDescriptionNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityDescriptionNodeComponentBuilder setOtherLiabilityDescriptionNodeModule(
        OtherLiabilityDescriptionNodeModule module) {
      this.otherLiabilityDescriptionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityDescriptionNodeComponentImpl
      implements OtherLiabilityDescriptionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<OtherLiabilityDescriptionNodeRuleProvider>
        otherLiabilityDescriptionNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityDescriptionNodeRuleProvider>
        otherLiabilityDescriptionNodeRuleProvider;

    private OtherLiabilityDescriptionNodeComponentImpl(
        OtherLiabilityDescriptionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityDescriptionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityDescriptionNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityDescriptionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityDescriptionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherLiabilityDescriptionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityDescriptionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.otherLiabilityDescriptionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.otherLiabilityDescriptionNodeRuleProviderMembersInjector =
          OtherLiabilityDescriptionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.otherLiabilityDescriptionNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityDescriptionNodeRuleProvider_Factory.create(
                  otherLiabilityDescriptionNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityDescriptionNodeRuleProvider
        getOtherLiabilityDescriptionNodeRuleProvider() {
      return otherLiabilityDescriptionNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityTypeNodeComponentBuilder
      implements OtherLiabilityTypeNodeComponent.Builder {
    private OtherLiabilityTypeNodeModule otherLiabilityTypeNodeModule;

    @Override
    public OtherLiabilityTypeNodeComponent build() {
      if (otherLiabilityTypeNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityTypeNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityTypeNodeComponentBuilder setOtherLiabilityTypeNodeModule(
        OtherLiabilityTypeNodeModule module) {
      this.otherLiabilityTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityTypeNodeComponentImpl
      implements OtherLiabilityTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<OtherLiabilityTypeNodeRuleProvider>
        otherLiabilityTypeNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityTypeNodeRuleProvider> otherLiabilityTypeNodeRuleProvider;

    private OtherLiabilityTypeNodeComponentImpl(OtherLiabilityTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherLiabilityTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.otherLiabilityTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.otherLiabilityTypeNodeRuleProviderMembersInjector =
          OtherLiabilityTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.otherLiabilityTypeNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityTypeNodeRuleProvider_Factory.create(
                  otherLiabilityTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityTypeNodeRuleProvider getOtherLiabilityTypeNodeRuleProvider() {
      return otherLiabilityTypeNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityNodeComponentBuilder
      implements OtherLiabilityNodeComponent.Builder {
    private OtherLiabilityNodeModule otherLiabilityNodeModule;

    @Override
    public OtherLiabilityNodeComponent build() {
      if (otherLiabilityNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityNodeComponentBuilder setOtherLiabilityNodeModule(
        OtherLiabilityNodeModule module) {
      this.otherLiabilityNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityNodeComponentImpl implements OtherLiabilityNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<OtherLiabilityNodeRuleProvider>
        otherLiabilityNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityNodeRuleProvider> otherLiabilityNodeRuleProvider;

    private OtherLiabilityNodeComponentImpl(OtherLiabilityNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.otherLiabilityNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.otherLiabilityNodeRuleProviderMembersInjector =
          OtherLiabilityNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.otherLiabilityNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityNodeRuleProvider_Factory.create(
                  otherLiabilityNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityNodeRuleProvider getOtherLiabilityNodeRuleProvider() {
      return otherLiabilityNodeRuleProvider.get();
    }
  }

  private final class OtherLiabilityListNodeComponentBuilder
      implements OtherLiabilityListNodeComponent.Builder {
    private OtherLiabilityListNodeModule otherLiabilityListNodeModule;

    @Override
    public OtherLiabilityListNodeComponent build() {
      if (otherLiabilityListNodeModule == null) {
        throw new IllegalStateException(
            OtherLiabilityListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherLiabilityListNodeComponentImpl(this);
    }

    @Override
    public OtherLiabilityListNodeComponentBuilder setOtherLiabilityListNodeModule(
        OtherLiabilityListNodeModule module) {
      this.otherLiabilityListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherLiabilityListNodeComponentImpl
      implements OtherLiabilityListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<OtherLiabilityListNodeRuleProvider>
        otherLiabilityListNodeRuleProviderMembersInjector;

    private Provider<OtherLiabilityListNodeRuleProvider> otherLiabilityListNodeRuleProvider;

    private OtherLiabilityListNodeComponentImpl(OtherLiabilityListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherLiabilityListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherLiabilityListNodeModule_ProvideUiNodeFactory.create(
                  builder.otherLiabilityListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.otherLiabilityListNodeRuleProviderMembersInjector =
          OtherLiabilityListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.otherLiabilityListNodeRuleProvider =
          DoubleCheck.provider(
              OtherLiabilityListNodeRuleProvider_Factory.create(
                  otherLiabilityListNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherLiabilityListNodeRuleProvider getOtherLiabilityListNodeRuleProvider() {
      return otherLiabilityListNodeRuleProvider.get();
    }
  }

  private final class LoanLimitAmountNodeComponentBuilder
      implements LoanLimitAmountNodeComponent.Builder {
    private LoanLimitAmountNodeModule loanLimitAmountNodeModule;

    @Override
    public LoanLimitAmountNodeComponent build() {
      if (loanLimitAmountNodeModule == null) {
        throw new IllegalStateException(
            LoanLimitAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanLimitAmountNodeComponentImpl(this);
    }

    @Override
    public LoanLimitAmountNodeComponentBuilder setLoanLimitAmountNodeModule(
        LoanLimitAmountNodeModule module) {
      this.loanLimitAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanLimitAmountNodeComponentImpl implements LoanLimitAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<LoanLimitAmountNodeRuleProvider>
        loanLimitAmountNodeRuleProviderMembersInjector;

    private Provider<LoanLimitAmountNodeRuleProvider> loanLimitAmountNodeRuleProvider;

    private LoanLimitAmountNodeComponentImpl(LoanLimitAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanLimitAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LoanLimitAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.loanLimitAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LoanLimitAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.loanLimitAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              LoanLimitAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.loanLimitAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.loanLimitAmountNodeRuleProviderMembersInjector =
          LoanLimitAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.loanLimitAmountNodeRuleProvider =
          DoubleCheck.provider(
              LoanLimitAmountNodeRuleProvider_Factory.create(
                  loanLimitAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanLimitAmountNodeRuleProvider getLoanLimitAmountNodeRuleProvider() {
      return loanLimitAmountNodeRuleProvider.get();
    }
  }

  private final class LoanOwingAmountNodeComponentBuilder
      implements LoanOwingAmountNodeComponent.Builder {
    private LoanOwingAmountNodeModule loanOwingAmountNodeModule;

    @Override
    public LoanOwingAmountNodeComponent build() {
      if (loanOwingAmountNodeModule == null) {
        throw new IllegalStateException(
            LoanOwingAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanOwingAmountNodeComponentImpl(this);
    }

    @Override
    public LoanOwingAmountNodeComponentBuilder setLoanOwingAmountNodeModule(
        LoanOwingAmountNodeModule module) {
      this.loanOwingAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanOwingAmountNodeComponentImpl implements LoanOwingAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<LoanOwingAmountNodeRuleProvider>
        loanOwingAmountNodeRuleProviderMembersInjector;

    private Provider<LoanOwingAmountNodeRuleProvider> loanOwingAmountNodeRuleProvider;

    private LoanOwingAmountNodeComponentImpl(LoanOwingAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanOwingAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LoanOwingAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.loanOwingAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LoanOwingAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.loanOwingAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              LoanOwingAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.loanOwingAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.loanOwingAmountNodeRuleProviderMembersInjector =
          LoanOwingAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.loanOwingAmountNodeRuleProvider =
          DoubleCheck.provider(
              LoanOwingAmountNodeRuleProvider_Factory.create(
                  loanOwingAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanOwingAmountNodeRuleProvider getLoanOwingAmountNodeRuleProvider() {
      return loanOwingAmountNodeRuleProvider.get();
    }
  }

  private final class LoanTypeNodeComponentBuilder implements LoanTypeNodeComponent.Builder {
    private LoanTypeNodeModule loanTypeNodeModule;

    @Override
    public LoanTypeNodeComponent build() {
      if (loanTypeNodeModule == null) {
        throw new IllegalStateException(
            LoanTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanTypeNodeComponentImpl(this);
    }

    @Override
    public LoanTypeNodeComponentBuilder setLoanTypeNodeModule(LoanTypeNodeModule module) {
      this.loanTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanTypeNodeComponentImpl implements LoanTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<LoanTypeNodeRuleProvider> loanTypeNodeRuleProviderMembersInjector;

    private Provider<LoanTypeNodeRuleProvider> loanTypeNodeRuleProvider;

    private LoanTypeNodeComponentImpl(LoanTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LoanTypeNodeModule_ProvideUiNodeFactory.create(builder.loanTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LoanTypeNodeModule_ProvideLeafUiNodeFactory.create(builder.loanTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              LoanTypeNodeModule_ProvideStringUiNodeFactory.create(builder.loanTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.loanTypeNodeRuleProviderMembersInjector =
          LoanTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.loanTypeNodeRuleProvider =
          DoubleCheck.provider(
              LoanTypeNodeRuleProvider_Factory.create(loanTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanTypeNodeRuleProvider getLoanTypeNodeRuleProvider() {
      return loanTypeNodeRuleProvider.get();
    }
  }

  private final class LoanMonthlyRepaymentNodeComponentBuilder
      implements LoanMonthlyRepaymentNodeComponent.Builder {
    private LoanMonthlyRepaymentNodeModule loanMonthlyRepaymentNodeModule;

    @Override
    public LoanMonthlyRepaymentNodeComponent build() {
      if (loanMonthlyRepaymentNodeModule == null) {
        throw new IllegalStateException(
            LoanMonthlyRepaymentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanMonthlyRepaymentNodeComponentImpl(this);
    }

    @Override
    public LoanMonthlyRepaymentNodeComponentBuilder setLoanMonthlyRepaymentNodeModule(
        LoanMonthlyRepaymentNodeModule module) {
      this.loanMonthlyRepaymentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanMonthlyRepaymentNodeComponentImpl
      implements LoanMonthlyRepaymentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<LoanMonthlyRepaymentNodeRuleProvider>
        loanMonthlyRepaymentNodeRuleProviderMembersInjector;

    private Provider<LoanMonthlyRepaymentNodeRuleProvider> loanMonthlyRepaymentNodeRuleProvider;

    private LoanMonthlyRepaymentNodeComponentImpl(
        LoanMonthlyRepaymentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanMonthlyRepaymentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LoanMonthlyRepaymentNodeModule_ProvideUiNodeFactory.create(
                  builder.loanMonthlyRepaymentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LoanMonthlyRepaymentNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.loanMonthlyRepaymentNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              LoanMonthlyRepaymentNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.loanMonthlyRepaymentNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.loanMonthlyRepaymentNodeRuleProviderMembersInjector =
          LoanMonthlyRepaymentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.loanMonthlyRepaymentNodeRuleProvider =
          DoubleCheck.provider(
              LoanMonthlyRepaymentNodeRuleProvider_Factory.create(
                  loanMonthlyRepaymentNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanMonthlyRepaymentNodeRuleProvider getLoanMonthlyRepaymentNodeRuleProvider() {
      return loanMonthlyRepaymentNodeRuleProvider.get();
    }
  }

  private final class LoanClearingFlagNodeComponentBuilder
      implements LoanClearingFlagNodeComponent.Builder {
    private LoanClearingFlagNodeModule loanClearingFlagNodeModule;

    @Override
    public LoanClearingFlagNodeComponent build() {
      if (loanClearingFlagNodeModule == null) {
        throw new IllegalStateException(
            LoanClearingFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanClearingFlagNodeComponentImpl(this);
    }

    @Override
    public LoanClearingFlagNodeComponentBuilder setLoanClearingFlagNodeModule(
        LoanClearingFlagNodeModule module) {
      this.loanClearingFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanClearingFlagNodeComponentImpl implements LoanClearingFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<LoanClearingFlagNodeRuleProvider>
        loanClearingFlagNodeRuleProviderMembersInjector;

    private Provider<LoanClearingFlagNodeRuleProvider> loanClearingFlagNodeRuleProvider;

    private LoanClearingFlagNodeComponentImpl(LoanClearingFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanClearingFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LoanClearingFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.loanClearingFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LoanClearingFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.loanClearingFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              LoanClearingFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.loanClearingFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.loanClearingFlagNodeRuleProviderMembersInjector =
          LoanClearingFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.loanClearingFlagNodeRuleProvider =
          DoubleCheck.provider(
              LoanClearingFlagNodeRuleProvider_Factory.create(
                  loanClearingFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanClearingFlagNodeRuleProvider getLoanClearingFlagNodeRuleProvider() {
      return loanClearingFlagNodeRuleProvider.get();
    }
  }

  private final class LoanBreakCostNodeComponentBuilder
      implements LoanBreakCostNodeComponent.Builder {
    private LoanBreakCostNodeModule loanBreakCostNodeModule;

    @Override
    public LoanBreakCostNodeComponent build() {
      if (loanBreakCostNodeModule == null) {
        throw new IllegalStateException(
            LoanBreakCostNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanBreakCostNodeComponentImpl(this);
    }

    @Override
    public LoanBreakCostNodeComponentBuilder setLoanBreakCostNodeModule(
        LoanBreakCostNodeModule module) {
      this.loanBreakCostNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanBreakCostNodeComponentImpl implements LoanBreakCostNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<LoanBreakCostNodeRuleProvider>
        loanBreakCostNodeRuleProviderMembersInjector;

    private Provider<LoanBreakCostNodeRuleProvider> loanBreakCostNodeRuleProvider;

    private LoanBreakCostNodeComponentImpl(LoanBreakCostNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanBreakCostNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LoanBreakCostNodeModule_ProvideUiNodeFactory.create(builder.loanBreakCostNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LoanBreakCostNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.loanBreakCostNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              LoanBreakCostNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.loanBreakCostNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.loanBreakCostNodeRuleProviderMembersInjector =
          LoanBreakCostNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.loanBreakCostNodeRuleProvider =
          DoubleCheck.provider(
              LoanBreakCostNodeRuleProvider_Factory.create(
                  loanBreakCostNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanBreakCostNodeRuleProvider getLoanBreakCostNodeRuleProvider() {
      return loanBreakCostNodeRuleProvider.get();
    }
  }

  private final class LoanLenderNameNodeComponentBuilder
      implements LoanLenderNameNodeComponent.Builder {
    private LoanLenderNameNodeModule loanLenderNameNodeModule;

    @Override
    public LoanLenderNameNodeComponent build() {
      if (loanLenderNameNodeModule == null) {
        throw new IllegalStateException(
            LoanLenderNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanLenderNameNodeComponentImpl(this);
    }

    @Override
    public LoanLenderNameNodeComponentBuilder setLoanLenderNameNodeModule(
        LoanLenderNameNodeModule module) {
      this.loanLenderNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanLenderNameNodeComponentImpl implements LoanLenderNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<LoanLenderNameNodeRuleProvider>
        loanLenderNameNodeRuleProviderMembersInjector;

    private Provider<LoanLenderNameNodeRuleProvider> loanLenderNameNodeRuleProvider;

    private LoanLenderNameNodeComponentImpl(LoanLenderNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanLenderNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LoanLenderNameNodeModule_ProvideUiNodeFactory.create(
                  builder.loanLenderNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              LoanLenderNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.loanLenderNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              LoanLenderNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.loanLenderNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.loanLenderNameNodeRuleProviderMembersInjector =
          LoanLenderNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.loanLenderNameNodeRuleProvider =
          DoubleCheck.provider(
              LoanLenderNameNodeRuleProvider_Factory.create(
                  loanLenderNameNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanLenderNameNodeRuleProvider getLoanLenderNameNodeRuleProvider() {
      return loanLenderNameNodeRuleProvider.get();
    }
  }

  private final class LoanNodeComponentBuilder implements LoanNodeComponent.Builder {
    private LoanNodeModule loanNodeModule;

    @Override
    public LoanNodeComponent build() {
      if (loanNodeModule == null) {
        throw new IllegalStateException(LoanNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanNodeComponentImpl(this);
    }

    @Override
    public LoanNodeComponentBuilder setLoanNodeModule(LoanNodeModule module) {
      this.loanNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanNodeComponentImpl implements LoanNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<LoanNodeRuleProvider> loanNodeRuleProviderMembersInjector;

    private Provider<LoanNodeRuleProvider> loanNodeRuleProvider;

    private LoanNodeComponentImpl(LoanNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(LoanNodeModule_ProvideUiNodeFactory.create(builder.loanNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              LoanNodeModule_ProvideObjectUiNodeFactory.create(builder.loanNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.loanNodeRuleProviderMembersInjector =
          LoanNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.loanNodeRuleProvider =
          DoubleCheck.provider(
              LoanNodeRuleProvider_Factory.create(loanNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanNodeRuleProvider getLoanNodeRuleProvider() {
      return loanNodeRuleProvider.get();
    }
  }

  private final class LoanListNodeComponentBuilder implements LoanListNodeComponent.Builder {
    private LoanListNodeModule loanListNodeModule;

    @Override
    public LoanListNodeComponent build() {
      if (loanListNodeModule == null) {
        throw new IllegalStateException(
            LoanListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LoanListNodeComponentImpl(this);
    }

    @Override
    public LoanListNodeComponentBuilder setLoanListNodeModule(LoanListNodeModule module) {
      this.loanListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LoanListNodeComponentImpl implements LoanListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<LoanListNodeRuleProvider> loanListNodeRuleProviderMembersInjector;

    private Provider<LoanListNodeRuleProvider> loanListNodeRuleProvider;

    private LoanListNodeComponentImpl(LoanListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoanListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LoanListNodeModule_ProvideUiNodeFactory.create(builder.loanListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.loanListNodeRuleProviderMembersInjector =
          LoanListNodeRuleProvider_MembersInjector.create(clearErrorsForDisabledNodeRuleProvider);

      this.loanListNodeRuleProvider =
          DoubleCheck.provider(
              LoanListNodeRuleProvider_Factory.create(loanListNodeRuleProviderMembersInjector));
    }

    @Override
    public LoanListNodeRuleProvider getLoanListNodeRuleProvider() {
      return loanListNodeRuleProvider.get();
    }
  }

  private final class LiabilitiesNodeComponentBuilder implements LiabilitiesNodeComponent.Builder {
    private LiabilitiesNodeModule liabilitiesNodeModule;

    @Override
    public LiabilitiesNodeComponent build() {
      if (liabilitiesNodeModule == null) {
        throw new IllegalStateException(
            LiabilitiesNodeModule.class.getCanonicalName() + " must be set");
      }
      return new LiabilitiesNodeComponentImpl(this);
    }

    @Override
    public LiabilitiesNodeComponentBuilder setLiabilitiesNodeModule(LiabilitiesNodeModule module) {
      this.liabilitiesNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class LiabilitiesNodeComponentImpl implements LiabilitiesNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<LiabilitiesNodeRuleProvider> liabilitiesNodeRuleProviderMembersInjector;

    private Provider<LiabilitiesNodeRuleProvider> liabilitiesNodeRuleProvider;

    private LiabilitiesNodeComponentImpl(LiabilitiesNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LiabilitiesNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              LiabilitiesNodeModule_ProvideUiNodeFactory.create(builder.liabilitiesNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              LiabilitiesNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.liabilitiesNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.liabilitiesNodeRuleProviderMembersInjector =
          LiabilitiesNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.liabilitiesNodeRuleProvider =
          DoubleCheck.provider(
              LiabilitiesNodeRuleProvider_Factory.create(
                  liabilitiesNodeRuleProviderMembersInjector));
    }

    @Override
    public LiabilitiesNodeRuleProvider getLiabilitiesNodeRuleProvider() {
      return liabilitiesNodeRuleProvider.get();
    }
  }

  private final class OtherAssetDescriptionNodeComponentBuilder
      implements OtherAssetDescriptionNodeComponent.Builder {
    private OtherAssetDescriptionNodeModule otherAssetDescriptionNodeModule;

    @Override
    public OtherAssetDescriptionNodeComponent build() {
      if (otherAssetDescriptionNodeModule == null) {
        throw new IllegalStateException(
            OtherAssetDescriptionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherAssetDescriptionNodeComponentImpl(this);
    }

    @Override
    public OtherAssetDescriptionNodeComponentBuilder setOtherAssetDescriptionNodeModule(
        OtherAssetDescriptionNodeModule module) {
      this.otherAssetDescriptionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherAssetDescriptionNodeComponentImpl
      implements OtherAssetDescriptionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<OtherAssetDescriptionNodeRuleProvider>
        otherAssetDescriptionNodeRuleProviderMembersInjector;

    private Provider<OtherAssetDescriptionNodeRuleProvider> otherAssetDescriptionNodeRuleProvider;

    private OtherAssetDescriptionNodeComponentImpl(
        OtherAssetDescriptionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherAssetDescriptionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetDescriptionNodeModule_ProvideUiNodeFactory.create(
                  builder.otherAssetDescriptionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetDescriptionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherAssetDescriptionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetDescriptionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.otherAssetDescriptionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.otherAssetDescriptionNodeRuleProviderMembersInjector =
          OtherAssetDescriptionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.otherAssetDescriptionNodeRuleProvider =
          DoubleCheck.provider(
              OtherAssetDescriptionNodeRuleProvider_Factory.create(
                  otherAssetDescriptionNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherAssetDescriptionNodeRuleProvider getOtherAssetDescriptionNodeRuleProvider() {
      return otherAssetDescriptionNodeRuleProvider.get();
    }
  }

  private final class OtherAssetTypeNodeComponentBuilder
      implements OtherAssetTypeNodeComponent.Builder {
    private OtherAssetTypeNodeModule otherAssetTypeNodeModule;

    @Override
    public OtherAssetTypeNodeComponent build() {
      if (otherAssetTypeNodeModule == null) {
        throw new IllegalStateException(
            OtherAssetTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherAssetTypeNodeComponentImpl(this);
    }

    @Override
    public OtherAssetTypeNodeComponentBuilder setOtherAssetTypeNodeModule(
        OtherAssetTypeNodeModule module) {
      this.otherAssetTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherAssetTypeNodeComponentImpl implements OtherAssetTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<OtherAssetTypeNodeRuleProvider>
        otherAssetTypeNodeRuleProviderMembersInjector;

    private Provider<OtherAssetTypeNodeRuleProvider> otherAssetTypeNodeRuleProvider;

    private OtherAssetTypeNodeComponentImpl(OtherAssetTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherAssetTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.otherAssetTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherAssetTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.otherAssetTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.otherAssetTypeNodeRuleProviderMembersInjector =
          OtherAssetTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.otherAssetTypeNodeRuleProvider =
          DoubleCheck.provider(
              OtherAssetTypeNodeRuleProvider_Factory.create(
                  otherAssetTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherAssetTypeNodeRuleProvider getOtherAssetTypeNodeRuleProvider() {
      return otherAssetTypeNodeRuleProvider.get();
    }
  }

  private final class OtherAssetMarketValueNodeComponentBuilder
      implements OtherAssetMarketValueNodeComponent.Builder {
    private OtherAssetMarketValueNodeModule otherAssetMarketValueNodeModule;

    @Override
    public OtherAssetMarketValueNodeComponent build() {
      if (otherAssetMarketValueNodeModule == null) {
        throw new IllegalStateException(
            OtherAssetMarketValueNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherAssetMarketValueNodeComponentImpl(this);
    }

    @Override
    public OtherAssetMarketValueNodeComponentBuilder setOtherAssetMarketValueNodeModule(
        OtherAssetMarketValueNodeModule module) {
      this.otherAssetMarketValueNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherAssetMarketValueNodeComponentImpl
      implements OtherAssetMarketValueNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<OtherAssetMarketValueNodeRuleProvider>
        otherAssetMarketValueNodeRuleProviderMembersInjector;

    private Provider<OtherAssetMarketValueNodeRuleProvider> otherAssetMarketValueNodeRuleProvider;

    private OtherAssetMarketValueNodeComponentImpl(
        OtherAssetMarketValueNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherAssetMarketValueNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetMarketValueNodeModule_ProvideUiNodeFactory.create(
                  builder.otherAssetMarketValueNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetMarketValueNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.otherAssetMarketValueNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetMarketValueNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.otherAssetMarketValueNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.otherAssetMarketValueNodeRuleProviderMembersInjector =
          OtherAssetMarketValueNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.otherAssetMarketValueNodeRuleProvider =
          DoubleCheck.provider(
              OtherAssetMarketValueNodeRuleProvider_Factory.create(
                  otherAssetMarketValueNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherAssetMarketValueNodeRuleProvider getOtherAssetMarketValueNodeRuleProvider() {
      return otherAssetMarketValueNodeRuleProvider.get();
    }
  }

  private final class OtherAssetNodeComponentBuilder implements OtherAssetNodeComponent.Builder {
    private OtherAssetNodeModule otherAssetNodeModule;

    @Override
    public OtherAssetNodeComponent build() {
      if (otherAssetNodeModule == null) {
        throw new IllegalStateException(
            OtherAssetNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherAssetNodeComponentImpl(this);
    }

    @Override
    public OtherAssetNodeComponentBuilder setOtherAssetNodeModule(OtherAssetNodeModule module) {
      this.otherAssetNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherAssetNodeComponentImpl implements OtherAssetNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<OtherAssetNodeRuleProvider> otherAssetNodeRuleProviderMembersInjector;

    private Provider<OtherAssetNodeRuleProvider> otherAssetNodeRuleProvider;

    private OtherAssetNodeComponentImpl(OtherAssetNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherAssetNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetNodeModule_ProvideUiNodeFactory.create(builder.otherAssetNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetNodeModule_ProvideObjectUiNodeFactory.create(builder.otherAssetNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.otherAssetNodeRuleProviderMembersInjector =
          OtherAssetNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.otherAssetNodeRuleProvider =
          DoubleCheck.provider(
              OtherAssetNodeRuleProvider_Factory.create(otherAssetNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherAssetNodeRuleProvider getOtherAssetNodeRuleProvider() {
      return otherAssetNodeRuleProvider.get();
    }
  }

  private final class OtherAssetListNodeComponentBuilder
      implements OtherAssetListNodeComponent.Builder {
    private OtherAssetListNodeModule otherAssetListNodeModule;

    @Override
    public OtherAssetListNodeComponent build() {
      if (otherAssetListNodeModule == null) {
        throw new IllegalStateException(
            OtherAssetListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OtherAssetListNodeComponentImpl(this);
    }

    @Override
    public OtherAssetListNodeComponentBuilder setOtherAssetListNodeModule(
        OtherAssetListNodeModule module) {
      this.otherAssetListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OtherAssetListNodeComponentImpl implements OtherAssetListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<OtherAssetListNodeRuleProvider>
        otherAssetListNodeRuleProviderMembersInjector;

    private Provider<OtherAssetListNodeRuleProvider> otherAssetListNodeRuleProvider;

    private OtherAssetListNodeComponentImpl(OtherAssetListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OtherAssetListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OtherAssetListNodeModule_ProvideUiNodeFactory.create(
                  builder.otherAssetListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.otherAssetListNodeRuleProviderMembersInjector =
          OtherAssetListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.otherAssetListNodeRuleProvider =
          DoubleCheck.provider(
              OtherAssetListNodeRuleProvider_Factory.create(
                  otherAssetListNodeRuleProviderMembersInjector));
    }

    @Override
    public OtherAssetListNodeRuleProvider getOtherAssetListNodeRuleProvider() {
      return otherAssetListNodeRuleProvider.get();
    }
  }

  private final class VehicleYearNodeComponentBuilder implements VehicleYearNodeComponent.Builder {
    private VehicleYearNodeModule vehicleYearNodeModule;

    @Override
    public VehicleYearNodeComponent build() {
      if (vehicleYearNodeModule == null) {
        throw new IllegalStateException(
            VehicleYearNodeModule.class.getCanonicalName() + " must be set");
      }
      return new VehicleYearNodeComponentImpl(this);
    }

    @Override
    public VehicleYearNodeComponentBuilder setVehicleYearNodeModule(VehicleYearNodeModule module) {
      this.vehicleYearNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class VehicleYearNodeComponentImpl implements VehicleYearNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<VehicleYearNodeRuleProvider> vehicleYearNodeRuleProviderMembersInjector;

    private Provider<VehicleYearNodeRuleProvider> vehicleYearNodeRuleProvider;

    private VehicleYearNodeComponentImpl(VehicleYearNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final VehicleYearNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              VehicleYearNodeModule_ProvideUiNodeFactory.create(builder.vehicleYearNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              VehicleYearNodeModule_ProvideLeafUiNodeFactory.create(builder.vehicleYearNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              VehicleYearNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.vehicleYearNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.vehicleYearNodeRuleProviderMembersInjector =
          VehicleYearNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.vehicleYearNodeRuleProvider =
          DoubleCheck.provider(
              VehicleYearNodeRuleProvider_Factory.create(
                  vehicleYearNodeRuleProviderMembersInjector));
    }

    @Override
    public VehicleYearNodeRuleProvider getVehicleYearNodeRuleProvider() {
      return vehicleYearNodeRuleProvider.get();
    }
  }

  private final class VehicleModelNodeComponentBuilder
      implements VehicleModelNodeComponent.Builder {
    private VehicleModelNodeModule vehicleModelNodeModule;

    @Override
    public VehicleModelNodeComponent build() {
      if (vehicleModelNodeModule == null) {
        throw new IllegalStateException(
            VehicleModelNodeModule.class.getCanonicalName() + " must be set");
      }
      return new VehicleModelNodeComponentImpl(this);
    }

    @Override
    public VehicleModelNodeComponentBuilder setVehicleModelNodeModule(
        VehicleModelNodeModule module) {
      this.vehicleModelNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class VehicleModelNodeComponentImpl implements VehicleModelNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<VehicleModelNodeRuleProvider>
        vehicleModelNodeRuleProviderMembersInjector;

    private Provider<VehicleModelNodeRuleProvider> vehicleModelNodeRuleProvider;

    private VehicleModelNodeComponentImpl(VehicleModelNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final VehicleModelNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              VehicleModelNodeModule_ProvideUiNodeFactory.create(builder.vehicleModelNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              VehicleModelNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.vehicleModelNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              VehicleModelNodeModule_ProvideStringUiNodeFactory.create(
                  builder.vehicleModelNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.vehicleModelNodeRuleProviderMembersInjector =
          VehicleModelNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.vehicleModelNodeRuleProvider =
          DoubleCheck.provider(
              VehicleModelNodeRuleProvider_Factory.create(
                  vehicleModelNodeRuleProviderMembersInjector));
    }

    @Override
    public VehicleModelNodeRuleProvider getVehicleModelNodeRuleProvider() {
      return vehicleModelNodeRuleProvider.get();
    }
  }

  private final class VehicleMarketValueNodeComponentBuilder
      implements VehicleMarketValueNodeComponent.Builder {
    private VehicleMarketValueNodeModule vehicleMarketValueNodeModule;

    @Override
    public VehicleMarketValueNodeComponent build() {
      if (vehicleMarketValueNodeModule == null) {
        throw new IllegalStateException(
            VehicleMarketValueNodeModule.class.getCanonicalName() + " must be set");
      }
      return new VehicleMarketValueNodeComponentImpl(this);
    }

    @Override
    public VehicleMarketValueNodeComponentBuilder setVehicleMarketValueNodeModule(
        VehicleMarketValueNodeModule module) {
      this.vehicleMarketValueNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class VehicleMarketValueNodeComponentImpl
      implements VehicleMarketValueNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<VehicleMarketValueNodeRuleProvider>
        vehicleMarketValueNodeRuleProviderMembersInjector;

    private Provider<VehicleMarketValueNodeRuleProvider> vehicleMarketValueNodeRuleProvider;

    private VehicleMarketValueNodeComponentImpl(VehicleMarketValueNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final VehicleMarketValueNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              VehicleMarketValueNodeModule_ProvideUiNodeFactory.create(
                  builder.vehicleMarketValueNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              VehicleMarketValueNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.vehicleMarketValueNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              VehicleMarketValueNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.vehicleMarketValueNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.vehicleMarketValueNodeRuleProviderMembersInjector =
          VehicleMarketValueNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.vehicleMarketValueNodeRuleProvider =
          DoubleCheck.provider(
              VehicleMarketValueNodeRuleProvider_Factory.create(
                  vehicleMarketValueNodeRuleProviderMembersInjector));
    }

    @Override
    public VehicleMarketValueNodeRuleProvider getVehicleMarketValueNodeRuleProvider() {
      return vehicleMarketValueNodeRuleProvider.get();
    }
  }

  private final class MotorVehicleNodeComponentBuilder
      implements MotorVehicleNodeComponent.Builder {
    private MotorVehicleNodeModule motorVehicleNodeModule;

    @Override
    public MotorVehicleNodeComponent build() {
      if (motorVehicleNodeModule == null) {
        throw new IllegalStateException(
            MotorVehicleNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MotorVehicleNodeComponentImpl(this);
    }

    @Override
    public MotorVehicleNodeComponentBuilder setMotorVehicleNodeModule(
        MotorVehicleNodeModule module) {
      this.motorVehicleNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MotorVehicleNodeComponentImpl implements MotorVehicleNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<MotorVehicleNodeRuleProvider>
        motorVehicleNodeRuleProviderMembersInjector;

    private Provider<MotorVehicleNodeRuleProvider> motorVehicleNodeRuleProvider;

    private MotorVehicleNodeComponentImpl(MotorVehicleNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MotorVehicleNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MotorVehicleNodeModule_ProvideUiNodeFactory.create(builder.motorVehicleNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              MotorVehicleNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.motorVehicleNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.motorVehicleNodeRuleProviderMembersInjector =
          MotorVehicleNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.motorVehicleNodeRuleProvider =
          DoubleCheck.provider(
              MotorVehicleNodeRuleProvider_Factory.create(
                  motorVehicleNodeRuleProviderMembersInjector));
    }

    @Override
    public MotorVehicleNodeRuleProvider getMotorVehicleNodeRuleProvider() {
      return motorVehicleNodeRuleProvider.get();
    }
  }

  private final class MotorVehicleListNodeComponentBuilder
      implements MotorVehicleListNodeComponent.Builder {
    private MotorVehicleListNodeModule motorVehicleListNodeModule;

    @Override
    public MotorVehicleListNodeComponent build() {
      if (motorVehicleListNodeModule == null) {
        throw new IllegalStateException(
            MotorVehicleListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MotorVehicleListNodeComponentImpl(this);
    }

    @Override
    public MotorVehicleListNodeComponentBuilder setMotorVehicleListNodeModule(
        MotorVehicleListNodeModule module) {
      this.motorVehicleListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MotorVehicleListNodeComponentImpl implements MotorVehicleListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<MotorVehicleListNodeRuleProvider>
        motorVehicleListNodeRuleProviderMembersInjector;

    private Provider<MotorVehicleListNodeRuleProvider> motorVehicleListNodeRuleProvider;

    private MotorVehicleListNodeComponentImpl(MotorVehicleListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MotorVehicleListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MotorVehicleListNodeModule_ProvideUiNodeFactory.create(
                  builder.motorVehicleListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.motorVehicleListNodeRuleProviderMembersInjector =
          MotorVehicleListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.motorVehicleListNodeRuleProvider =
          DoubleCheck.provider(
              MotorVehicleListNodeRuleProvider_Factory.create(
                  motorVehicleListNodeRuleProviderMembersInjector));
    }

    @Override
    public MotorVehicleListNodeRuleProvider getMotorVehicleListNodeRuleProvider() {
      return motorVehicleListNodeRuleProvider.get();
    }
  }

  private final class SavingsTypeNodeComponentBuilder implements SavingsTypeNodeComponent.Builder {
    private SavingsTypeNodeModule savingsTypeNodeModule;

    @Override
    public SavingsTypeNodeComponent build() {
      if (savingsTypeNodeModule == null) {
        throw new IllegalStateException(
            SavingsTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsTypeNodeComponentImpl(this);
    }

    @Override
    public SavingsTypeNodeComponentBuilder setSavingsTypeNodeModule(SavingsTypeNodeModule module) {
      this.savingsTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsTypeNodeComponentImpl implements SavingsTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<SavingsTypeNodeRuleProvider> savingsTypeNodeRuleProviderMembersInjector;

    private Provider<SavingsTypeNodeRuleProvider> savingsTypeNodeRuleProvider;

    private SavingsTypeNodeComponentImpl(SavingsTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsTypeNodeModule_ProvideUiNodeFactory.create(builder.savingsTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SavingsTypeNodeModule_ProvideLeafUiNodeFactory.create(builder.savingsTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              SavingsTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.savingsTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.savingsTypeNodeRuleProviderMembersInjector =
          SavingsTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.savingsTypeNodeRuleProvider =
          DoubleCheck.provider(
              SavingsTypeNodeRuleProvider_Factory.create(
                  savingsTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsTypeNodeRuleProvider getSavingsTypeNodeRuleProvider() {
      return savingsTypeNodeRuleProvider.get();
    }
  }

  private final class SavingsInstitutionNameNodeComponentBuilder
      implements SavingsInstitutionNameNodeComponent.Builder {
    private SavingsInstitutionNameNodeModule savingsInstitutionNameNodeModule;

    @Override
    public SavingsInstitutionNameNodeComponent build() {
      if (savingsInstitutionNameNodeModule == null) {
        throw new IllegalStateException(
            SavingsInstitutionNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsInstitutionNameNodeComponentImpl(this);
    }

    @Override
    public SavingsInstitutionNameNodeComponentBuilder setSavingsInstitutionNameNodeModule(
        SavingsInstitutionNameNodeModule module) {
      this.savingsInstitutionNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsInstitutionNameNodeComponentImpl
      implements SavingsInstitutionNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<SavingsInstitutionNameNodeRuleProvider>
        savingsInstitutionNameNodeRuleProviderMembersInjector;

    private Provider<SavingsInstitutionNameNodeRuleProvider> savingsInstitutionNameNodeRuleProvider;

    private SavingsInstitutionNameNodeComponentImpl(
        SavingsInstitutionNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsInstitutionNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsInstitutionNameNodeModule_ProvideUiNodeFactory.create(
                  builder.savingsInstitutionNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SavingsInstitutionNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.savingsInstitutionNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              SavingsInstitutionNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.savingsInstitutionNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.savingsInstitutionNameNodeRuleProviderMembersInjector =
          SavingsInstitutionNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.savingsInstitutionNameNodeRuleProvider =
          DoubleCheck.provider(
              SavingsInstitutionNameNodeRuleProvider_Factory.create(
                  savingsInstitutionNameNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsInstitutionNameNodeRuleProvider getSavingsInstitutionNameNodeRuleProvider() {
      return savingsInstitutionNameNodeRuleProvider.get();
    }
  }

  private final class SavingsBalanceNodeComponentBuilder
      implements SavingsBalanceNodeComponent.Builder {
    private SavingsBalanceNodeModule savingsBalanceNodeModule;

    @Override
    public SavingsBalanceNodeComponent build() {
      if (savingsBalanceNodeModule == null) {
        throw new IllegalStateException(
            SavingsBalanceNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsBalanceNodeComponentImpl(this);
    }

    @Override
    public SavingsBalanceNodeComponentBuilder setSavingsBalanceNodeModule(
        SavingsBalanceNodeModule module) {
      this.savingsBalanceNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsBalanceNodeComponentImpl implements SavingsBalanceNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<SavingsBalanceNodeRuleProvider>
        savingsBalanceNodeRuleProviderMembersInjector;

    private Provider<SavingsBalanceNodeRuleProvider> savingsBalanceNodeRuleProvider;

    private SavingsBalanceNodeComponentImpl(SavingsBalanceNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsBalanceNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsBalanceNodeModule_ProvideUiNodeFactory.create(
                  builder.savingsBalanceNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SavingsBalanceNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.savingsBalanceNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              SavingsBalanceNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.savingsBalanceNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.savingsBalanceNodeRuleProviderMembersInjector =
          SavingsBalanceNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.savingsBalanceNodeRuleProvider =
          DoubleCheck.provider(
              SavingsBalanceNodeRuleProvider_Factory.create(
                  savingsBalanceNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsBalanceNodeRuleProvider getSavingsBalanceNodeRuleProvider() {
      return savingsBalanceNodeRuleProvider.get();
    }
  }

  private final class SavingsAccountNoNodeComponentBuilder
      implements SavingsAccountNoNodeComponent.Builder {
    private SavingsAccountNoNodeModule savingsAccountNoNodeModule;

    @Override
    public SavingsAccountNoNodeComponent build() {
      if (savingsAccountNoNodeModule == null) {
        throw new IllegalStateException(
            SavingsAccountNoNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsAccountNoNodeComponentImpl(this);
    }

    @Override
    public SavingsAccountNoNodeComponentBuilder setSavingsAccountNoNodeModule(
        SavingsAccountNoNodeModule module) {
      this.savingsAccountNoNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsAccountNoNodeComponentImpl implements SavingsAccountNoNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<SavingsAccountNoNodeRuleProvider>
        savingsAccountNoNodeRuleProviderMembersInjector;

    private Provider<SavingsAccountNoNodeRuleProvider> savingsAccountNoNodeRuleProvider;

    private SavingsAccountNoNodeComponentImpl(SavingsAccountNoNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsAccountNoNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountNoNodeModule_ProvideUiNodeFactory.create(
                  builder.savingsAccountNoNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountNoNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.savingsAccountNoNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountNoNodeModule_ProvideStringUiNodeFactory.create(
                  builder.savingsAccountNoNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.savingsAccountNoNodeRuleProviderMembersInjector =
          SavingsAccountNoNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.savingsAccountNoNodeRuleProvider =
          DoubleCheck.provider(
              SavingsAccountNoNodeRuleProvider_Factory.create(
                  savingsAccountNoNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsAccountNoNodeRuleProvider getSavingsAccountNoNodeRuleProvider() {
      return savingsAccountNoNodeRuleProvider.get();
    }
  }

  private final class SavingsAccountNameNodeComponentBuilder
      implements SavingsAccountNameNodeComponent.Builder {
    private SavingsAccountNameNodeModule savingsAccountNameNodeModule;

    @Override
    public SavingsAccountNameNodeComponent build() {
      if (savingsAccountNameNodeModule == null) {
        throw new IllegalStateException(
            SavingsAccountNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsAccountNameNodeComponentImpl(this);
    }

    @Override
    public SavingsAccountNameNodeComponentBuilder setSavingsAccountNameNodeModule(
        SavingsAccountNameNodeModule module) {
      this.savingsAccountNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsAccountNameNodeComponentImpl
      implements SavingsAccountNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<SavingsAccountNameNodeRuleProvider>
        savingsAccountNameNodeRuleProviderMembersInjector;

    private Provider<SavingsAccountNameNodeRuleProvider> savingsAccountNameNodeRuleProvider;

    private SavingsAccountNameNodeComponentImpl(SavingsAccountNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsAccountNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountNameNodeModule_ProvideUiNodeFactory.create(
                  builder.savingsAccountNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.savingsAccountNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.savingsAccountNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.savingsAccountNameNodeRuleProviderMembersInjector =
          SavingsAccountNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.savingsAccountNameNodeRuleProvider =
          DoubleCheck.provider(
              SavingsAccountNameNodeRuleProvider_Factory.create(
                  savingsAccountNameNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsAccountNameNodeRuleProvider getSavingsAccountNameNodeRuleProvider() {
      return savingsAccountNameNodeRuleProvider.get();
    }
  }

  private final class SavingsBsbNoNodeComponentBuilder
      implements SavingsBsbNoNodeComponent.Builder {
    private SavingsBsbNoNodeModule savingsBsbNoNodeModule;

    @Override
    public SavingsBsbNoNodeComponent build() {
      if (savingsBsbNoNodeModule == null) {
        throw new IllegalStateException(
            SavingsBsbNoNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsBsbNoNodeComponentImpl(this);
    }

    @Override
    public SavingsBsbNoNodeComponentBuilder setSavingsBsbNoNodeModule(
        SavingsBsbNoNodeModule module) {
      this.savingsBsbNoNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsBsbNoNodeComponentImpl implements SavingsBsbNoNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<SavingsBsbNoNodeRuleProvider>
        savingsBsbNoNodeRuleProviderMembersInjector;

    private Provider<SavingsBsbNoNodeRuleProvider> savingsBsbNoNodeRuleProvider;

    private SavingsBsbNoNodeComponentImpl(SavingsBsbNoNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsBsbNoNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsBsbNoNodeModule_ProvideUiNodeFactory.create(builder.savingsBsbNoNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SavingsBsbNoNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.savingsBsbNoNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              SavingsBsbNoNodeModule_ProvideStringUiNodeFactory.create(
                  builder.savingsBsbNoNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.savingsBsbNoNodeRuleProviderMembersInjector =
          SavingsBsbNoNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.savingsBsbNoNodeRuleProvider =
          DoubleCheck.provider(
              SavingsBsbNoNodeRuleProvider_Factory.create(
                  savingsBsbNoNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsBsbNoNodeRuleProvider getSavingsBsbNoNodeRuleProvider() {
      return savingsBsbNoNodeRuleProvider.get();
    }
  }

  private final class ApplicantReferenceNodeComponentBuilder
      implements ApplicantReferenceNodeComponent.Builder {
    private ApplicantReferenceNodeModule applicantReferenceNodeModule;

    @Override
    public ApplicantReferenceNodeComponent build() {
      if (applicantReferenceNodeModule == null) {
        throw new IllegalStateException(
            ApplicantReferenceNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ApplicantReferenceNodeComponentImpl(this);
    }

    @Override
    public ApplicantReferenceNodeComponentBuilder setApplicantReferenceNodeModule(
        ApplicantReferenceNodeModule module) {
      this.applicantReferenceNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ApplicantReferenceNodeComponentImpl
      implements ApplicantReferenceNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private MembersInjector<NodeReferenceChangeRule> nodeReferenceChangeRuleMembersInjector;

    private Provider<ReferenceUiNode<?>> provideReferenceUiNodeProvider;

    private Provider<NodeReferenceChangeRule> nodeReferenceChangeRuleProvider;

    private MembersInjector<ApplicantReferenceNodeRuleProvider>
        applicantReferenceNodeRuleProviderMembersInjector;

    private Provider<ApplicantReferenceNodeRuleProvider> applicantReferenceNodeRuleProvider;

    private ApplicantReferenceNodeComponentImpl(ApplicantReferenceNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicantReferenceNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ApplicantReferenceNodeModule_ProvideUiNodeFactory.create(
                  builder.applicantReferenceNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ApplicantReferenceNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.applicantReferenceNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.nodeReferenceChangeRuleMembersInjector =
          NodeReferenceChangeRule_MembersInjector.create(
              DaggerDefaultProfileComponent.this.nodeReferenceRegistryProvider);

      this.provideReferenceUiNodeProvider =
          DoubleCheck.provider(
              ApplicantReferenceNodeModule_ProvideReferenceUiNodeFactory.create(
                  builder.applicantReferenceNodeModule));

      this.nodeReferenceChangeRuleProvider =
          NodeReferenceChangeRule_Factory.create(
              nodeReferenceChangeRuleMembersInjector, provideReferenceUiNodeProvider);

      this.applicantReferenceNodeRuleProviderMembersInjector =
          ApplicantReferenceNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              nodeReferenceChangeRuleProvider);

      this.applicantReferenceNodeRuleProvider =
          DoubleCheck.provider(
              ApplicantReferenceNodeRuleProvider_Factory.create(
                  applicantReferenceNodeRuleProviderMembersInjector));
    }

    @Override
    public ApplicantReferenceNodeRuleProvider getApplicantReferenceNodeRuleProvider() {
      return applicantReferenceNodeRuleProvider.get();
    }
  }

  private final class AverageFlagNodeComponentBuilder implements AverageFlagNodeComponent.Builder {
    private AverageFlagNodeModule averageFlagNodeModule;

    @Override
    public AverageFlagNodeComponent build() {
      if (averageFlagNodeModule == null) {
        throw new IllegalStateException(
            AverageFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AverageFlagNodeComponentImpl(this);
    }

    @Override
    public AverageFlagNodeComponentBuilder setAverageFlagNodeModule(AverageFlagNodeModule module) {
      this.averageFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AverageFlagNodeComponentImpl implements AverageFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<AverageFlagNodeRuleProvider> averageFlagNodeRuleProviderMembersInjector;

    private Provider<AverageFlagNodeRuleProvider> averageFlagNodeRuleProvider;

    private AverageFlagNodeComponentImpl(AverageFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AverageFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AverageFlagNodeModule_ProvideUiNodeFactory.create(builder.averageFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AverageFlagNodeModule_ProvideLeafUiNodeFactory.create(builder.averageFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              AverageFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.averageFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.averageFlagNodeRuleProviderMembersInjector =
          AverageFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.averageFlagNodeRuleProvider =
          DoubleCheck.provider(
              AverageFlagNodeRuleProvider_Factory.create(
                  averageFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public AverageFlagNodeRuleProvider getAverageFlagNodeRuleProvider() {
      return averageFlagNodeRuleProvider.get();
    }
  }

  private final class OwnershipPercentageNodeComponentBuilder
      implements OwnershipPercentageNodeComponent.Builder {
    private OwnershipPercentageNodeModule ownershipPercentageNodeModule;

    @Override
    public OwnershipPercentageNodeComponent build() {
      if (ownershipPercentageNodeModule == null) {
        throw new IllegalStateException(
            OwnershipPercentageNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OwnershipPercentageNodeComponentImpl(this);
    }

    @Override
    public OwnershipPercentageNodeComponentBuilder setOwnershipPercentageNodeModule(
        OwnershipPercentageNodeModule module) {
      this.ownershipPercentageNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OwnershipPercentageNodeComponentImpl
      implements OwnershipPercentageNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<OwnershipPercentageNodeRuleProvider>
        ownershipPercentageNodeRuleProviderMembersInjector;

    private Provider<OwnershipPercentageNodeRuleProvider> ownershipPercentageNodeRuleProvider;

    private OwnershipPercentageNodeComponentImpl(OwnershipPercentageNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OwnershipPercentageNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OwnershipPercentageNodeModule_ProvideUiNodeFactory.create(
                  builder.ownershipPercentageNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OwnershipPercentageNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.ownershipPercentageNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              OwnershipPercentageNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.ownershipPercentageNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.ownershipPercentageNodeRuleProviderMembersInjector =
          OwnershipPercentageNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.ownershipPercentageNodeRuleProvider =
          DoubleCheck.provider(
              OwnershipPercentageNodeRuleProvider_Factory.create(
                  ownershipPercentageNodeRuleProviderMembersInjector));
    }

    @Override
    public OwnershipPercentageNodeRuleProvider getOwnershipPercentageNodeRuleProvider() {
      return ownershipPercentageNodeRuleProvider.get();
    }
  }

  private final class OwnershipNodeComponentBuilder implements OwnershipNodeComponent.Builder {
    private OwnershipNodeModule ownershipNodeModule;

    @Override
    public OwnershipNodeComponent build() {
      if (ownershipNodeModule == null) {
        throw new IllegalStateException(
            OwnershipNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OwnershipNodeComponentImpl(this);
    }

    @Override
    public OwnershipNodeComponentBuilder setOwnershipNodeModule(OwnershipNodeModule module) {
      this.ownershipNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OwnershipNodeComponentImpl implements OwnershipNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<OwnershipNodeRuleProvider> ownershipNodeRuleProviderMembersInjector;

    private Provider<OwnershipNodeRuleProvider> ownershipNodeRuleProvider;

    private OwnershipNodeComponentImpl(OwnershipNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OwnershipNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OwnershipNodeModule_ProvideUiNodeFactory.create(builder.ownershipNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              OwnershipNodeModule_ProvideObjectUiNodeFactory.create(builder.ownershipNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.ownershipNodeRuleProviderMembersInjector =
          OwnershipNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.ownershipNodeRuleProvider =
          DoubleCheck.provider(
              OwnershipNodeRuleProvider_Factory.create(ownershipNodeRuleProviderMembersInjector));
    }

    @Override
    public OwnershipNodeRuleProvider getOwnershipNodeRuleProvider() {
      return ownershipNodeRuleProvider.get();
    }
  }

  private final class SavingsOwnershipListNodeComponentBuilder
      implements SavingsOwnershipListNodeComponent.Builder {
    private SavingsOwnershipListNodeModule savingsOwnershipListNodeModule;

    @Override
    public SavingsOwnershipListNodeComponent build() {
      if (savingsOwnershipListNodeModule == null) {
        throw new IllegalStateException(
            SavingsOwnershipListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsOwnershipListNodeComponentImpl(this);
    }

    @Override
    public SavingsOwnershipListNodeComponentBuilder setSavingsOwnershipListNodeModule(
        SavingsOwnershipListNodeModule module) {
      this.savingsOwnershipListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsOwnershipListNodeComponentImpl
      implements SavingsOwnershipListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<OwnershipListNode<?>> provideOwnershipListNodeProvider;

    private Provider<AddExistingApplicantsRuleImpl> addExistingApplicantsRuleImplProvider;

    private Provider<AddExistingApplicantsRule> provideAddExistingApplicantsRuleProvider;

    private Provider<AddNewPersonApplicantRuleImpl> addNewPersonApplicantRuleImplProvider;

    private Provider<AddNewPersonApplicantRule> provideAddNewPersonApplicantRuleProvider;

    private Provider<AddNewCompanyApplicantRuleImpl> addNewCompanyApplicantRuleImplProvider;

    private Provider<AddNewCompanyApplicantRule> provideAddNewCompanyApplicantRuleProvider;

    private MembersInjector<SavingsOwnershipListNodeRuleProvider>
        savingsOwnershipListNodeRuleProviderMembersInjector;

    private Provider<SavingsOwnershipListNodeRuleProvider> savingsOwnershipListNodeRuleProvider;

    private SavingsOwnershipListNodeComponentImpl(
        SavingsOwnershipListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsOwnershipListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsOwnershipListNodeModule_ProvideUiNodeFactory.create(
                  builder.savingsOwnershipListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideOwnershipListNodeProvider =
          DoubleCheck.provider(
              SavingsOwnershipListNodeModule_ProvideOwnershipListNodeFactory.create(
                  builder.savingsOwnershipListNodeModule));

      this.addExistingApplicantsRuleImplProvider =
          AddExistingApplicantsRuleImpl_Factory.create(
              MembersInjectors.<AddExistingApplicantsRuleImpl>noOp(),
              provideOwnershipListNodeProvider);

      this.provideAddExistingApplicantsRuleProvider =
          (Provider) addExistingApplicantsRuleImplProvider;

      this.addNewPersonApplicantRuleImplProvider =
          AddNewPersonApplicantRuleImpl_Factory.create(
              MembersInjectors.<AddNewPersonApplicantRuleImpl>noOp(),
              provideOwnershipListNodeProvider);

      this.provideAddNewPersonApplicantRuleProvider =
          (Provider) addNewPersonApplicantRuleImplProvider;

      this.addNewCompanyApplicantRuleImplProvider =
          AddNewCompanyApplicantRuleImpl_Factory.create(
              MembersInjectors.<AddNewCompanyApplicantRuleImpl>noOp(),
              provideOwnershipListNodeProvider);

      this.provideAddNewCompanyApplicantRuleProvider =
          (Provider) addNewCompanyApplicantRuleImplProvider;

      this.savingsOwnershipListNodeRuleProviderMembersInjector =
          SavingsOwnershipListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              provideAddExistingApplicantsRuleProvider,
              provideAddNewPersonApplicantRuleProvider,
              provideAddNewCompanyApplicantRuleProvider);

      this.savingsOwnershipListNodeRuleProvider =
          DoubleCheck.provider(
              SavingsOwnershipListNodeRuleProvider_Factory.create(
                  savingsOwnershipListNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsOwnershipListNodeRuleProvider getSavingsOwnershipListNodeRuleProvider() {
      return savingsOwnershipListNodeRuleProvider.get();
    }
  }

  private final class SavingsAccountNodeComponentBuilder
      implements SavingsAccountNodeComponent.Builder {
    private SavingsAccountNodeModule savingsAccountNodeModule;

    @Override
    public SavingsAccountNodeComponent build() {
      if (savingsAccountNodeModule == null) {
        throw new IllegalStateException(
            SavingsAccountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsAccountNodeComponentImpl(this);
    }

    @Override
    public SavingsAccountNodeComponentBuilder setSavingsAccountNodeModule(
        SavingsAccountNodeModule module) {
      this.savingsAccountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsAccountNodeComponentImpl implements SavingsAccountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<SavingsAccountNodeRuleProvider>
        savingsAccountNodeRuleProviderMembersInjector;

    private Provider<SavingsAccountNodeRuleProvider> savingsAccountNodeRuleProvider;

    private SavingsAccountNodeComponentImpl(SavingsAccountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsAccountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountNodeModule_ProvideUiNodeFactory.create(
                  builder.savingsAccountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.savingsAccountNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.savingsAccountNodeRuleProviderMembersInjector =
          SavingsAccountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.savingsAccountNodeRuleProvider =
          DoubleCheck.provider(
              SavingsAccountNodeRuleProvider_Factory.create(
                  savingsAccountNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsAccountNodeRuleProvider getSavingsAccountNodeRuleProvider() {
      return savingsAccountNodeRuleProvider.get();
    }
  }

  private final class SavingsAccountListNodeComponentBuilder
      implements SavingsAccountListNodeComponent.Builder {
    private SavingsAccountListNodeModule savingsAccountListNodeModule;

    @Override
    public SavingsAccountListNodeComponent build() {
      if (savingsAccountListNodeModule == null) {
        throw new IllegalStateException(
            SavingsAccountListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SavingsAccountListNodeComponentImpl(this);
    }

    @Override
    public SavingsAccountListNodeComponentBuilder setSavingsAccountListNodeModule(
        SavingsAccountListNodeModule module) {
      this.savingsAccountListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SavingsAccountListNodeComponentImpl
      implements SavingsAccountListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<SavingsAccountListNodeRuleProvider>
        savingsAccountListNodeRuleProviderMembersInjector;

    private Provider<SavingsAccountListNodeRuleProvider> savingsAccountListNodeRuleProvider;

    private SavingsAccountListNodeComponentImpl(SavingsAccountListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavingsAccountListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SavingsAccountListNodeModule_ProvideUiNodeFactory.create(
                  builder.savingsAccountListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.savingsAccountListNodeRuleProviderMembersInjector =
          SavingsAccountListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.savingsAccountListNodeRuleProvider =
          DoubleCheck.provider(
              SavingsAccountListNodeRuleProvider_Factory.create(
                  savingsAccountListNodeRuleProviderMembersInjector));
    }

    @Override
    public SavingsAccountListNodeRuleProvider getSavingsAccountListNodeRuleProvider() {
      return savingsAccountListNodeRuleProvider.get();
    }
  }

  private final class AssetsNodeComponentBuilder implements AssetsNodeComponent.Builder {
    private AssetsNodeModule assetsNodeModule;

    @Override
    public AssetsNodeComponent build() {
      if (assetsNodeModule == null) {
        throw new IllegalStateException(AssetsNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AssetsNodeComponentImpl(this);
    }

    @Override
    public AssetsNodeComponentBuilder setAssetsNodeModule(AssetsNodeModule module) {
      this.assetsNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AssetsNodeComponentImpl implements AssetsNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<AssetsNodeRuleProvider> assetsNodeRuleProviderMembersInjector;

    private Provider<AssetsNodeRuleProvider> assetsNodeRuleProvider;

    private AssetsNodeComponentImpl(AssetsNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AssetsNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AssetsNodeModule_ProvideUiNodeFactory.create(builder.assetsNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              AssetsNodeModule_ProvideObjectUiNodeFactory.create(builder.assetsNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.assetsNodeRuleProviderMembersInjector =
          AssetsNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.assetsNodeRuleProvider =
          DoubleCheck.provider(
              AssetsNodeRuleProvider_Factory.create(assetsNodeRuleProviderMembersInjector));
    }

    @Override
    public AssetsNodeRuleProvider getAssetsNodeRuleProvider() {
      return assetsNodeRuleProvider.get();
    }
  }

  private final class FinancialPositionNodeComponentBuilder
      implements FinancialPositionNodeComponent.Builder {
    private FinancialPositionNodeModule financialPositionNodeModule;

    @Override
    public FinancialPositionNodeComponent build() {
      if (financialPositionNodeModule == null) {
        throw new IllegalStateException(
            FinancialPositionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new FinancialPositionNodeComponentImpl(this);
    }

    @Override
    public FinancialPositionNodeComponentBuilder setFinancialPositionNodeModule(
        FinancialPositionNodeModule module) {
      this.financialPositionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class FinancialPositionNodeComponentImpl implements FinancialPositionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<FinancialPositionNode> provideFinancialPositionNodeProvider;

    private Provider<FinancialPositionChangedRuleImpl> financialPositionChangedRuleImplProvider;

    private Provider<FinancialPositionChangedRule> provideFinancialPositionChangedRuleProvider;

    private MembersInjector<FinancialPositionNodeRuleProvider>
        financialPositionNodeRuleProviderMembersInjector;

    private Provider<FinancialPositionNodeRuleProvider> financialPositionNodeRuleProvider;

    private FinancialPositionNodeComponentImpl(FinancialPositionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final FinancialPositionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              FinancialPositionNodeModule_ProvideUiNodeFactory.create(
                  builder.financialPositionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              FinancialPositionNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.financialPositionNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideFinancialPositionNodeProvider =
          DoubleCheck.provider(
              FinancialPositionNodeModule_ProvideFinancialPositionNodeFactory.create(
                  builder.financialPositionNodeModule));

      this.financialPositionChangedRuleImplProvider =
          FinancialPositionChangedRuleImpl_Factory.create(
              MembersInjectors.<FinancialPositionChangedRuleImpl>noOp(),
              provideFinancialPositionNodeProvider);

      this.provideFinancialPositionChangedRuleProvider =
          (Provider) financialPositionChangedRuleImplProvider;

      this.financialPositionNodeRuleProviderMembersInjector =
          FinancialPositionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideFinancialPositionChangedRuleProvider);

      this.financialPositionNodeRuleProvider =
          DoubleCheck.provider(
              FinancialPositionNodeRuleProvider_Factory.create(
                  financialPositionNodeRuleProviderMembersInjector));
    }

    @Override
    public FinancialPositionNodeRuleProvider getFinancialPositionNodeRuleProvider() {
      return financialPositionNodeRuleProvider.get();
    }
  }

  private final class AddressRefNodeComponentBuilder implements AddressRefNodeComponent.Builder {
    private AddressRefNodeModule addressRefNodeModule;

    @Override
    public AddressRefNodeComponent build() {
      if (addressRefNodeModule == null) {
        throw new IllegalStateException(
            AddressRefNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AddressRefNodeComponentImpl(this);
    }

    @Override
    public AddressRefNodeComponentBuilder setAddressRefNodeModule(AddressRefNodeModule module) {
      this.addressRefNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AddressRefNodeComponentImpl implements AddressRefNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private MembersInjector<NodeReferenceChangeRule> nodeReferenceChangeRuleMembersInjector;

    private Provider<ReferenceUiNode<?>> provideReferenceUiNodeProvider;

    private Provider<NodeReferenceChangeRule> nodeReferenceChangeRuleProvider;

    private MembersInjector<AddressRefNodeRuleProvider> addressRefNodeRuleProviderMembersInjector;

    private Provider<AddressRefNodeRuleProvider> addressRefNodeRuleProvider;

    private AddressRefNodeComponentImpl(AddressRefNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AddressRefNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AddressRefNodeModule_ProvideUiNodeFactory.create(builder.addressRefNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AddressRefNodeModule_ProvideLeafUiNodeFactory.create(builder.addressRefNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.nodeReferenceChangeRuleMembersInjector =
          NodeReferenceChangeRule_MembersInjector.create(
              DaggerDefaultProfileComponent.this.nodeReferenceRegistryProvider);

      this.provideReferenceUiNodeProvider =
          DoubleCheck.provider(
              AddressRefNodeModule_ProvideReferenceUiNodeFactory.create(
                  builder.addressRefNodeModule));

      this.nodeReferenceChangeRuleProvider =
          NodeReferenceChangeRule_Factory.create(
              nodeReferenceChangeRuleMembersInjector, provideReferenceUiNodeProvider);

      this.addressRefNodeRuleProviderMembersInjector =
          AddressRefNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              nodeReferenceChangeRuleProvider);

      this.addressRefNodeRuleProvider =
          DoubleCheck.provider(
              AddressRefNodeRuleProvider_Factory.create(addressRefNodeRuleProviderMembersInjector));
    }

    @Override
    public AddressRefNodeRuleProvider getAddressRefNodeRuleProvider() {
      return addressRefNodeRuleProvider.get();
    }
  }

  private final class AddressRefListNodeComponentBuilder
      implements AddressRefListNodeComponent.Builder {
    private AddressRefListNodeModule addressRefListNodeModule;

    @Override
    public AddressRefListNodeComponent build() {
      if (addressRefListNodeModule == null) {
        throw new IllegalStateException(
            AddressRefListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AddressRefListNodeComponentImpl(this);
    }

    @Override
    public AddressRefListNodeComponentBuilder setAddressRefListNodeModule(
        AddressRefListNodeModule module) {
      this.addressRefListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AddressRefListNodeComponentImpl implements AddressRefListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<AddressRefListNodeRuleProvider>
        addressRefListNodeRuleProviderMembersInjector;

    private Provider<AddressRefListNodeRuleProvider> addressRefListNodeRuleProvider;

    private AddressRefListNodeComponentImpl(AddressRefListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AddressRefListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AddressRefListNodeModule_ProvideUiNodeFactory.create(
                  builder.addressRefListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.addressRefListNodeRuleProviderMembersInjector =
          AddressRefListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.addressRefListNodeRuleProvider =
          DoubleCheck.provider(
              AddressRefListNodeRuleProvider_Factory.create(
                  addressRefListNodeRuleProviderMembersInjector));
    }

    @Override
    public AddressRefListNodeRuleProvider getAddressRefListNodeRuleProvider() {
      return addressRefListNodeRuleProvider.get();
    }
  }

  private final class SubmissionNodeComponentBuilder implements SubmissionNodeComponent.Builder {
    private SubmissionNodeModule submissionNodeModule;

    @Override
    public SubmissionNodeComponent build() {
      if (submissionNodeModule == null) {
        throw new IllegalStateException(
            SubmissionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SubmissionNodeComponentImpl(this);
    }

    @Override
    public SubmissionNodeComponentBuilder setSubmissionNodeModule(SubmissionNodeModule module) {
      this.submissionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SubmissionNodeComponentImpl implements SubmissionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<SubmissionNodeRuleProvider> submissionNodeRuleProviderMembersInjector;

    private Provider<SubmissionNodeRuleProvider> submissionNodeRuleProvider;

    private SubmissionNodeComponentImpl(SubmissionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SubmissionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SubmissionNodeModule_ProvideUiNodeFactory.create(builder.submissionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              SubmissionNodeModule_ProvideObjectUiNodeFactory.create(builder.submissionNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.submissionNodeRuleProviderMembersInjector =
          SubmissionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.submissionNodeRuleProvider =
          DoubleCheck.provider(
              SubmissionNodeRuleProvider_Factory.create(submissionNodeRuleProviderMembersInjector));
    }

    @Override
    public SubmissionNodeRuleProvider getSubmissionNodeRuleProvider() {
      return submissionNodeRuleProvider.get();
    }
  }

  private final class PropertyPurseNodeComponentBuilder
      implements PropertyPurseNodeComponent.Builder {
    private PropertyPurseNodeModule propertyPurseNodeModule;

    @Override
    public PropertyPurseNodeComponent build() {
      if (propertyPurseNodeModule == null) {
        throw new IllegalStateException(
            PropertyPurseNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PropertyPurseNodeComponentImpl(this);
    }

    @Override
    public PropertyPurseNodeComponentBuilder setPropertyPurseNodeModule(
        PropertyPurseNodeModule module) {
      this.propertyPurseNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PropertyPurseNodeComponentImpl implements PropertyPurseNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<PropertyPurseNodeRuleProvider>
        propertyPurseNodeRuleProviderMembersInjector;

    private Provider<PropertyPurseNodeRuleProvider> propertyPurseNodeRuleProvider;

    private PropertyPurseNodeComponentImpl(PropertyPurseNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PropertyPurseNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PropertyPurseNodeModule_ProvideUiNodeFactory.create(builder.propertyPurseNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PropertyPurseNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.propertyPurseNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              PropertyPurseNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.propertyPurseNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.propertyPurseNodeRuleProviderMembersInjector =
          PropertyPurseNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.propertyPurseNodeRuleProvider =
          DoubleCheck.provider(
              PropertyPurseNodeRuleProvider_Factory.create(
                  propertyPurseNodeRuleProviderMembersInjector));
    }

    @Override
    public PropertyPurseNodeRuleProvider getPropertyPurseNodeRuleProvider() {
      return propertyPurseNodeRuleProvider.get();
    }
  }

  private final class EstimatedMarketValueNodeComponentBuilder
      implements EstimatedMarketValueNodeComponent.Builder {
    private EstimatedMarketValueNodeModule estimatedMarketValueNodeModule;

    @Override
    public EstimatedMarketValueNodeComponent build() {
      if (estimatedMarketValueNodeModule == null) {
        throw new IllegalStateException(
            EstimatedMarketValueNodeModule.class.getCanonicalName() + " must be set");
      }
      return new EstimatedMarketValueNodeComponentImpl(this);
    }

    @Override
    public EstimatedMarketValueNodeComponentBuilder setEstimatedMarketValueNodeModule(
        EstimatedMarketValueNodeModule module) {
      this.estimatedMarketValueNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class EstimatedMarketValueNodeComponentImpl
      implements EstimatedMarketValueNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<EstimatedMarketValueNodeRuleProvider>
        estimatedMarketValueNodeRuleProviderMembersInjector;

    private Provider<EstimatedMarketValueNodeRuleProvider> estimatedMarketValueNodeRuleProvider;

    private EstimatedMarketValueNodeComponentImpl(
        EstimatedMarketValueNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EstimatedMarketValueNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              EstimatedMarketValueNodeModule_ProvideUiNodeFactory.create(
                  builder.estimatedMarketValueNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              EstimatedMarketValueNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.estimatedMarketValueNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              EstimatedMarketValueNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.estimatedMarketValueNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.estimatedMarketValueNodeRuleProviderMembersInjector =
          EstimatedMarketValueNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.estimatedMarketValueNodeRuleProvider =
          DoubleCheck.provider(
              EstimatedMarketValueNodeRuleProvider_Factory.create(
                  estimatedMarketValueNodeRuleProviderMembersInjector));
    }

    @Override
    public EstimatedMarketValueNodeRuleProvider getEstimatedMarketValueNodeRuleProvider() {
      return estimatedMarketValueNodeRuleProvider.get();
    }
  }

  private final class PropertyWeeklyRentNodeComponentBuilder
      implements PropertyWeeklyRentNodeComponent.Builder {
    private PropertyWeeklyRentNodeModule propertyWeeklyRentNodeModule;

    @Override
    public PropertyWeeklyRentNodeComponent build() {
      if (propertyWeeklyRentNodeModule == null) {
        throw new IllegalStateException(
            PropertyWeeklyRentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PropertyWeeklyRentNodeComponentImpl(this);
    }

    @Override
    public PropertyWeeklyRentNodeComponentBuilder setPropertyWeeklyRentNodeModule(
        PropertyWeeklyRentNodeModule module) {
      this.propertyWeeklyRentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PropertyWeeklyRentNodeComponentImpl
      implements PropertyWeeklyRentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<PropertyWeeklyRentNodeRuleProvider>
        propertyWeeklyRentNodeRuleProviderMembersInjector;

    private Provider<PropertyWeeklyRentNodeRuleProvider> propertyWeeklyRentNodeRuleProvider;

    private PropertyWeeklyRentNodeComponentImpl(PropertyWeeklyRentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PropertyWeeklyRentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PropertyWeeklyRentNodeModule_ProvideUiNodeFactory.create(
                  builder.propertyWeeklyRentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PropertyWeeklyRentNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.propertyWeeklyRentNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              PropertyWeeklyRentNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.propertyWeeklyRentNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.propertyWeeklyRentNodeRuleProviderMembersInjector =
          PropertyWeeklyRentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.propertyWeeklyRentNodeRuleProvider =
          DoubleCheck.provider(
              PropertyWeeklyRentNodeRuleProvider_Factory.create(
                  propertyWeeklyRentNodeRuleProviderMembersInjector));
    }

    @Override
    public PropertyWeeklyRentNodeRuleProvider getPropertyWeeklyRentNodeRuleProvider() {
      return propertyWeeklyRentNodeRuleProvider.get();
    }
  }

  private final class PropertyAddressNodeComponentBuilder
      implements PropertyAddressNodeComponent.Builder {
    private PropertyAddressNodeModule propertyAddressNodeModule;

    @Override
    public PropertyAddressNodeComponent build() {
      if (propertyAddressNodeModule == null) {
        throw new IllegalStateException(
            PropertyAddressNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PropertyAddressNodeComponentImpl(this);
    }

    @Override
    public PropertyAddressNodeComponentBuilder setPropertyAddressNodeModule(
        PropertyAddressNodeModule module) {
      this.propertyAddressNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PropertyAddressNodeComponentImpl implements PropertyAddressNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<AddressNode<?>> provideAddressNodeProvider;

    private Provider<UpdateAddressRefListRuleImpl> updateAddressRefListRuleImplProvider;

    private Provider<UpdateAddressRefListRule> provideUpdateAddressRefListRuleProvider;

    private MembersInjector<PropertyAddressNodeRuleProvider>
        propertyAddressNodeRuleProviderMembersInjector;

    private Provider<PropertyAddressNodeRuleProvider> propertyAddressNodeRuleProvider;

    private PropertyAddressNodeComponentImpl(PropertyAddressNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PropertyAddressNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PropertyAddressNodeModule_ProvideUiNodeFactory.create(
                  builder.propertyAddressNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PropertyAddressNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.propertyAddressNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideAddressNodeProvider =
          DoubleCheck.provider(
              PropertyAddressNodeModule_ProvideAddressNodeFactory.create(
                  builder.propertyAddressNodeModule));

      this.updateAddressRefListRuleImplProvider =
          UpdateAddressRefListRuleImpl_Factory.create(
              MembersInjectors.<UpdateAddressRefListRuleImpl>noOp(), provideAddressNodeProvider);

      this.provideUpdateAddressRefListRuleProvider =
          (Provider) updateAddressRefListRuleImplProvider;

      this.propertyAddressNodeRuleProviderMembersInjector =
          PropertyAddressNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideUpdateAddressRefListRuleProvider);

      this.propertyAddressNodeRuleProvider =
          DoubleCheck.provider(
              PropertyAddressNodeRuleProvider_Factory.create(
                  propertyAddressNodeRuleProviderMembersInjector));
    }

    @Override
    public PropertyAddressNodeRuleProvider getPropertyAddressNodeRuleProvider() {
      return propertyAddressNodeRuleProvider.get();
    }
  }

  private final class PropertyOwnershipListNodeComponentBuilder
      implements PropertyOwnershipListNodeComponent.Builder {
    private PropertyOwnershipListNodeModule propertyOwnershipListNodeModule;

    @Override
    public PropertyOwnershipListNodeComponent build() {
      if (propertyOwnershipListNodeModule == null) {
        throw new IllegalStateException(
            PropertyOwnershipListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PropertyOwnershipListNodeComponentImpl(this);
    }

    @Override
    public PropertyOwnershipListNodeComponentBuilder setPropertyOwnershipListNodeModule(
        PropertyOwnershipListNodeModule module) {
      this.propertyOwnershipListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PropertyOwnershipListNodeComponentImpl
      implements PropertyOwnershipListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<OwnershipListNode<?>> provideOwnershipListNodeProvider;

    private Provider<AddExistingApplicantsRuleImpl> addExistingApplicantsRuleImplProvider;

    private Provider<AddExistingApplicantsRule> provideAddExistingApplicantsRuleProvider;

    private Provider<AddNewPersonApplicantRuleImpl> addNewPersonApplicantRuleImplProvider;

    private Provider<AddNewPersonApplicantRule> provideAddNewPersonApplicantRuleProvider;

    private Provider<AddNewCompanyApplicantRuleImpl> addNewCompanyApplicantRuleImplProvider;

    private Provider<AddNewCompanyApplicantRule> provideAddNewCompanyApplicantRuleProvider;

    private MembersInjector<PropertyOwnershipListNodeRuleProvider>
        propertyOwnershipListNodeRuleProviderMembersInjector;

    private Provider<PropertyOwnershipListNodeRuleProvider> propertyOwnershipListNodeRuleProvider;

    private PropertyOwnershipListNodeComponentImpl(
        PropertyOwnershipListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PropertyOwnershipListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PropertyOwnershipListNodeModule_ProvideUiNodeFactory.create(
                  builder.propertyOwnershipListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideOwnershipListNodeProvider =
          DoubleCheck.provider(
              PropertyOwnershipListNodeModule_ProvideOwnershipListNodeFactory.create(
                  builder.propertyOwnershipListNodeModule));

      this.addExistingApplicantsRuleImplProvider =
          AddExistingApplicantsRuleImpl_Factory.create(
              MembersInjectors.<AddExistingApplicantsRuleImpl>noOp(),
              provideOwnershipListNodeProvider);

      this.provideAddExistingApplicantsRuleProvider =
          (Provider) addExistingApplicantsRuleImplProvider;

      this.addNewPersonApplicantRuleImplProvider =
          AddNewPersonApplicantRuleImpl_Factory.create(
              MembersInjectors.<AddNewPersonApplicantRuleImpl>noOp(),
              provideOwnershipListNodeProvider);

      this.provideAddNewPersonApplicantRuleProvider =
          (Provider) addNewPersonApplicantRuleImplProvider;

      this.addNewCompanyApplicantRuleImplProvider =
          AddNewCompanyApplicantRuleImpl_Factory.create(
              MembersInjectors.<AddNewCompanyApplicantRuleImpl>noOp(),
              provideOwnershipListNodeProvider);

      this.provideAddNewCompanyApplicantRuleProvider =
          (Provider) addNewCompanyApplicantRuleImplProvider;

      this.propertyOwnershipListNodeRuleProviderMembersInjector =
          PropertyOwnershipListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              provideAddExistingApplicantsRuleProvider,
              provideAddNewPersonApplicantRuleProvider,
              provideAddNewCompanyApplicantRuleProvider);

      this.propertyOwnershipListNodeRuleProvider =
          DoubleCheck.provider(
              PropertyOwnershipListNodeRuleProvider_Factory.create(
                  propertyOwnershipListNodeRuleProviderMembersInjector));
    }

    @Override
    public PropertyOwnershipListNodeRuleProvider getPropertyOwnershipListNodeRuleProvider() {
      return propertyOwnershipListNodeRuleProvider.get();
    }
  }

  private final class RentedFlagNodeComponentBuilder implements RentedFlagNodeComponent.Builder {
    private RentedFlagNodeModule rentedFlagNodeModule;

    @Override
    public RentedFlagNodeComponent build() {
      if (rentedFlagNodeModule == null) {
        throw new IllegalStateException(
            RentedFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RentedFlagNodeComponentImpl(this);
    }

    @Override
    public RentedFlagNodeComponentBuilder setRentedFlagNodeModule(RentedFlagNodeModule module) {
      this.rentedFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RentedFlagNodeComponentImpl implements RentedFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<RentedFlagNodeRuleProvider> rentedFlagNodeRuleProviderMembersInjector;

    private Provider<RentedFlagNodeRuleProvider> rentedFlagNodeRuleProvider;

    private RentedFlagNodeComponentImpl(RentedFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RentedFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RentedFlagNodeModule_ProvideUiNodeFactory.create(builder.rentedFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              RentedFlagNodeModule_ProvideLeafUiNodeFactory.create(builder.rentedFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              RentedFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.rentedFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.rentedFlagNodeRuleProviderMembersInjector =
          RentedFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.rentedFlagNodeRuleProvider =
          DoubleCheck.provider(
              RentedFlagNodeRuleProvider_Factory.create(rentedFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public RentedFlagNodeRuleProvider getRentedFlagNodeRuleProvider() {
      return rentedFlagNodeRuleProvider.get();
    }
  }

  private final class DefenseServiceFlagNodeComponentBuilder
      implements DefenseServiceFlagNodeComponent.Builder {
    private DefenseServiceFlagNodeModule defenseServiceFlagNodeModule;

    @Override
    public DefenseServiceFlagNodeComponent build() {
      if (defenseServiceFlagNodeModule == null) {
        throw new IllegalStateException(
            DefenseServiceFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new DefenseServiceFlagNodeComponentImpl(this);
    }

    @Override
    public DefenseServiceFlagNodeComponentBuilder setDefenseServiceFlagNodeModule(
        DefenseServiceFlagNodeModule module) {
      this.defenseServiceFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class DefenseServiceFlagNodeComponentImpl
      implements DefenseServiceFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<DefenseServiceFlagNodeRuleProvider>
        defenseServiceFlagNodeRuleProviderMembersInjector;

    private Provider<DefenseServiceFlagNodeRuleProvider> defenseServiceFlagNodeRuleProvider;

    private DefenseServiceFlagNodeComponentImpl(DefenseServiceFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DefenseServiceFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              DefenseServiceFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.defenseServiceFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              DefenseServiceFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.defenseServiceFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              DefenseServiceFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.defenseServiceFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.defenseServiceFlagNodeRuleProviderMembersInjector =
          DefenseServiceFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.defenseServiceFlagNodeRuleProvider =
          DoubleCheck.provider(
              DefenseServiceFlagNodeRuleProvider_Factory.create(
                  defenseServiceFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public DefenseServiceFlagNodeRuleProvider getDefenseServiceFlagNodeRuleProvider() {
      return defenseServiceFlagNodeRuleProvider.get();
    }
  }

  private final class PropertyTypeNodeComponentBuilder
      implements PropertyTypeNodeComponent.Builder {
    private PropertyTypeNodeModule propertyTypeNodeModule;

    @Override
    public PropertyTypeNodeComponent build() {
      if (propertyTypeNodeModule == null) {
        throw new IllegalStateException(
            PropertyTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PropertyTypeNodeComponentImpl(this);
    }

    @Override
    public PropertyTypeNodeComponentBuilder setPropertyTypeNodeModule(
        PropertyTypeNodeModule module) {
      this.propertyTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PropertyTypeNodeComponentImpl implements PropertyTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<PropertyTypeNodeRuleProvider>
        propertyTypeNodeRuleProviderMembersInjector;

    private Provider<PropertyTypeNodeRuleProvider> propertyTypeNodeRuleProvider;

    private PropertyTypeNodeComponentImpl(PropertyTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PropertyTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PropertyTypeNodeModule_ProvideUiNodeFactory.create(builder.propertyTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PropertyTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.propertyTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              PropertyTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.propertyTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.propertyTypeNodeRuleProviderMembersInjector =
          PropertyTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.propertyTypeNodeRuleProvider =
          DoubleCheck.provider(
              PropertyTypeNodeRuleProvider_Factory.create(
                  propertyTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public PropertyTypeNodeRuleProvider getPropertyTypeNodeRuleProvider() {
      return propertyTypeNodeRuleProvider.get();
    }
  }

  private final class ContractPriceNodeComponentBuilder
      implements ContractPriceNodeComponent.Builder {
    private ContractPriceNodeModule contractPriceNodeModule;

    @Override
    public ContractPriceNodeComponent build() {
      if (contractPriceNodeModule == null) {
        throw new IllegalStateException(
            ContractPriceNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ContractPriceNodeComponentImpl(this);
    }

    @Override
    public ContractPriceNodeComponentBuilder setContractPriceNodeModule(
        ContractPriceNodeModule module) {
      this.contractPriceNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ContractPriceNodeComponentImpl implements ContractPriceNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ContractPriceNodeRuleProvider>
        contractPriceNodeRuleProviderMembersInjector;

    private Provider<ContractPriceNodeRuleProvider> contractPriceNodeRuleProvider;

    private ContractPriceNodeComponentImpl(ContractPriceNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ContractPriceNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ContractPriceNodeModule_ProvideUiNodeFactory.create(builder.contractPriceNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ContractPriceNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.contractPriceNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ContractPriceNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.contractPriceNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.contractPriceNodeRuleProviderMembersInjector =
          ContractPriceNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.contractPriceNodeRuleProvider =
          DoubleCheck.provider(
              ContractPriceNodeRuleProvider_Factory.create(
                  contractPriceNodeRuleProviderMembersInjector));
    }

    @Override
    public ContractPriceNodeRuleProvider getContractPriceNodeRuleProvider() {
      return contractPriceNodeRuleProvider.get();
    }
  }

  private final class PropertySubTypeNodeComponentBuilder
      implements PropertySubTypeNodeComponent.Builder {
    private PropertySubTypeNodeModule propertySubTypeNodeModule;

    @Override
    public PropertySubTypeNodeComponent build() {
      if (propertySubTypeNodeModule == null) {
        throw new IllegalStateException(
            PropertySubTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PropertySubTypeNodeComponentImpl(this);
    }

    @Override
    public PropertySubTypeNodeComponentBuilder setPropertySubTypeNodeModule(
        PropertySubTypeNodeModule module) {
      this.propertySubTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PropertySubTypeNodeComponentImpl implements PropertySubTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<PropertySubTypeNodeRuleProvider>
        propertySubTypeNodeRuleProviderMembersInjector;

    private Provider<PropertySubTypeNodeRuleProvider> propertySubTypeNodeRuleProvider;

    private PropertySubTypeNodeComponentImpl(PropertySubTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PropertySubTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PropertySubTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.propertySubTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PropertySubTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.propertySubTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              PropertySubTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.propertySubTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.propertySubTypeNodeRuleProviderMembersInjector =
          PropertySubTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.propertySubTypeNodeRuleProvider =
          DoubleCheck.provider(
              PropertySubTypeNodeRuleProvider_Factory.create(
                  propertySubTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public PropertySubTypeNodeRuleProvider getPropertySubTypeNodeRuleProvider() {
      return propertySubTypeNodeRuleProvider.get();
    }
  }

  private final class PropertyNodeComponentBuilder implements PropertyNodeComponent.Builder {
    private PropertyNodeModule propertyNodeModule;

    @Override
    public PropertyNodeComponent build() {
      if (propertyNodeModule == null) {
        throw new IllegalStateException(
            PropertyNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PropertyNodeComponentImpl(this);
    }

    @Override
    public PropertyNodeComponentBuilder setPropertyNodeModule(PropertyNodeModule module) {
      this.propertyNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PropertyNodeComponentImpl implements PropertyNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<PropertyNodeRuleProvider> propertyNodeRuleProviderMembersInjector;

    private Provider<PropertyNodeRuleProvider> propertyNodeRuleProvider;

    private PropertyNodeComponentImpl(PropertyNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PropertyNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PropertyNodeModule_ProvideUiNodeFactory.create(builder.propertyNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              PropertyNodeModule_ProvideObjectUiNodeFactory.create(builder.propertyNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.propertyNodeRuleProviderMembersInjector =
          PropertyNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.propertyNodeRuleProvider =
          DoubleCheck.provider(
              PropertyNodeRuleProvider_Factory.create(propertyNodeRuleProviderMembersInjector));
    }

    @Override
    public PropertyNodeRuleProvider getPropertyNodeRuleProvider() {
      return propertyNodeRuleProvider.get();
    }
  }

  private final class OwnedOutrightFlagNodeComponentBuilder
      implements OwnedOutrightFlagNodeComponent.Builder {
    private OwnedOutrightFlagNodeModule ownedOutrightFlagNodeModule;

    @Override
    public OwnedOutrightFlagNodeComponent build() {
      if (ownedOutrightFlagNodeModule == null) {
        throw new IllegalStateException(
            OwnedOutrightFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new OwnedOutrightFlagNodeComponentImpl(this);
    }

    @Override
    public OwnedOutrightFlagNodeComponentBuilder setOwnedOutrightFlagNodeModule(
        OwnedOutrightFlagNodeModule module) {
      this.ownedOutrightFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class OwnedOutrightFlagNodeComponentImpl implements OwnedOutrightFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<OwnedOutrightFlagNodeRuleProvider>
        ownedOutrightFlagNodeRuleProviderMembersInjector;

    private Provider<OwnedOutrightFlagNodeRuleProvider> ownedOutrightFlagNodeRuleProvider;

    private OwnedOutrightFlagNodeComponentImpl(OwnedOutrightFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final OwnedOutrightFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              OwnedOutrightFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.ownedOutrightFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              OwnedOutrightFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.ownedOutrightFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              OwnedOutrightFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.ownedOutrightFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.ownedOutrightFlagNodeRuleProviderMembersInjector =
          OwnedOutrightFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.ownedOutrightFlagNodeRuleProvider =
          DoubleCheck.provider(
              OwnedOutrightFlagNodeRuleProvider_Factory.create(
                  ownedOutrightFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public OwnedOutrightFlagNodeRuleProvider getOwnedOutrightFlagNodeRuleProvider() {
      return ownedOutrightFlagNodeRuleProvider.get();
    }
  }

  private final class ApprovalInPrincipleFlagNodeComponentBuilder
      implements ApprovalInPrincipleFlagNodeComponent.Builder {
    private ApprovalInPrincipleFlagNodeModule approvalInPrincipleFlagNodeModule;

    @Override
    public ApprovalInPrincipleFlagNodeComponent build() {
      if (approvalInPrincipleFlagNodeModule == null) {
        throw new IllegalStateException(
            ApprovalInPrincipleFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ApprovalInPrincipleFlagNodeComponentImpl(this);
    }

    @Override
    public ApprovalInPrincipleFlagNodeComponentBuilder setApprovalInPrincipleFlagNodeModule(
        ApprovalInPrincipleFlagNodeModule module) {
      this.approvalInPrincipleFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ApprovalInPrincipleFlagNodeComponentImpl
      implements ApprovalInPrincipleFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ApprovalInPrincipleFlagNodeRuleProvider>
        approvalInPrincipleFlagNodeRuleProviderMembersInjector;

    private Provider<ApprovalInPrincipleFlagNodeRuleProvider>
        approvalInPrincipleFlagNodeRuleProvider;

    private ApprovalInPrincipleFlagNodeComponentImpl(
        ApprovalInPrincipleFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApprovalInPrincipleFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ApprovalInPrincipleFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.approvalInPrincipleFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ApprovalInPrincipleFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.approvalInPrincipleFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ApprovalInPrincipleFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.approvalInPrincipleFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.approvalInPrincipleFlagNodeRuleProviderMembersInjector =
          ApprovalInPrincipleFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.approvalInPrincipleFlagNodeRuleProvider =
          DoubleCheck.provider(
              ApprovalInPrincipleFlagNodeRuleProvider_Factory.create(
                  approvalInPrincipleFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ApprovalInPrincipleFlagNodeRuleProvider getApprovalInPrincipleFlagNodeRuleProvider() {
      return approvalInPrincipleFlagNodeRuleProvider.get();
    }
  }

  private final class PrimarySecurityFlagNodeComponentBuilder
      implements PrimarySecurityFlagNodeComponent.Builder {
    private PrimarySecurityFlagNodeModule primarySecurityFlagNodeModule;

    @Override
    public PrimarySecurityFlagNodeComponent build() {
      if (primarySecurityFlagNodeModule == null) {
        throw new IllegalStateException(
            PrimarySecurityFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new PrimarySecurityFlagNodeComponentImpl(this);
    }

    @Override
    public PrimarySecurityFlagNodeComponentBuilder setPrimarySecurityFlagNodeModule(
        PrimarySecurityFlagNodeModule module) {
      this.primarySecurityFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class PrimarySecurityFlagNodeComponentImpl
      implements PrimarySecurityFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<PrimarySecurityFlagNodeRuleProvider>
        primarySecurityFlagNodeRuleProviderMembersInjector;

    private Provider<PrimarySecurityFlagNodeRuleProvider> primarySecurityFlagNodeRuleProvider;

    private PrimarySecurityFlagNodeComponentImpl(PrimarySecurityFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PrimarySecurityFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              PrimarySecurityFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.primarySecurityFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              PrimarySecurityFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.primarySecurityFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              PrimarySecurityFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.primarySecurityFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.primarySecurityFlagNodeRuleProviderMembersInjector =
          PrimarySecurityFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.primarySecurityFlagNodeRuleProvider =
          DoubleCheck.provider(
              PrimarySecurityFlagNodeRuleProvider_Factory.create(
                  primarySecurityFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public PrimarySecurityFlagNodeRuleProvider getPrimarySecurityFlagNodeRuleProvider() {
      return primarySecurityFlagNodeRuleProvider.get();
    }
  }

  private final class BeingPurchasedFlagNodeComponentBuilder
      implements BeingPurchasedFlagNodeComponent.Builder {
    private BeingPurchasedFlagNodeModule beingPurchasedFlagNodeModule;

    @Override
    public BeingPurchasedFlagNodeComponent build() {
      if (beingPurchasedFlagNodeModule == null) {
        throw new IllegalStateException(
            BeingPurchasedFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new BeingPurchasedFlagNodeComponentImpl(this);
    }

    @Override
    public BeingPurchasedFlagNodeComponentBuilder setBeingPurchasedFlagNodeModule(
        BeingPurchasedFlagNodeModule module) {
      this.beingPurchasedFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class BeingPurchasedFlagNodeComponentImpl
      implements BeingPurchasedFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<BeingPurchasedFlagNodeRuleProvider>
        beingPurchasedFlagNodeRuleProviderMembersInjector;

    private Provider<BeingPurchasedFlagNodeRuleProvider> beingPurchasedFlagNodeRuleProvider;

    private BeingPurchasedFlagNodeComponentImpl(BeingPurchasedFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final BeingPurchasedFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              BeingPurchasedFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.beingPurchasedFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              BeingPurchasedFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.beingPurchasedFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              BeingPurchasedFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.beingPurchasedFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.beingPurchasedFlagNodeRuleProviderMembersInjector =
          BeingPurchasedFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.beingPurchasedFlagNodeRuleProvider =
          DoubleCheck.provider(
              BeingPurchasedFlagNodeRuleProvider_Factory.create(
                  beingPurchasedFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public BeingPurchasedFlagNodeRuleProvider getBeingPurchasedFlagNodeRuleProvider() {
      return beingPurchasedFlagNodeRuleProvider.get();
    }
  }

  private final class UsedAsSecurityFlagNodeComponentBuilder
      implements UsedAsSecurityFlagNodeComponent.Builder {
    private UsedAsSecurityFlagNodeModule usedAsSecurityFlagNodeModule;

    @Override
    public UsedAsSecurityFlagNodeComponent build() {
      if (usedAsSecurityFlagNodeModule == null) {
        throw new IllegalStateException(
            UsedAsSecurityFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new UsedAsSecurityFlagNodeComponentImpl(this);
    }

    @Override
    public UsedAsSecurityFlagNodeComponentBuilder setUsedAsSecurityFlagNodeModule(
        UsedAsSecurityFlagNodeModule module) {
      this.usedAsSecurityFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class UsedAsSecurityFlagNodeComponentImpl
      implements UsedAsSecurityFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<UsedAsSecurityFlagNodeRuleProvider>
        usedAsSecurityFlagNodeRuleProviderMembersInjector;

    private Provider<UsedAsSecurityFlagNodeRuleProvider> usedAsSecurityFlagNodeRuleProvider;

    private UsedAsSecurityFlagNodeComponentImpl(UsedAsSecurityFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final UsedAsSecurityFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              UsedAsSecurityFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.usedAsSecurityFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              UsedAsSecurityFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.usedAsSecurityFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              UsedAsSecurityFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.usedAsSecurityFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.usedAsSecurityFlagNodeRuleProviderMembersInjector =
          UsedAsSecurityFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.usedAsSecurityFlagNodeRuleProvider =
          DoubleCheck.provider(
              UsedAsSecurityFlagNodeRuleProvider_Factory.create(
                  usedAsSecurityFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public UsedAsSecurityFlagNodeRuleProvider getUsedAsSecurityFlagNodeRuleProvider() {
      return usedAsSecurityFlagNodeRuleProvider.get();
    }
  }

  private final class MortgageLoanTypeNodeComponentBuilder
      implements MortgageLoanTypeNodeComponent.Builder {
    private MortgageLoanTypeNodeModule mortgageLoanTypeNodeModule;

    @Override
    public MortgageLoanTypeNodeComponent build() {
      if (mortgageLoanTypeNodeModule == null) {
        throw new IllegalStateException(
            MortgageLoanTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageLoanTypeNodeComponentImpl(this);
    }

    @Override
    public MortgageLoanTypeNodeComponentBuilder setMortgageLoanTypeNodeModule(
        MortgageLoanTypeNodeModule module) {
      this.mortgageLoanTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageLoanTypeNodeComponentImpl implements MortgageLoanTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MortgageLoanTypeNodeRuleProvider>
        mortgageLoanTypeNodeRuleProviderMembersInjector;

    private Provider<MortgageLoanTypeNodeRuleProvider> mortgageLoanTypeNodeRuleProvider;

    private MortgageLoanTypeNodeComponentImpl(MortgageLoanTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageLoanTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageLoanTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageLoanTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageLoanTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageLoanTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MortgageLoanTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.mortgageLoanTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.mortgageLoanTypeNodeRuleProviderMembersInjector =
          MortgageLoanTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.mortgageLoanTypeNodeRuleProvider =
          DoubleCheck.provider(
              MortgageLoanTypeNodeRuleProvider_Factory.create(
                  mortgageLoanTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageLoanTypeNodeRuleProvider getMortgageLoanTypeNodeRuleProvider() {
      return mortgageLoanTypeNodeRuleProvider.get();
    }
  }

  private final class MortgageTermRemainingPeriodNodeComponentBuilder
      implements MortgageTermRemainingPeriodNodeComponent.Builder {
    private MortgageTermRemainingPeriodNodeModule mortgageTermRemainingPeriodNodeModule;

    @Override
    public MortgageTermRemainingPeriodNodeComponent build() {
      if (mortgageTermRemainingPeriodNodeModule == null) {
        throw new IllegalStateException(
            MortgageTermRemainingPeriodNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageTermRemainingPeriodNodeComponentImpl(this);
    }

    @Override
    public MortgageTermRemainingPeriodNodeComponentBuilder setMortgageTermRemainingPeriodNodeModule(
        MortgageTermRemainingPeriodNodeModule module) {
      this.mortgageTermRemainingPeriodNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageTermRemainingPeriodNodeComponentImpl
      implements MortgageTermRemainingPeriodNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MortgageTermRemainingPeriodNodeRuleProvider>
        mortgageTermRemainingPeriodNodeRuleProviderMembersInjector;

    private Provider<MortgageTermRemainingPeriodNodeRuleProvider>
        mortgageTermRemainingPeriodNodeRuleProvider;

    private MortgageTermRemainingPeriodNodeComponentImpl(
        MortgageTermRemainingPeriodNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageTermRemainingPeriodNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageTermRemainingPeriodNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageTermRemainingPeriodNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageTermRemainingPeriodNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageTermRemainingPeriodNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MortgageTermRemainingPeriodNodeModule_ProvideStringUiNodeFactory.create(
                  builder.mortgageTermRemainingPeriodNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.mortgageTermRemainingPeriodNodeRuleProviderMembersInjector =
          MortgageTermRemainingPeriodNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.mortgageTermRemainingPeriodNodeRuleProvider =
          DoubleCheck.provider(
              MortgageTermRemainingPeriodNodeRuleProvider_Factory.create(
                  mortgageTermRemainingPeriodNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageTermRemainingPeriodNodeRuleProvider
        getMortgageTermRemainingPeriodNodeRuleProvider() {
      return mortgageTermRemainingPeriodNodeRuleProvider.get();
    }
  }

  private final class MortgageLoanTermExpiryDateNodeComponentBuilder
      implements MortgageLoanTermExpiryDateNodeComponent.Builder {
    private MortgageLoanTermExpiryDateNodeModule mortgageLoanTermExpiryDateNodeModule;

    @Override
    public MortgageLoanTermExpiryDateNodeComponent build() {
      if (mortgageLoanTermExpiryDateNodeModule == null) {
        throw new IllegalStateException(
            MortgageLoanTermExpiryDateNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageLoanTermExpiryDateNodeComponentImpl(this);
    }

    @Override
    public MortgageLoanTermExpiryDateNodeComponentBuilder setMortgageLoanTermExpiryDateNodeModule(
        MortgageLoanTermExpiryDateNodeModule module) {
      this.mortgageLoanTermExpiryDateNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageLoanTermExpiryDateNodeComponentImpl
      implements MortgageLoanTermExpiryDateNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MortgageLoanTermExpiryDateNodeRuleProvider>
        mortgageLoanTermExpiryDateNodeRuleProviderMembersInjector;

    private Provider<MortgageLoanTermExpiryDateNodeRuleProvider>
        mortgageLoanTermExpiryDateNodeRuleProvider;

    private MortgageLoanTermExpiryDateNodeComponentImpl(
        MortgageLoanTermExpiryDateNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageLoanTermExpiryDateNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageLoanTermExpiryDateNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageLoanTermExpiryDateNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageLoanTermExpiryDateNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageLoanTermExpiryDateNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MortgageLoanTermExpiryDateNodeModule_ProvideStringUiNodeFactory.create(
                  builder.mortgageLoanTermExpiryDateNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.mortgageLoanTermExpiryDateNodeRuleProviderMembersInjector =
          MortgageLoanTermExpiryDateNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.mortgageLoanTermExpiryDateNodeRuleProvider =
          DoubleCheck.provider(
              MortgageLoanTermExpiryDateNodeRuleProvider_Factory.create(
                  mortgageLoanTermExpiryDateNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageLoanTermExpiryDateNodeRuleProvider
        getMortgageLoanTermExpiryDateNodeRuleProvider() {
      return mortgageLoanTermExpiryDateNodeRuleProvider.get();
    }
  }

  private final class MortgageChargePositionNodeComponentBuilder
      implements MortgageChargePositionNodeComponent.Builder {
    private MortgageChargePositionNodeModule mortgageChargePositionNodeModule;

    @Override
    public MortgageChargePositionNodeComponent build() {
      if (mortgageChargePositionNodeModule == null) {
        throw new IllegalStateException(
            MortgageChargePositionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageChargePositionNodeComponentImpl(this);
    }

    @Override
    public MortgageChargePositionNodeComponentBuilder setMortgageChargePositionNodeModule(
        MortgageChargePositionNodeModule module) {
      this.mortgageChargePositionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageChargePositionNodeComponentImpl
      implements MortgageChargePositionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MortgageChargePositionNodeRuleProvider>
        mortgageChargePositionNodeRuleProviderMembersInjector;

    private Provider<MortgageChargePositionNodeRuleProvider> mortgageChargePositionNodeRuleProvider;

    private MortgageChargePositionNodeComponentImpl(
        MortgageChargePositionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageChargePositionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageChargePositionNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageChargePositionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageChargePositionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageChargePositionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MortgageChargePositionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.mortgageChargePositionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.mortgageChargePositionNodeRuleProviderMembersInjector =
          MortgageChargePositionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.mortgageChargePositionNodeRuleProvider =
          DoubleCheck.provider(
              MortgageChargePositionNodeRuleProvider_Factory.create(
                  mortgageChargePositionNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageChargePositionNodeRuleProvider getMortgageChargePositionNodeRuleProvider() {
      return mortgageChargePositionNodeRuleProvider.get();
    }
  }

  private final class MortgageInterestOnlyRemainingPeriodNodeComponentBuilder
      implements MortgageInterestOnlyRemainingPeriodNodeComponent.Builder {
    private MortgageInterestOnlyRemainingPeriodNodeModule
        mortgageInterestOnlyRemainingPeriodNodeModule;

    @Override
    public MortgageInterestOnlyRemainingPeriodNodeComponent build() {
      if (mortgageInterestOnlyRemainingPeriodNodeModule == null) {
        throw new IllegalStateException(
            MortgageInterestOnlyRemainingPeriodNodeModule.class.getCanonicalName()
                + " must be set");
      }
      return new MortgageInterestOnlyRemainingPeriodNodeComponentImpl(this);
    }

    @Override
    public MortgageInterestOnlyRemainingPeriodNodeComponentBuilder
        setMortgageInterestOnlyRemainingPeriodNodeModule(
            MortgageInterestOnlyRemainingPeriodNodeModule module) {
      this.mortgageInterestOnlyRemainingPeriodNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageInterestOnlyRemainingPeriodNodeComponentImpl
      implements MortgageInterestOnlyRemainingPeriodNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MortgageInterestOnlyRemainingPeriodNodeRuleProvider>
        mortgageInterestOnlyRemainingPeriodNodeRuleProviderMembersInjector;

    private Provider<MortgageInterestOnlyRemainingPeriodNodeRuleProvider>
        mortgageInterestOnlyRemainingPeriodNodeRuleProvider;

    private MortgageInterestOnlyRemainingPeriodNodeComponentImpl(
        MortgageInterestOnlyRemainingPeriodNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageInterestOnlyRemainingPeriodNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageInterestOnlyRemainingPeriodNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageInterestOnlyRemainingPeriodNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageInterestOnlyRemainingPeriodNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageInterestOnlyRemainingPeriodNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MortgageInterestOnlyRemainingPeriodNodeModule_ProvideStringUiNodeFactory.create(
                  builder.mortgageInterestOnlyRemainingPeriodNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.mortgageInterestOnlyRemainingPeriodNodeRuleProviderMembersInjector =
          MortgageInterestOnlyRemainingPeriodNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.mortgageInterestOnlyRemainingPeriodNodeRuleProvider =
          DoubleCheck.provider(
              MortgageInterestOnlyRemainingPeriodNodeRuleProvider_Factory.create(
                  mortgageInterestOnlyRemainingPeriodNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageInterestOnlyRemainingPeriodNodeRuleProvider
        getMortgageInterestOnlyRemainingPeriodNodeRuleProvider() {
      return mortgageInterestOnlyRemainingPeriodNodeRuleProvider.get();
    }
  }

  private final class MortgqageUnpaidBalanceNodeComponentBuilder
      implements MortgqageUnpaidBalanceNodeComponent.Builder {
    private MortgqageUnpaidBalanceNodeModule mortgqageUnpaidBalanceNodeModule;

    @Override
    public MortgqageUnpaidBalanceNodeComponent build() {
      if (mortgqageUnpaidBalanceNodeModule == null) {
        throw new IllegalStateException(
            MortgqageUnpaidBalanceNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgqageUnpaidBalanceNodeComponentImpl(this);
    }

    @Override
    public MortgqageUnpaidBalanceNodeComponentBuilder setMortgqageUnpaidBalanceNodeModule(
        MortgqageUnpaidBalanceNodeModule module) {
      this.mortgqageUnpaidBalanceNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgqageUnpaidBalanceNodeComponentImpl
      implements MortgqageUnpaidBalanceNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<MortgqageUnpaidBalanceNodeRuleProvider>
        mortgqageUnpaidBalanceNodeRuleProviderMembersInjector;

    private Provider<MortgqageUnpaidBalanceNodeRuleProvider> mortgqageUnpaidBalanceNodeRuleProvider;

    private MortgqageUnpaidBalanceNodeComponentImpl(
        MortgqageUnpaidBalanceNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgqageUnpaidBalanceNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgqageUnpaidBalanceNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgqageUnpaidBalanceNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgqageUnpaidBalanceNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgqageUnpaidBalanceNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              MortgqageUnpaidBalanceNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.mortgqageUnpaidBalanceNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.mortgqageUnpaidBalanceNodeRuleProviderMembersInjector =
          MortgqageUnpaidBalanceNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.mortgqageUnpaidBalanceNodeRuleProvider =
          DoubleCheck.provider(
              MortgqageUnpaidBalanceNodeRuleProvider_Factory.create(
                  mortgqageUnpaidBalanceNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgqageUnpaidBalanceNodeRuleProvider getMortgqageUnpaidBalanceNodeRuleProvider() {
      return mortgqageUnpaidBalanceNodeRuleProvider.get();
    }
  }

  private final class MortgageLimitAmountNodeComponentBuilder
      implements MortgageLimitAmountNodeComponent.Builder {
    private MortgageLimitAmountNodeModule mortgageLimitAmountNodeModule;

    @Override
    public MortgageLimitAmountNodeComponent build() {
      if (mortgageLimitAmountNodeModule == null) {
        throw new IllegalStateException(
            MortgageLimitAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageLimitAmountNodeComponentImpl(this);
    }

    @Override
    public MortgageLimitAmountNodeComponentBuilder setMortgageLimitAmountNodeModule(
        MortgageLimitAmountNodeModule module) {
      this.mortgageLimitAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageLimitAmountNodeComponentImpl
      implements MortgageLimitAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<MortgageLimitAmountNodeRuleProvider>
        mortgageLimitAmountNodeRuleProviderMembersInjector;

    private Provider<MortgageLimitAmountNodeRuleProvider> mortgageLimitAmountNodeRuleProvider;

    private MortgageLimitAmountNodeComponentImpl(MortgageLimitAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageLimitAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageLimitAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageLimitAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageLimitAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageLimitAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              MortgageLimitAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.mortgageLimitAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.mortgageLimitAmountNodeRuleProviderMembersInjector =
          MortgageLimitAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.mortgageLimitAmountNodeRuleProvider =
          DoubleCheck.provider(
              MortgageLimitAmountNodeRuleProvider_Factory.create(
                  mortgageLimitAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageLimitAmountNodeRuleProvider getMortgageLimitAmountNodeRuleProvider() {
      return mortgageLimitAmountNodeRuleProvider.get();
    }
  }

  private final class MortgageBreakFeeNodeComponentBuilder
      implements MortgageBreakFeeNodeComponent.Builder {
    private MortgageBreakFeeNodeModule mortgageBreakFeeNodeModule;

    @Override
    public MortgageBreakFeeNodeComponent build() {
      if (mortgageBreakFeeNodeModule == null) {
        throw new IllegalStateException(
            MortgageBreakFeeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageBreakFeeNodeComponentImpl(this);
    }

    @Override
    public MortgageBreakFeeNodeComponentBuilder setMortgageBreakFeeNodeModule(
        MortgageBreakFeeNodeModule module) {
      this.mortgageBreakFeeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageBreakFeeNodeComponentImpl implements MortgageBreakFeeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<MortgageBreakFeeNodeRuleProvider>
        mortgageBreakFeeNodeRuleProviderMembersInjector;

    private Provider<MortgageBreakFeeNodeRuleProvider> mortgageBreakFeeNodeRuleProvider;

    private MortgageBreakFeeNodeComponentImpl(MortgageBreakFeeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageBreakFeeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageBreakFeeNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageBreakFeeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageBreakFeeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageBreakFeeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              MortgageBreakFeeNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.mortgageBreakFeeNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.mortgageBreakFeeNodeRuleProviderMembersInjector =
          MortgageBreakFeeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.mortgageBreakFeeNodeRuleProvider =
          DoubleCheck.provider(
              MortgageBreakFeeNodeRuleProvider_Factory.create(
                  mortgageBreakFeeNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageBreakFeeNodeRuleProvider getMortgageBreakFeeNodeRuleProvider() {
      return mortgageBreakFeeNodeRuleProvider.get();
    }
  }

  private final class MortgageLenderInstitutionNodeComponentBuilder
      implements MortgageLenderInstitutionNodeComponent.Builder {
    private MortgageLenderInstitutionNodeModule mortgageLenderInstitutionNodeModule;

    @Override
    public MortgageLenderInstitutionNodeComponent build() {
      if (mortgageLenderInstitutionNodeModule == null) {
        throw new IllegalStateException(
            MortgageLenderInstitutionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageLenderInstitutionNodeComponentImpl(this);
    }

    @Override
    public MortgageLenderInstitutionNodeComponentBuilder setMortgageLenderInstitutionNodeModule(
        MortgageLenderInstitutionNodeModule module) {
      this.mortgageLenderInstitutionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageLenderInstitutionNodeComponentImpl
      implements MortgageLenderInstitutionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MortgageLenderInstitutionNodeRuleProvider>
        mortgageLenderInstitutionNodeRuleProviderMembersInjector;

    private Provider<MortgageLenderInstitutionNodeRuleProvider>
        mortgageLenderInstitutionNodeRuleProvider;

    private MortgageLenderInstitutionNodeComponentImpl(
        MortgageLenderInstitutionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageLenderInstitutionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageLenderInstitutionNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageLenderInstitutionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageLenderInstitutionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageLenderInstitutionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MortgageLenderInstitutionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.mortgageLenderInstitutionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.mortgageLenderInstitutionNodeRuleProviderMembersInjector =
          MortgageLenderInstitutionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.mortgageLenderInstitutionNodeRuleProvider =
          DoubleCheck.provider(
              MortgageLenderInstitutionNodeRuleProvider_Factory.create(
                  mortgageLenderInstitutionNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageLenderInstitutionNodeRuleProvider
        getMortgageLenderInstitutionNodeRuleProvider() {
      return mortgageLenderInstitutionNodeRuleProvider.get();
    }
  }

  private final class MortgageClearingFlagNodeComponentBuilder
      implements MortgageClearingFlagNodeComponent.Builder {
    private MortgageClearingFlagNodeModule mortgageClearingFlagNodeModule;

    @Override
    public MortgageClearingFlagNodeComponent build() {
      if (mortgageClearingFlagNodeModule == null) {
        throw new IllegalStateException(
            MortgageClearingFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageClearingFlagNodeComponentImpl(this);
    }

    @Override
    public MortgageClearingFlagNodeComponentBuilder setMortgageClearingFlagNodeModule(
        MortgageClearingFlagNodeModule module) {
      this.mortgageClearingFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageClearingFlagNodeComponentImpl
      implements MortgageClearingFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<MortgageClearingFlagNodeRuleProvider>
        mortgageClearingFlagNodeRuleProviderMembersInjector;

    private Provider<MortgageClearingFlagNodeRuleProvider> mortgageClearingFlagNodeRuleProvider;

    private MortgageClearingFlagNodeComponentImpl(
        MortgageClearingFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageClearingFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageClearingFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageClearingFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageClearingFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageClearingFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              MortgageClearingFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.mortgageClearingFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.mortgageClearingFlagNodeRuleProviderMembersInjector =
          MortgageClearingFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.mortgageClearingFlagNodeRuleProvider =
          DoubleCheck.provider(
              MortgageClearingFlagNodeRuleProvider_Factory.create(
                  mortgageClearingFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageClearingFlagNodeRuleProvider getMortgageClearingFlagNodeRuleProvider() {
      return mortgageClearingFlagNodeRuleProvider.get();
    }
  }

  private final class MortgageMonthlyRepaymentNodeComponentBuilder
      implements MortgageMonthlyRepaymentNodeComponent.Builder {
    private MortgageMonthlyRepaymentNodeModule mortgageMonthlyRepaymentNodeModule;

    @Override
    public MortgageMonthlyRepaymentNodeComponent build() {
      if (mortgageMonthlyRepaymentNodeModule == null) {
        throw new IllegalStateException(
            MortgageMonthlyRepaymentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageMonthlyRepaymentNodeComponentImpl(this);
    }

    @Override
    public MortgageMonthlyRepaymentNodeComponentBuilder setMortgageMonthlyRepaymentNodeModule(
        MortgageMonthlyRepaymentNodeModule module) {
      this.mortgageMonthlyRepaymentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageMonthlyRepaymentNodeComponentImpl
      implements MortgageMonthlyRepaymentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<MortgageMonthlyRepaymentNodeRuleProvider>
        mortgageMonthlyRepaymentNodeRuleProviderMembersInjector;

    private Provider<MortgageMonthlyRepaymentNodeRuleProvider>
        mortgageMonthlyRepaymentNodeRuleProvider;

    private MortgageMonthlyRepaymentNodeComponentImpl(
        MortgageMonthlyRepaymentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageMonthlyRepaymentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageMonthlyRepaymentNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageMonthlyRepaymentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageMonthlyRepaymentNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageMonthlyRepaymentNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              MortgageMonthlyRepaymentNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.mortgageMonthlyRepaymentNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.mortgageMonthlyRepaymentNodeRuleProviderMembersInjector =
          MortgageMonthlyRepaymentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.mortgageMonthlyRepaymentNodeRuleProvider =
          DoubleCheck.provider(
              MortgageMonthlyRepaymentNodeRuleProvider_Factory.create(
                  mortgageMonthlyRepaymentNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageMonthlyRepaymentNodeRuleProvider getMortgageMonthlyRepaymentNodeRuleProvider() {
      return mortgageMonthlyRepaymentNodeRuleProvider.get();
    }
  }

  private final class MortgageBorrowerRateNodeComponentBuilder
      implements MortgageBorrowerRateNodeComponent.Builder {
    private MortgageBorrowerRateNodeModule mortgageBorrowerRateNodeModule;

    @Override
    public MortgageBorrowerRateNodeComponent build() {
      if (mortgageBorrowerRateNodeModule == null) {
        throw new IllegalStateException(
            MortgageBorrowerRateNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageBorrowerRateNodeComponentImpl(this);
    }

    @Override
    public MortgageBorrowerRateNodeComponentBuilder setMortgageBorrowerRateNodeModule(
        MortgageBorrowerRateNodeModule module) {
      this.mortgageBorrowerRateNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageBorrowerRateNodeComponentImpl
      implements MortgageBorrowerRateNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<MortgageBorrowerRateNodeRuleProvider>
        mortgageBorrowerRateNodeRuleProviderMembersInjector;

    private Provider<MortgageBorrowerRateNodeRuleProvider> mortgageBorrowerRateNodeRuleProvider;

    private MortgageBorrowerRateNodeComponentImpl(
        MortgageBorrowerRateNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageBorrowerRateNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageBorrowerRateNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageBorrowerRateNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageBorrowerRateNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageBorrowerRateNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              MortgageBorrowerRateNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.mortgageBorrowerRateNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.mortgageBorrowerRateNodeRuleProviderMembersInjector =
          MortgageBorrowerRateNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.mortgageBorrowerRateNodeRuleProvider =
          DoubleCheck.provider(
              MortgageBorrowerRateNodeRuleProvider_Factory.create(
                  mortgageBorrowerRateNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageBorrowerRateNodeRuleProvider getMortgageBorrowerRateNodeRuleProvider() {
      return mortgageBorrowerRateNodeRuleProvider.get();
    }
  }

  private final class MortgageInterestOnlyExpiryDateNodeComponentBuilder
      implements MortgageInterestOnlyExpiryDateNodeComponent.Builder {
    private MortgageInterestOnlyExpiryDateNodeModule mortgageInterestOnlyExpiryDateNodeModule;

    @Override
    public MortgageInterestOnlyExpiryDateNodeComponent build() {
      if (mortgageInterestOnlyExpiryDateNodeModule == null) {
        throw new IllegalStateException(
            MortgageInterestOnlyExpiryDateNodeModule.class.getCanonicalName() + " must be set");
      }
      return new MortgageInterestOnlyExpiryDateNodeComponentImpl(this);
    }

    @Override
    public MortgageInterestOnlyExpiryDateNodeComponentBuilder
        setMortgageInterestOnlyExpiryDateNodeModule(
            MortgageInterestOnlyExpiryDateNodeModule module) {
      this.mortgageInterestOnlyExpiryDateNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class MortgageInterestOnlyExpiryDateNodeComponentImpl
      implements MortgageInterestOnlyExpiryDateNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<MortgageInterestOnlyExpiryDateNodeRuleProvider>
        mortgageInterestOnlyExpiryDateNodeRuleProviderMembersInjector;

    private Provider<MortgageInterestOnlyExpiryDateNodeRuleProvider>
        mortgageInterestOnlyExpiryDateNodeRuleProvider;

    private MortgageInterestOnlyExpiryDateNodeComponentImpl(
        MortgageInterestOnlyExpiryDateNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MortgageInterestOnlyExpiryDateNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              MortgageInterestOnlyExpiryDateNodeModule_ProvideUiNodeFactory.create(
                  builder.mortgageInterestOnlyExpiryDateNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              MortgageInterestOnlyExpiryDateNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.mortgageInterestOnlyExpiryDateNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              MortgageInterestOnlyExpiryDateNodeModule_ProvideStringUiNodeFactory.create(
                  builder.mortgageInterestOnlyExpiryDateNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.mortgageInterestOnlyExpiryDateNodeRuleProviderMembersInjector =
          MortgageInterestOnlyExpiryDateNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.mortgageInterestOnlyExpiryDateNodeRuleProvider =
          DoubleCheck.provider(
              MortgageInterestOnlyExpiryDateNodeRuleProvider_Factory.create(
                  mortgageInterestOnlyExpiryDateNodeRuleProviderMembersInjector));
    }

    @Override
    public MortgageInterestOnlyExpiryDateNodeRuleProvider
        getMortgageInterestOnlyExpiryDateNodeRuleProvider() {
      return mortgageInterestOnlyExpiryDateNodeRuleProvider.get();
    }
  }

  private final class ExistingMortgageNodeComponentBuilder
      implements ExistingMortgageNodeComponent.Builder {
    private ExistingMortgageNodeModule existingMortgageNodeModule;

    @Override
    public ExistingMortgageNodeComponent build() {
      if (existingMortgageNodeModule == null) {
        throw new IllegalStateException(
            ExistingMortgageNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ExistingMortgageNodeComponentImpl(this);
    }

    @Override
    public ExistingMortgageNodeComponentBuilder setExistingMortgageNodeModule(
        ExistingMortgageNodeModule module) {
      this.existingMortgageNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ExistingMortgageNodeComponentImpl implements ExistingMortgageNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ExistingMortgageNodeRuleProvider>
        existingMortgageNodeRuleProviderMembersInjector;

    private Provider<ExistingMortgageNodeRuleProvider> existingMortgageNodeRuleProvider;

    private ExistingMortgageNodeComponentImpl(ExistingMortgageNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ExistingMortgageNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ExistingMortgageNodeModule_ProvideUiNodeFactory.create(
                  builder.existingMortgageNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ExistingMortgageNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.existingMortgageNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.existingMortgageNodeRuleProviderMembersInjector =
          ExistingMortgageNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.existingMortgageNodeRuleProvider =
          DoubleCheck.provider(
              ExistingMortgageNodeRuleProvider_Factory.create(
                  existingMortgageNodeRuleProviderMembersInjector));
    }

    @Override
    public ExistingMortgageNodeRuleProvider getExistingMortgageNodeRuleProvider() {
      return existingMortgageNodeRuleProvider.get();
    }
  }

  private final class ExistingMortgageListNodeComponentBuilder
      implements ExistingMortgageListNodeComponent.Builder {
    private ExistingMortgageListNodeModule existingMortgageListNodeModule;

    @Override
    public ExistingMortgageListNodeComponent build() {
      if (existingMortgageListNodeModule == null) {
        throw new IllegalStateException(
            ExistingMortgageListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ExistingMortgageListNodeComponentImpl(this);
    }

    @Override
    public ExistingMortgageListNodeComponentBuilder setExistingMortgageListNodeModule(
        ExistingMortgageListNodeModule module) {
      this.existingMortgageListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ExistingMortgageListNodeComponentImpl
      implements ExistingMortgageListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<ExistingMortgageListNodeRuleProvider>
        existingMortgageListNodeRuleProviderMembersInjector;

    private Provider<ExistingMortgageListNodeRuleProvider> existingMortgageListNodeRuleProvider;

    private ExistingMortgageListNodeComponentImpl(
        ExistingMortgageListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ExistingMortgageListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ExistingMortgageListNodeModule_ProvideUiNodeFactory.create(
                  builder.existingMortgageListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.existingMortgageListNodeRuleProviderMembersInjector =
          ExistingMortgageListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.existingMortgageListNodeRuleProvider =
          DoubleCheck.provider(
              ExistingMortgageListNodeRuleProvider_Factory.create(
                  existingMortgageListNodeRuleProviderMembersInjector));
    }

    @Override
    public ExistingMortgageListNodeRuleProvider getExistingMortgageListNodeRuleProvider() {
      return existingMortgageListNodeRuleProvider.get();
    }
  }

  private final class UsageNodeComponentBuilder implements UsageNodeComponent.Builder {
    private UsageNodeModule usageNodeModule;

    @Override
    public UsageNodeComponent build() {
      if (usageNodeModule == null) {
        throw new IllegalStateException(UsageNodeModule.class.getCanonicalName() + " must be set");
      }
      return new UsageNodeComponentImpl(this);
    }

    @Override
    public UsageNodeComponentBuilder setUsageNodeModule(UsageNodeModule module) {
      this.usageNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class UsageNodeComponentImpl implements UsageNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<UsageNodeRuleProvider> usageNodeRuleProviderMembersInjector;

    private Provider<UsageNodeRuleProvider> usageNodeRuleProvider;

    private UsageNodeComponentImpl(UsageNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final UsageNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              UsageNodeModule_ProvideUiNodeFactory.create(builder.usageNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              UsageNodeModule_ProvideObjectUiNodeFactory.create(builder.usageNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.usageNodeRuleProviderMembersInjector =
          UsageNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.usageNodeRuleProvider =
          DoubleCheck.provider(
              UsageNodeRuleProvider_Factory.create(usageNodeRuleProviderMembersInjector));
    }

    @Override
    public UsageNodeRuleProvider getUsageNodeRuleProvider() {
      return usageNodeRuleProvider.get();
    }
  }

  private final class AccessContactLastNameNodeComponentBuilder
      implements AccessContactLastNameNodeComponent.Builder {
    private AccessContactLastNameNodeModule accessContactLastNameNodeModule;

    @Override
    public AccessContactLastNameNodeComponent build() {
      if (accessContactLastNameNodeModule == null) {
        throw new IllegalStateException(
            AccessContactLastNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccessContactLastNameNodeComponentImpl(this);
    }

    @Override
    public AccessContactLastNameNodeComponentBuilder setAccessContactLastNameNodeModule(
        AccessContactLastNameNodeModule module) {
      this.accessContactLastNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccessContactLastNameNodeComponentImpl
      implements AccessContactLastNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AccessContactLastNameNodeRuleProvider>
        accessContactLastNameNodeRuleProviderMembersInjector;

    private Provider<AccessContactLastNameNodeRuleProvider> accessContactLastNameNodeRuleProvider;

    private AccessContactLastNameNodeComponentImpl(
        AccessContactLastNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccessContactLastNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccessContactLastNameNodeModule_ProvideUiNodeFactory.create(
                  builder.accessContactLastNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AccessContactLastNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.accessContactLastNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AccessContactLastNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.accessContactLastNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.accessContactLastNameNodeRuleProviderMembersInjector =
          AccessContactLastNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.accessContactLastNameNodeRuleProvider =
          DoubleCheck.provider(
              AccessContactLastNameNodeRuleProvider_Factory.create(
                  accessContactLastNameNodeRuleProviderMembersInjector));
    }

    @Override
    public AccessContactLastNameNodeRuleProvider getAccessContactLastNameNodeRuleProvider() {
      return accessContactLastNameNodeRuleProvider.get();
    }
  }

  private final class AccessOtherDescriptionNodeComponentBuilder
      implements AccessOtherDescriptionNodeComponent.Builder {
    private AccessOtherDescriptionNodeModule accessOtherDescriptionNodeModule;

    @Override
    public AccessOtherDescriptionNodeComponent build() {
      if (accessOtherDescriptionNodeModule == null) {
        throw new IllegalStateException(
            AccessOtherDescriptionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccessOtherDescriptionNodeComponentImpl(this);
    }

    @Override
    public AccessOtherDescriptionNodeComponentBuilder setAccessOtherDescriptionNodeModule(
        AccessOtherDescriptionNodeModule module) {
      this.accessOtherDescriptionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccessOtherDescriptionNodeComponentImpl
      implements AccessOtherDescriptionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AccessOtherDescriptionNodeRuleProvider>
        accessOtherDescriptionNodeRuleProviderMembersInjector;

    private Provider<AccessOtherDescriptionNodeRuleProvider> accessOtherDescriptionNodeRuleProvider;

    private AccessOtherDescriptionNodeComponentImpl(
        AccessOtherDescriptionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccessOtherDescriptionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccessOtherDescriptionNodeModule_ProvideUiNodeFactory.create(
                  builder.accessOtherDescriptionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AccessOtherDescriptionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.accessOtherDescriptionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AccessOtherDescriptionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.accessOtherDescriptionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.accessOtherDescriptionNodeRuleProviderMembersInjector =
          AccessOtherDescriptionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.accessOtherDescriptionNodeRuleProvider =
          DoubleCheck.provider(
              AccessOtherDescriptionNodeRuleProvider_Factory.create(
                  accessOtherDescriptionNodeRuleProviderMembersInjector));
    }

    @Override
    public AccessOtherDescriptionNodeRuleProvider getAccessOtherDescriptionNodeRuleProvider() {
      return accessOtherDescriptionNodeRuleProvider.get();
    }
  }

  private final class AccessContactFirstNameNodeComponentBuilder
      implements AccessContactFirstNameNodeComponent.Builder {
    private AccessContactFirstNameNodeModule accessContactFirstNameNodeModule;

    @Override
    public AccessContactFirstNameNodeComponent build() {
      if (accessContactFirstNameNodeModule == null) {
        throw new IllegalStateException(
            AccessContactFirstNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccessContactFirstNameNodeComponentImpl(this);
    }

    @Override
    public AccessContactFirstNameNodeComponentBuilder setAccessContactFirstNameNodeModule(
        AccessContactFirstNameNodeModule module) {
      this.accessContactFirstNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccessContactFirstNameNodeComponentImpl
      implements AccessContactFirstNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AccessContactFirstNameNodeRuleProvider>
        accessContactFirstNameNodeRuleProviderMembersInjector;

    private Provider<AccessContactFirstNameNodeRuleProvider> accessContactFirstNameNodeRuleProvider;

    private AccessContactFirstNameNodeComponentImpl(
        AccessContactFirstNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccessContactFirstNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccessContactFirstNameNodeModule_ProvideUiNodeFactory.create(
                  builder.accessContactFirstNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AccessContactFirstNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.accessContactFirstNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AccessContactFirstNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.accessContactFirstNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.accessContactFirstNameNodeRuleProviderMembersInjector =
          AccessContactFirstNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.accessContactFirstNameNodeRuleProvider =
          DoubleCheck.provider(
              AccessContactFirstNameNodeRuleProvider_Factory.create(
                  accessContactFirstNameNodeRuleProviderMembersInjector));
    }

    @Override
    public AccessContactFirstNameNodeRuleProvider getAccessContactFirstNameNodeRuleProvider() {
      return accessContactFirstNameNodeRuleProvider.get();
    }
  }

  private final class AccessContactTypeNodeComponentBuilder
      implements AccessContactTypeNodeComponent.Builder {
    private AccessContactTypeNodeModule accessContactTypeNodeModule;

    @Override
    public AccessContactTypeNodeComponent build() {
      if (accessContactTypeNodeModule == null) {
        throw new IllegalStateException(
            AccessContactTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccessContactTypeNodeComponentImpl(this);
    }

    @Override
    public AccessContactTypeNodeComponentBuilder setAccessContactTypeNodeModule(
        AccessContactTypeNodeModule module) {
      this.accessContactTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccessContactTypeNodeComponentImpl implements AccessContactTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AccessContactTypeNodeRuleProvider>
        accessContactTypeNodeRuleProviderMembersInjector;

    private Provider<AccessContactTypeNodeRuleProvider> accessContactTypeNodeRuleProvider;

    private AccessContactTypeNodeComponentImpl(AccessContactTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccessContactTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccessContactTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.accessContactTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AccessContactTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.accessContactTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AccessContactTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.accessContactTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.accessContactTypeNodeRuleProviderMembersInjector =
          AccessContactTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.accessContactTypeNodeRuleProvider =
          DoubleCheck.provider(
              AccessContactTypeNodeRuleProvider_Factory.create(
                  accessContactTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public AccessContactTypeNodeRuleProvider getAccessContactTypeNodeRuleProvider() {
      return accessContactTypeNodeRuleProvider.get();
    }
  }

  private final class AccessContactTitleNodeComponentBuilder
      implements AccessContactTitleNodeComponent.Builder {
    private AccessContactTitleNodeModule accessContactTitleNodeModule;

    @Override
    public AccessContactTitleNodeComponent build() {
      if (accessContactTitleNodeModule == null) {
        throw new IllegalStateException(
            AccessContactTitleNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccessContactTitleNodeComponentImpl(this);
    }

    @Override
    public AccessContactTitleNodeComponentBuilder setAccessContactTitleNodeModule(
        AccessContactTitleNodeModule module) {
      this.accessContactTitleNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccessContactTitleNodeComponentImpl
      implements AccessContactTitleNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AccessContactTitleNodeRuleProvider>
        accessContactTitleNodeRuleProviderMembersInjector;

    private Provider<AccessContactTitleNodeRuleProvider> accessContactTitleNodeRuleProvider;

    private AccessContactTitleNodeComponentImpl(AccessContactTitleNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccessContactTitleNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccessContactTitleNodeModule_ProvideUiNodeFactory.create(
                  builder.accessContactTitleNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AccessContactTitleNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.accessContactTitleNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AccessContactTitleNodeModule_ProvideStringUiNodeFactory.create(
                  builder.accessContactTitleNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.accessContactTitleNodeRuleProviderMembersInjector =
          AccessContactTitleNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.accessContactTitleNodeRuleProvider =
          DoubleCheck.provider(
              AccessContactTitleNodeRuleProvider_Factory.create(
                  accessContactTitleNodeRuleProviderMembersInjector));
    }

    @Override
    public AccessContactTitleNodeRuleProvider getAccessContactTitleNodeRuleProvider() {
      return accessContactTitleNodeRuleProvider.get();
    }
  }

  private final class AccessTelephoneNodeComponentBuilder
      implements AccessTelephoneNodeComponent.Builder {
    private AccessTelephoneNodeModule accessTelephoneNodeModule;

    @Override
    public AccessTelephoneNodeComponent build() {
      if (accessTelephoneNodeModule == null) {
        throw new IllegalStateException(
            AccessTelephoneNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccessTelephoneNodeComponentImpl(this);
    }

    @Override
    public AccessTelephoneNodeComponentBuilder setAccessTelephoneNodeModule(
        AccessTelephoneNodeModule module) {
      this.accessTelephoneNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccessTelephoneNodeComponentImpl implements AccessTelephoneNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AccessTelephoneNodeRuleProvider>
        accessTelephoneNodeRuleProviderMembersInjector;

    private Provider<AccessTelephoneNodeRuleProvider> accessTelephoneNodeRuleProvider;

    private AccessTelephoneNodeComponentImpl(AccessTelephoneNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccessTelephoneNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccessTelephoneNodeModule_ProvideUiNodeFactory.create(
                  builder.accessTelephoneNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AccessTelephoneNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.accessTelephoneNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AccessTelephoneNodeModule_ProvideStringUiNodeFactory.create(
                  builder.accessTelephoneNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.accessTelephoneNodeRuleProviderMembersInjector =
          AccessTelephoneNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.accessTelephoneNodeRuleProvider =
          DoubleCheck.provider(
              AccessTelephoneNodeRuleProvider_Factory.create(
                  accessTelephoneNodeRuleProviderMembersInjector));
    }

    @Override
    public AccessTelephoneNodeRuleProvider getAccessTelephoneNodeRuleProvider() {
      return accessTelephoneNodeRuleProvider.get();
    }
  }

  private final class AccessCompanyNameNodeComponentBuilder
      implements AccessCompanyNameNodeComponent.Builder {
    private AccessCompanyNameNodeModule accessCompanyNameNodeModule;

    @Override
    public AccessCompanyNameNodeComponent build() {
      if (accessCompanyNameNodeModule == null) {
        throw new IllegalStateException(
            AccessCompanyNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccessCompanyNameNodeComponentImpl(this);
    }

    @Override
    public AccessCompanyNameNodeComponentBuilder setAccessCompanyNameNodeModule(
        AccessCompanyNameNodeModule module) {
      this.accessCompanyNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccessCompanyNameNodeComponentImpl implements AccessCompanyNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AccessCompanyNameNodeRuleProvider>
        accessCompanyNameNodeRuleProviderMembersInjector;

    private Provider<AccessCompanyNameNodeRuleProvider> accessCompanyNameNodeRuleProvider;

    private AccessCompanyNameNodeComponentImpl(AccessCompanyNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccessCompanyNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccessCompanyNameNodeModule_ProvideUiNodeFactory.create(
                  builder.accessCompanyNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AccessCompanyNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.accessCompanyNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AccessCompanyNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.accessCompanyNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.accessCompanyNameNodeRuleProviderMembersInjector =
          AccessCompanyNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.accessCompanyNameNodeRuleProvider =
          DoubleCheck.provider(
              AccessCompanyNameNodeRuleProvider_Factory.create(
                  accessCompanyNameNodeRuleProviderMembersInjector));
    }

    @Override
    public AccessCompanyNameNodeRuleProvider getAccessCompanyNameNodeRuleProvider() {
      return accessCompanyNameNodeRuleProvider.get();
    }
  }

  private final class AccessNodeComponentBuilder implements AccessNodeComponent.Builder {
    private AccessNodeModule accessNodeModule;

    @Override
    public AccessNodeComponent build() {
      if (accessNodeModule == null) {
        throw new IllegalStateException(AccessNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AccessNodeComponentImpl(this);
    }

    @Override
    public AccessNodeComponentBuilder setAccessNodeModule(AccessNodeModule module) {
      this.accessNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AccessNodeComponentImpl implements AccessNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<AccessNodeRuleProvider> accessNodeRuleProviderMembersInjector;

    private Provider<AccessNodeRuleProvider> accessNodeRuleProvider;

    private AccessNodeComponentImpl(AccessNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AccessNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AccessNodeModule_ProvideUiNodeFactory.create(builder.accessNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              AccessNodeModule_ProvideObjectUiNodeFactory.create(builder.accessNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.accessNodeRuleProviderMembersInjector =
          AccessNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.accessNodeRuleProvider =
          DoubleCheck.provider(
              AccessNodeRuleProvider_Factory.create(accessNodeRuleProviderMembersInjector));
    }

    @Override
    public AccessNodeRuleProvider getAccessNodeRuleProvider() {
      return accessNodeRuleProvider.get();
    }
  }

  private final class RealEstateNodeComponentBuilder implements RealEstateNodeComponent.Builder {
    private RealEstateNodeModule realEstateNodeModule;

    @Override
    public RealEstateNodeComponent build() {
      if (realEstateNodeModule == null) {
        throw new IllegalStateException(
            RealEstateNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RealEstateNodeComponentImpl(this);
    }

    @Override
    public RealEstateNodeComponentBuilder setRealEstateNodeModule(RealEstateNodeModule module) {
      this.realEstateNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RealEstateNodeComponentImpl implements RealEstateNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<RealEstateNodeRuleProvider> realEstateNodeRuleProviderMembersInjector;

    private Provider<RealEstateNodeRuleProvider> realEstateNodeRuleProvider;

    private RealEstateNodeComponentImpl(RealEstateNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RealEstateNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RealEstateNodeModule_ProvideUiNodeFactory.create(builder.realEstateNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              RealEstateNodeModule_ProvideObjectUiNodeFactory.create(builder.realEstateNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.realEstateNodeRuleProviderMembersInjector =
          RealEstateNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.realEstateNodeRuleProvider =
          DoubleCheck.provider(
              RealEstateNodeRuleProvider_Factory.create(realEstateNodeRuleProviderMembersInjector));
    }

    @Override
    public RealEstateNodeRuleProvider getRealEstateNodeRuleProvider() {
      return realEstateNodeRuleProvider.get();
    }
  }

  private final class RealEstateListNodeComponentBuilder
      implements RealEstateListNodeComponent.Builder {
    private RealEstateListNodeModule realEstateListNodeModule;

    @Override
    public RealEstateListNodeComponent build() {
      if (realEstateListNodeModule == null) {
        throw new IllegalStateException(
            RealEstateListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RealEstateListNodeComponentImpl(this);
    }

    @Override
    public RealEstateListNodeComponentBuilder setRealEstateListNodeModule(
        RealEstateListNodeModule module) {
      this.realEstateListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RealEstateListNodeComponentImpl implements RealEstateListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<RealEstateListNodeRuleProvider>
        realEstateListNodeRuleProviderMembersInjector;

    private Provider<RealEstateListNodeRuleProvider> realEstateListNodeRuleProvider;

    private RealEstateListNodeComponentImpl(RealEstateListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RealEstateListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RealEstateListNodeModule_ProvideUiNodeFactory.create(
                  builder.realEstateListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.realEstateListNodeRuleProviderMembersInjector =
          RealEstateListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.realEstateListNodeRuleProvider =
          DoubleCheck.provider(
              RealEstateListNodeRuleProvider_Factory.create(
                  realEstateListNodeRuleProviderMembersInjector));
    }

    @Override
    public RealEstateListNodeRuleProvider getRealEstateListNodeRuleProvider() {
      return realEstateListNodeRuleProvider.get();
    }
  }

  private final class CompanyPrivacyNodeComponentBuilder
      implements CompanyPrivacyNodeComponent.Builder {
    private CompanyPrivacyNodeModule companyPrivacyNodeModule;

    @Override
    public CompanyPrivacyNodeComponent build() {
      if (companyPrivacyNodeModule == null) {
        throw new IllegalStateException(
            CompanyPrivacyNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyPrivacyNodeComponentImpl(this);
    }

    @Override
    public CompanyPrivacyNodeComponentBuilder setCompanyPrivacyNodeModule(
        CompanyPrivacyNodeModule module) {
      this.companyPrivacyNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyPrivacyNodeComponentImpl implements CompanyPrivacyNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<CompanyPrivacyNodeRuleProvider>
        companyPrivacyNodeRuleProviderMembersInjector;

    private Provider<CompanyPrivacyNodeRuleProvider> companyPrivacyNodeRuleProvider;

    private CompanyPrivacyNodeComponentImpl(CompanyPrivacyNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyPrivacyNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyPrivacyNodeModule_ProvideUiNodeFactory.create(
                  builder.companyPrivacyNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              CompanyPrivacyNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.companyPrivacyNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.companyPrivacyNodeRuleProviderMembersInjector =
          CompanyPrivacyNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.companyPrivacyNodeRuleProvider =
          DoubleCheck.provider(
              CompanyPrivacyNodeRuleProvider_Factory.create(
                  companyPrivacyNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyPrivacyNodeRuleProvider getCompanyPrivacyNodeRuleProvider() {
      return companyPrivacyNodeRuleProvider.get();
    }
  }

  private final class CompanyOtherIncomeListNodeComponentBuilder
      implements CompanyOtherIncomeListNodeComponent.Builder {
    private CompanyOtherIncomeListNodeModule companyOtherIncomeListNodeModule;

    @Override
    public CompanyOtherIncomeListNodeComponent build() {
      if (companyOtherIncomeListNodeModule == null) {
        throw new IllegalStateException(
            CompanyOtherIncomeListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyOtherIncomeListNodeComponentImpl(this);
    }

    @Override
    public CompanyOtherIncomeListNodeComponentBuilder setCompanyOtherIncomeListNodeModule(
        CompanyOtherIncomeListNodeModule module) {
      this.companyOtherIncomeListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyOtherIncomeListNodeComponentImpl
      implements CompanyOtherIncomeListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<CompanyOtherIncomeListNodeRuleProvider>
        companyOtherIncomeListNodeRuleProviderMembersInjector;

    private Provider<CompanyOtherIncomeListNodeRuleProvider> companyOtherIncomeListNodeRuleProvider;

    private CompanyOtherIncomeListNodeComponentImpl(
        CompanyOtherIncomeListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyOtherIncomeListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyOtherIncomeListNodeModule_ProvideUiNodeFactory.create(
                  builder.companyOtherIncomeListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.companyOtherIncomeListNodeRuleProviderMembersInjector =
          CompanyOtherIncomeListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.companyOtherIncomeListNodeRuleProvider =
          DoubleCheck.provider(
              CompanyOtherIncomeListNodeRuleProvider_Factory.create(
                  companyOtherIncomeListNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyOtherIncomeListNodeRuleProvider getCompanyOtherIncomeListNodeRuleProvider() {
      return companyOtherIncomeListNodeRuleProvider.get();
    }
  }

  private final class CompanyResponsibleLendNodeComponentBuilder
      implements CompanyResponsibleLendNodeComponent.Builder {
    private CompanyResponsibleLendNodeModule companyResponsibleLendNodeModule;

    @Override
    public CompanyResponsibleLendNodeComponent build() {
      if (companyResponsibleLendNodeModule == null) {
        throw new IllegalStateException(
            CompanyResponsibleLendNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyResponsibleLendNodeComponentImpl(this);
    }

    @Override
    public CompanyResponsibleLendNodeComponentBuilder setCompanyResponsibleLendNodeModule(
        CompanyResponsibleLendNodeModule module) {
      this.companyResponsibleLendNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyResponsibleLendNodeComponentImpl
      implements CompanyResponsibleLendNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<CompanyResponsibleLendNodeRuleProvider>
        companyResponsibleLendNodeRuleProviderMembersInjector;

    private Provider<CompanyResponsibleLendNodeRuleProvider> companyResponsibleLendNodeRuleProvider;

    private CompanyResponsibleLendNodeComponentImpl(
        CompanyResponsibleLendNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyResponsibleLendNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyResponsibleLendNodeModule_ProvideUiNodeFactory.create(
                  builder.companyResponsibleLendNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              CompanyResponsibleLendNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.companyResponsibleLendNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.companyResponsibleLendNodeRuleProviderMembersInjector =
          CompanyResponsibleLendNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.companyResponsibleLendNodeRuleProvider =
          DoubleCheck.provider(
              CompanyResponsibleLendNodeRuleProvider_Factory.create(
                  companyResponsibleLendNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyResponsibleLendNodeRuleProvider getCompanyResponsibleLendNodeRuleProvider() {
      return companyResponsibleLendNodeRuleProvider.get();
    }
  }

  private final class CompanyContactFirstNameNodeComponentBuilder
      implements CompanyContactFirstNameNodeComponent.Builder {
    private CompanyContactFirstNameNodeModule companyContactFirstNameNodeModule;

    @Override
    public CompanyContactFirstNameNodeComponent build() {
      if (companyContactFirstNameNodeModule == null) {
        throw new IllegalStateException(
            CompanyContactFirstNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyContactFirstNameNodeComponentImpl(this);
    }

    @Override
    public CompanyContactFirstNameNodeComponentBuilder setCompanyContactFirstNameNodeModule(
        CompanyContactFirstNameNodeModule module) {
      this.companyContactFirstNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyContactFirstNameNodeComponentImpl
      implements CompanyContactFirstNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyContactFirstNameNodeRuleProvider>
        companyContactFirstNameNodeRuleProviderMembersInjector;

    private Provider<CompanyContactFirstNameNodeRuleProvider>
        companyContactFirstNameNodeRuleProvider;

    private CompanyContactFirstNameNodeComponentImpl(
        CompanyContactFirstNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyContactFirstNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyContactFirstNameNodeModule_ProvideUiNodeFactory.create(
                  builder.companyContactFirstNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyContactFirstNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyContactFirstNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyContactFirstNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyContactFirstNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyContactFirstNameNodeRuleProviderMembersInjector =
          CompanyContactFirstNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyContactFirstNameNodeRuleProvider =
          DoubleCheck.provider(
              CompanyContactFirstNameNodeRuleProvider_Factory.create(
                  companyContactFirstNameNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyContactFirstNameNodeRuleProvider getCompanyContactFirstNameNodeRuleProvider() {
      return companyContactFirstNameNodeRuleProvider.get();
    }
  }

  private final class CompanyContactLastNameNodeComponentBuilder
      implements CompanyContactLastNameNodeComponent.Builder {
    private CompanyContactLastNameNodeModule companyContactLastNameNodeModule;

    @Override
    public CompanyContactLastNameNodeComponent build() {
      if (companyContactLastNameNodeModule == null) {
        throw new IllegalStateException(
            CompanyContactLastNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyContactLastNameNodeComponentImpl(this);
    }

    @Override
    public CompanyContactLastNameNodeComponentBuilder setCompanyContactLastNameNodeModule(
        CompanyContactLastNameNodeModule module) {
      this.companyContactLastNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyContactLastNameNodeComponentImpl
      implements CompanyContactLastNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyContactLastNameNodeRuleProvider>
        companyContactLastNameNodeRuleProviderMembersInjector;

    private Provider<CompanyContactLastNameNodeRuleProvider> companyContactLastNameNodeRuleProvider;

    private CompanyContactLastNameNodeComponentImpl(
        CompanyContactLastNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyContactLastNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyContactLastNameNodeModule_ProvideUiNodeFactory.create(
                  builder.companyContactLastNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyContactLastNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyContactLastNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyContactLastNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyContactLastNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyContactLastNameNodeRuleProviderMembersInjector =
          CompanyContactLastNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyContactLastNameNodeRuleProvider =
          DoubleCheck.provider(
              CompanyContactLastNameNodeRuleProvider_Factory.create(
                  companyContactLastNameNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyContactLastNameNodeRuleProvider getCompanyContactLastNameNodeRuleProvider() {
      return companyContactLastNameNodeRuleProvider.get();
    }
  }

  private final class CompanyContactNodeComponentBuilder
      implements CompanyContactNodeComponent.Builder {
    private CompanyContactNodeModule companyContactNodeModule;

    @Override
    public CompanyContactNodeComponent build() {
      if (companyContactNodeModule == null) {
        throw new IllegalStateException(
            CompanyContactNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyContactNodeComponentImpl(this);
    }

    @Override
    public CompanyContactNodeComponentBuilder setCompanyContactNodeModule(
        CompanyContactNodeModule module) {
      this.companyContactNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyContactNodeComponentImpl implements CompanyContactNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<CompanyContactNodeRuleProvider>
        companyContactNodeRuleProviderMembersInjector;

    private Provider<CompanyContactNodeRuleProvider> companyContactNodeRuleProvider;

    private CompanyContactNodeComponentImpl(CompanyContactNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyContactNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyContactNodeModule_ProvideUiNodeFactory.create(
                  builder.companyContactNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              CompanyContactNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.companyContactNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.companyContactNodeRuleProviderMembersInjector =
          CompanyContactNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.companyContactNodeRuleProvider =
          DoubleCheck.provider(
              CompanyContactNodeRuleProvider_Factory.create(
                  companyContactNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyContactNodeRuleProvider getCompanyContactNodeRuleProvider() {
      return companyContactNodeRuleProvider.get();
    }
  }

  private final class CompanyRegistrationDateNodeComponentBuilder
      implements CompanyRegistrationDateNodeComponent.Builder {
    private CompanyRegistrationDateNodeModule companyRegistrationDateNodeModule;

    @Override
    public CompanyRegistrationDateNodeComponent build() {
      if (companyRegistrationDateNodeModule == null) {
        throw new IllegalStateException(
            CompanyRegistrationDateNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyRegistrationDateNodeComponentImpl(this);
    }

    @Override
    public CompanyRegistrationDateNodeComponentBuilder setCompanyRegistrationDateNodeModule(
        CompanyRegistrationDateNodeModule module) {
      this.companyRegistrationDateNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyRegistrationDateNodeComponentImpl
      implements CompanyRegistrationDateNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyRegistrationDateNodeRuleProvider>
        companyRegistrationDateNodeRuleProviderMembersInjector;

    private Provider<CompanyRegistrationDateNodeRuleProvider>
        companyRegistrationDateNodeRuleProvider;

    private CompanyRegistrationDateNodeComponentImpl(
        CompanyRegistrationDateNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyRegistrationDateNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegistrationDateNodeModule_ProvideUiNodeFactory.create(
                  builder.companyRegistrationDateNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegistrationDateNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyRegistrationDateNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegistrationDateNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyRegistrationDateNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyRegistrationDateNodeRuleProviderMembersInjector =
          CompanyRegistrationDateNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyRegistrationDateNodeRuleProvider =
          DoubleCheck.provider(
              CompanyRegistrationDateNodeRuleProvider_Factory.create(
                  companyRegistrationDateNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyRegistrationDateNodeRuleProvider getCompanyRegistrationDateNodeRuleProvider() {
      return companyRegistrationDateNodeRuleProvider.get();
    }
  }

  private final class RelatedPersonReferenceNodeComponentBuilder
      implements RelatedPersonReferenceNodeComponent.Builder {
    private RelatedPersonReferenceNodeModule relatedPersonReferenceNodeModule;

    @Override
    public RelatedPersonReferenceNodeComponent build() {
      if (relatedPersonReferenceNodeModule == null) {
        throw new IllegalStateException(
            RelatedPersonReferenceNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RelatedPersonReferenceNodeComponentImpl(this);
    }

    @Override
    public RelatedPersonReferenceNodeComponentBuilder setRelatedPersonReferenceNodeModule(
        RelatedPersonReferenceNodeModule module) {
      this.relatedPersonReferenceNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RelatedPersonReferenceNodeComponentImpl
      implements RelatedPersonReferenceNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private MembersInjector<NodeReferenceChangeRule> nodeReferenceChangeRuleMembersInjector;

    private Provider<ReferenceUiNode<?>> provideReferenceUiNodeProvider;

    private Provider<NodeReferenceChangeRule> nodeReferenceChangeRuleProvider;

    private MembersInjector<RelatedPersonReferenceNodeRuleProvider>
        relatedPersonReferenceNodeRuleProviderMembersInjector;

    private Provider<RelatedPersonReferenceNodeRuleProvider> relatedPersonReferenceNodeRuleProvider;

    private RelatedPersonReferenceNodeComponentImpl(
        RelatedPersonReferenceNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RelatedPersonReferenceNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RelatedPersonReferenceNodeModule_ProvideUiNodeFactory.create(
                  builder.relatedPersonReferenceNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              RelatedPersonReferenceNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.relatedPersonReferenceNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.nodeReferenceChangeRuleMembersInjector =
          NodeReferenceChangeRule_MembersInjector.create(
              DaggerDefaultProfileComponent.this.nodeReferenceRegistryProvider);

      this.provideReferenceUiNodeProvider =
          DoubleCheck.provider(
              RelatedPersonReferenceNodeModule_ProvideReferenceUiNodeFactory.create(
                  builder.relatedPersonReferenceNodeModule));

      this.nodeReferenceChangeRuleProvider =
          NodeReferenceChangeRule_Factory.create(
              nodeReferenceChangeRuleMembersInjector, provideReferenceUiNodeProvider);

      this.relatedPersonReferenceNodeRuleProviderMembersInjector =
          RelatedPersonReferenceNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              nodeReferenceChangeRuleProvider);

      this.relatedPersonReferenceNodeRuleProvider =
          DoubleCheck.provider(
              RelatedPersonReferenceNodeRuleProvider_Factory.create(
                  relatedPersonReferenceNodeRuleProviderMembersInjector));
    }

    @Override
    public RelatedPersonReferenceNodeRuleProvider getRelatedPersonReferenceNodeRuleProvider() {
      return relatedPersonReferenceNodeRuleProvider.get();
    }
  }

  private final class SelectRelatedPersonFlagNodeComponentBuilder
      implements SelectRelatedPersonFlagNodeComponent.Builder {
    private SelectRelatedPersonFlagNodeModule selectRelatedPersonFlagNodeModule;

    @Override
    public SelectRelatedPersonFlagNodeComponent build() {
      if (selectRelatedPersonFlagNodeModule == null) {
        throw new IllegalStateException(
            SelectRelatedPersonFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SelectRelatedPersonFlagNodeComponentImpl(this);
    }

    @Override
    public SelectRelatedPersonFlagNodeComponentBuilder setSelectRelatedPersonFlagNodeModule(
        SelectRelatedPersonFlagNodeModule module) {
      this.selectRelatedPersonFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SelectRelatedPersonFlagNodeComponentImpl
      implements SelectRelatedPersonFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<SelectRelatedPersonFlagNodeRuleProvider>
        selectRelatedPersonFlagNodeRuleProviderMembersInjector;

    private Provider<SelectRelatedPersonFlagNodeRuleProvider>
        selectRelatedPersonFlagNodeRuleProvider;

    private SelectRelatedPersonFlagNodeComponentImpl(
        SelectRelatedPersonFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SelectRelatedPersonFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SelectRelatedPersonFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.selectRelatedPersonFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SelectRelatedPersonFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.selectRelatedPersonFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              SelectRelatedPersonFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.selectRelatedPersonFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.selectRelatedPersonFlagNodeRuleProviderMembersInjector =
          SelectRelatedPersonFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.selectRelatedPersonFlagNodeRuleProvider =
          DoubleCheck.provider(
              SelectRelatedPersonFlagNodeRuleProvider_Factory.create(
                  selectRelatedPersonFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public SelectRelatedPersonFlagNodeRuleProvider getSelectRelatedPersonFlagNodeRuleProvider() {
      return selectRelatedPersonFlagNodeRuleProvider.get();
    }
  }

  private final class SelectRelatedPersonNodeComponentBuilder
      implements SelectRelatedPersonNodeComponent.Builder {
    private SelectRelatedPersonNodeModule selectRelatedPersonNodeModule;

    @Override
    public SelectRelatedPersonNodeComponent build() {
      if (selectRelatedPersonNodeModule == null) {
        throw new IllegalStateException(
            SelectRelatedPersonNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SelectRelatedPersonNodeComponentImpl(this);
    }

    @Override
    public SelectRelatedPersonNodeComponentBuilder setSelectRelatedPersonNodeModule(
        SelectRelatedPersonNodeModule module) {
      this.selectRelatedPersonNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SelectRelatedPersonNodeComponentImpl
      implements SelectRelatedPersonNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<SelectRelatedPersonNodeRuleProvider>
        selectRelatedPersonNodeRuleProviderMembersInjector;

    private Provider<SelectRelatedPersonNodeRuleProvider> selectRelatedPersonNodeRuleProvider;

    private SelectRelatedPersonNodeComponentImpl(SelectRelatedPersonNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SelectRelatedPersonNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SelectRelatedPersonNodeModule_ProvideUiNodeFactory.create(
                  builder.selectRelatedPersonNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              SelectRelatedPersonNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.selectRelatedPersonNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.selectRelatedPersonNodeRuleProviderMembersInjector =
          SelectRelatedPersonNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.selectRelatedPersonNodeRuleProvider =
          DoubleCheck.provider(
              SelectRelatedPersonNodeRuleProvider_Factory.create(
                  selectRelatedPersonNodeRuleProviderMembersInjector));
    }

    @Override
    public SelectRelatedPersonNodeRuleProvider getSelectRelatedPersonNodeRuleProvider() {
      return selectRelatedPersonNodeRuleProvider.get();
    }
  }

  private final class CompanySelectBeneficialOwnerNodeComponentBuilder
      implements CompanySelectBeneficialOwnerNodeComponent.Builder {
    private CompanySelectBeneficialOwnerNodeModule companySelectBeneficialOwnerNodeModule;

    @Override
    public CompanySelectBeneficialOwnerNodeComponent build() {
      if (companySelectBeneficialOwnerNodeModule == null) {
        throw new IllegalStateException(
            CompanySelectBeneficialOwnerNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanySelectBeneficialOwnerNodeComponentImpl(this);
    }

    @Override
    public CompanySelectBeneficialOwnerNodeComponentBuilder
        setCompanySelectBeneficialOwnerNodeModule(CompanySelectBeneficialOwnerNodeModule module) {
      this.companySelectBeneficialOwnerNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanySelectBeneficialOwnerNodeComponentImpl
      implements CompanySelectBeneficialOwnerNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<CompanySelectBeneficialOwnerNodeRuleProvider>
        companySelectBeneficialOwnerNodeRuleProviderMembersInjector;

    private Provider<CompanySelectBeneficialOwnerNodeRuleProvider>
        companySelectBeneficialOwnerNodeRuleProvider;

    private CompanySelectBeneficialOwnerNodeComponentImpl(
        CompanySelectBeneficialOwnerNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanySelectBeneficialOwnerNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanySelectBeneficialOwnerNodeModule_ProvideUiNodeFactory.create(
                  builder.companySelectBeneficialOwnerNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.companySelectBeneficialOwnerNodeRuleProviderMembersInjector =
          CompanySelectBeneficialOwnerNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.companySelectBeneficialOwnerNodeRuleProvider =
          DoubleCheck.provider(
              CompanySelectBeneficialOwnerNodeRuleProvider_Factory.create(
                  companySelectBeneficialOwnerNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanySelectBeneficialOwnerNodeRuleProvider
        getCompanySelectBeneficialOwnerNodeRuleProvider() {
      return companySelectBeneficialOwnerNodeRuleProvider.get();
    }
  }

  private final class CompanyAbnNodeComponentBuilder implements CompanyAbnNodeComponent.Builder {
    private CompanyAbnNodeModule companyAbnNodeModule;

    @Override
    public CompanyAbnNodeComponent build() {
      if (companyAbnNodeModule == null) {
        throw new IllegalStateException(
            CompanyAbnNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyAbnNodeComponentImpl(this);
    }

    @Override
    public CompanyAbnNodeComponentBuilder setCompanyAbnNodeModule(CompanyAbnNodeModule module) {
      this.companyAbnNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyAbnNodeComponentImpl implements CompanyAbnNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyAbnNodeRuleProvider> companyAbnNodeRuleProviderMembersInjector;

    private Provider<CompanyAbnNodeRuleProvider> companyAbnNodeRuleProvider;

    private CompanyAbnNodeComponentImpl(CompanyAbnNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyAbnNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyAbnNodeModule_ProvideUiNodeFactory.create(builder.companyAbnNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyAbnNodeModule_ProvideLeafUiNodeFactory.create(builder.companyAbnNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyAbnNodeModule_ProvideStringUiNodeFactory.create(builder.companyAbnNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyAbnNodeRuleProviderMembersInjector =
          CompanyAbnNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyAbnNodeRuleProvider =
          DoubleCheck.provider(
              CompanyAbnNodeRuleProvider_Factory.create(companyAbnNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyAbnNodeRuleProvider getCompanyAbnNodeRuleProvider() {
      return companyAbnNodeRuleProvider.get();
    }
  }

  private final class CompanyTypeNodeComponentBuilder implements CompanyTypeNodeComponent.Builder {
    private CompanyTypeNodeModule companyTypeNodeModule;

    @Override
    public CompanyTypeNodeComponent build() {
      if (companyTypeNodeModule == null) {
        throw new IllegalStateException(
            CompanyTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyTypeNodeComponentImpl(this);
    }

    @Override
    public CompanyTypeNodeComponentBuilder setCompanyTypeNodeModule(CompanyTypeNodeModule module) {
      this.companyTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyTypeNodeComponentImpl implements CompanyTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyTypeNodeRuleProvider> companyTypeNodeRuleProviderMembersInjector;

    private Provider<CompanyTypeNodeRuleProvider> companyTypeNodeRuleProvider;

    private CompanyTypeNodeComponentImpl(CompanyTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyTypeNodeModule_ProvideUiNodeFactory.create(builder.companyTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyTypeNodeModule_ProvideLeafUiNodeFactory.create(builder.companyTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyTypeNodeRuleProviderMembersInjector =
          CompanyTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyTypeNodeRuleProvider =
          DoubleCheck.provider(
              CompanyTypeNodeRuleProvider_Factory.create(
                  companyTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyTypeNodeRuleProvider getCompanyTypeNodeRuleProvider() {
      return companyTypeNodeRuleProvider.get();
    }
  }

  private final class CompanyRegistrationStateNodeComponentBuilder
      implements CompanyRegistrationStateNodeComponent.Builder {
    private CompanyRegistrationStateNodeModule companyRegistrationStateNodeModule;

    @Override
    public CompanyRegistrationStateNodeComponent build() {
      if (companyRegistrationStateNodeModule == null) {
        throw new IllegalStateException(
            CompanyRegistrationStateNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyRegistrationStateNodeComponentImpl(this);
    }

    @Override
    public CompanyRegistrationStateNodeComponentBuilder setCompanyRegistrationStateNodeModule(
        CompanyRegistrationStateNodeModule module) {
      this.companyRegistrationStateNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyRegistrationStateNodeComponentImpl
      implements CompanyRegistrationStateNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyRegistrationStateNodeRuleProvider>
        companyRegistrationStateNodeRuleProviderMembersInjector;

    private Provider<CompanyRegistrationStateNodeRuleProvider>
        companyRegistrationStateNodeRuleProvider;

    private CompanyRegistrationStateNodeComponentImpl(
        CompanyRegistrationStateNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyRegistrationStateNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegistrationStateNodeModule_ProvideUiNodeFactory.create(
                  builder.companyRegistrationStateNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegistrationStateNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyRegistrationStateNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegistrationStateNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyRegistrationStateNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyRegistrationStateNodeRuleProviderMembersInjector =
          CompanyRegistrationStateNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyRegistrationStateNodeRuleProvider =
          DoubleCheck.provider(
              CompanyRegistrationStateNodeRuleProvider_Factory.create(
                  companyRegistrationStateNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyRegistrationStateNodeRuleProvider getCompanyRegistrationStateNodeRuleProvider() {
      return companyRegistrationStateNodeRuleProvider.get();
    }
  }

  private final class CompanyAbrnNodeComponentBuilder implements CompanyAbrnNodeComponent.Builder {
    private CompanyAbrnNodeModule companyAbrnNodeModule;

    @Override
    public CompanyAbrnNodeComponent build() {
      if (companyAbrnNodeModule == null) {
        throw new IllegalStateException(
            CompanyAbrnNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyAbrnNodeComponentImpl(this);
    }

    @Override
    public CompanyAbrnNodeComponentBuilder setCompanyAbrnNodeModule(CompanyAbrnNodeModule module) {
      this.companyAbrnNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyAbrnNodeComponentImpl implements CompanyAbrnNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyAbrnNodeRuleProvider> companyAbrnNodeRuleProviderMembersInjector;

    private Provider<CompanyAbrnNodeRuleProvider> companyAbrnNodeRuleProvider;

    private CompanyAbrnNodeComponentImpl(CompanyAbrnNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyAbrnNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyAbrnNodeModule_ProvideUiNodeFactory.create(builder.companyAbrnNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyAbrnNodeModule_ProvideLeafUiNodeFactory.create(builder.companyAbrnNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyAbrnNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyAbrnNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyAbrnNodeRuleProviderMembersInjector =
          CompanyAbrnNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyAbrnNodeRuleProvider =
          DoubleCheck.provider(
              CompanyAbrnNodeRuleProvider_Factory.create(
                  companyAbrnNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyAbrnNodeRuleProvider getCompanyAbrnNodeRuleProvider() {
      return companyAbrnNodeRuleProvider.get();
    }
  }

  private final class CompanyDescriptionNodeComponentBuilder
      implements CompanyDescriptionNodeComponent.Builder {
    private CompanyDescriptionNodeModule companyDescriptionNodeModule;

    @Override
    public CompanyDescriptionNodeComponent build() {
      if (companyDescriptionNodeModule == null) {
        throw new IllegalStateException(
            CompanyDescriptionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyDescriptionNodeComponentImpl(this);
    }

    @Override
    public CompanyDescriptionNodeComponentBuilder setCompanyDescriptionNodeModule(
        CompanyDescriptionNodeModule module) {
      this.companyDescriptionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyDescriptionNodeComponentImpl
      implements CompanyDescriptionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyDescriptionNodeRuleProvider>
        companyDescriptionNodeRuleProviderMembersInjector;

    private Provider<CompanyDescriptionNodeRuleProvider> companyDescriptionNodeRuleProvider;

    private CompanyDescriptionNodeComponentImpl(CompanyDescriptionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyDescriptionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyDescriptionNodeModule_ProvideUiNodeFactory.create(
                  builder.companyDescriptionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyDescriptionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyDescriptionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyDescriptionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyDescriptionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyDescriptionNodeRuleProviderMembersInjector =
          CompanyDescriptionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyDescriptionNodeRuleProvider =
          DoubleCheck.provider(
              CompanyDescriptionNodeRuleProvider_Factory.create(
                  companyDescriptionNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyDescriptionNodeRuleProvider getCompanyDescriptionNodeRuleProvider() {
      return companyDescriptionNodeRuleProvider.get();
    }
  }

  private final class CompanyApplicationTypeNodeComponentBuilder
      implements CompanyApplicationTypeNodeComponent.Builder {
    private CompanyApplicationTypeNodeModule companyApplicationTypeNodeModule;

    @Override
    public CompanyApplicationTypeNodeComponent build() {
      if (companyApplicationTypeNodeModule == null) {
        throw new IllegalStateException(
            CompanyApplicationTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyApplicationTypeNodeComponentImpl(this);
    }

    @Override
    public CompanyApplicationTypeNodeComponentBuilder setCompanyApplicationTypeNodeModule(
        CompanyApplicationTypeNodeModule module) {
      this.companyApplicationTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyApplicationTypeNodeComponentImpl
      implements CompanyApplicationTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyApplicationTypeNodeRuleProvider>
        companyApplicationTypeNodeRuleProviderMembersInjector;

    private Provider<CompanyApplicationTypeNodeRuleProvider> companyApplicationTypeNodeRuleProvider;

    private CompanyApplicationTypeNodeComponentImpl(
        CompanyApplicationTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyApplicationTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyApplicationTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.companyApplicationTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyApplicationTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyApplicationTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyApplicationTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyApplicationTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyApplicationTypeNodeRuleProviderMembersInjector =
          CompanyApplicationTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyApplicationTypeNodeRuleProvider =
          DoubleCheck.provider(
              CompanyApplicationTypeNodeRuleProvider_Factory.create(
                  companyApplicationTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyApplicationTypeNodeRuleProvider getCompanyApplicationTypeNodeRuleProvider() {
      return companyApplicationTypeNodeRuleProvider.get();
    }
  }

  private final class CompanyIndustryNodeComponentBuilder
      implements CompanyIndustryNodeComponent.Builder {
    private CompanyIndustryNodeModule companyIndustryNodeModule;

    @Override
    public CompanyIndustryNodeComponent build() {
      if (companyIndustryNodeModule == null) {
        throw new IllegalStateException(
            CompanyIndustryNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyIndustryNodeComponentImpl(this);
    }

    @Override
    public CompanyIndustryNodeComponentBuilder setCompanyIndustryNodeModule(
        CompanyIndustryNodeModule module) {
      this.companyIndustryNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyIndustryNodeComponentImpl implements CompanyIndustryNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyIndustryNodeRuleProvider>
        companyIndustryNodeRuleProviderMembersInjector;

    private Provider<CompanyIndustryNodeRuleProvider> companyIndustryNodeRuleProvider;

    private CompanyIndustryNodeComponentImpl(CompanyIndustryNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyIndustryNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyIndustryNodeModule_ProvideUiNodeFactory.create(
                  builder.companyIndustryNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyIndustryNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyIndustryNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyIndustryNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyIndustryNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyIndustryNodeRuleProviderMembersInjector =
          CompanyIndustryNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyIndustryNodeRuleProvider =
          DoubleCheck.provider(
              CompanyIndustryNodeRuleProvider_Factory.create(
                  companyIndustryNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyIndustryNodeRuleProvider getCompanyIndustryNodeRuleProvider() {
      return companyIndustryNodeRuleProvider.get();
    }
  }

  private final class CompanySelectDirectorNodeComponentBuilder
      implements CompanySelectDirectorNodeComponent.Builder {
    private CompanySelectDirectorNodeModule companySelectDirectorNodeModule;

    @Override
    public CompanySelectDirectorNodeComponent build() {
      if (companySelectDirectorNodeModule == null) {
        throw new IllegalStateException(
            CompanySelectDirectorNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanySelectDirectorNodeComponentImpl(this);
    }

    @Override
    public CompanySelectDirectorNodeComponentBuilder setCompanySelectDirectorNodeModule(
        CompanySelectDirectorNodeModule module) {
      this.companySelectDirectorNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanySelectDirectorNodeComponentImpl
      implements CompanySelectDirectorNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<CompanySelectDirectorNodeRuleProvider>
        companySelectDirectorNodeRuleProviderMembersInjector;

    private Provider<CompanySelectDirectorNodeRuleProvider> companySelectDirectorNodeRuleProvider;

    private CompanySelectDirectorNodeComponentImpl(
        CompanySelectDirectorNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanySelectDirectorNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanySelectDirectorNodeModule_ProvideUiNodeFactory.create(
                  builder.companySelectDirectorNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.companySelectDirectorNodeRuleProviderMembersInjector =
          CompanySelectDirectorNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.companySelectDirectorNodeRuleProvider =
          DoubleCheck.provider(
              CompanySelectDirectorNodeRuleProvider_Factory.create(
                  companySelectDirectorNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanySelectDirectorNodeRuleProvider getCompanySelectDirectorNodeRuleProvider() {
      return companySelectDirectorNodeRuleProvider.get();
    }
  }

  private final class CompanyApplicantTypeNodeComponentBuilder
      implements CompanyApplicantTypeNodeComponent.Builder {
    private CompanyApplicantTypeNodeModule companyApplicantTypeNodeModule;

    @Override
    public CompanyApplicantTypeNodeComponent build() {
      if (companyApplicantTypeNodeModule == null) {
        throw new IllegalStateException(
            CompanyApplicantTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyApplicantTypeNodeComponentImpl(this);
    }

    @Override
    public CompanyApplicantTypeNodeComponentBuilder setCompanyApplicantTypeNodeModule(
        CompanyApplicantTypeNodeModule module) {
      this.companyApplicantTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyApplicantTypeNodeComponentImpl
      implements CompanyApplicantTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyApplicantTypeNodeRuleProvider>
        companyApplicantTypeNodeRuleProviderMembersInjector;

    private Provider<CompanyApplicantTypeNodeRuleProvider> companyApplicantTypeNodeRuleProvider;

    private CompanyApplicantTypeNodeComponentImpl(
        CompanyApplicantTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyApplicantTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyApplicantTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.companyApplicantTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyApplicantTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyApplicantTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyApplicantTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyApplicantTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyApplicantTypeNodeRuleProviderMembersInjector =
          CompanyApplicantTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyApplicantTypeNodeRuleProvider =
          DoubleCheck.provider(
              CompanyApplicantTypeNodeRuleProvider_Factory.create(
                  companyApplicantTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyApplicantTypeNodeRuleProvider getCompanyApplicantTypeNodeRuleProvider() {
      return companyApplicantTypeNodeRuleProvider.get();
    }
  }

  private final class CompanyRegisteredNameNodeComponentBuilder
      implements CompanyRegisteredNameNodeComponent.Builder {
    private CompanyRegisteredNameNodeModule companyRegisteredNameNodeModule;

    @Override
    public CompanyRegisteredNameNodeComponent build() {
      if (companyRegisteredNameNodeModule == null) {
        throw new IllegalStateException(
            CompanyRegisteredNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyRegisteredNameNodeComponentImpl(this);
    }

    @Override
    public CompanyRegisteredNameNodeComponentBuilder setCompanyRegisteredNameNodeModule(
        CompanyRegisteredNameNodeModule module) {
      this.companyRegisteredNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyRegisteredNameNodeComponentImpl
      implements CompanyRegisteredNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyRegisteredNameNodeRuleProvider>
        companyRegisteredNameNodeRuleProviderMembersInjector;

    private Provider<CompanyRegisteredNameNodeRuleProvider> companyRegisteredNameNodeRuleProvider;

    private CompanyRegisteredNameNodeComponentImpl(
        CompanyRegisteredNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyRegisteredNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegisteredNameNodeModule_ProvideUiNodeFactory.create(
                  builder.companyRegisteredNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegisteredNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyRegisteredNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyRegisteredNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.companyRegisteredNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyRegisteredNameNodeRuleProviderMembersInjector =
          CompanyRegisteredNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyRegisteredNameNodeRuleProvider =
          DoubleCheck.provider(
              CompanyRegisteredNameNodeRuleProvider_Factory.create(
                  companyRegisteredNameNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyRegisteredNameNodeRuleProvider getCompanyRegisteredNameNodeRuleProvider() {
      return companyRegisteredNameNodeRuleProvider.get();
    }
  }

  private final class CompanyPrimaryApplicantFlagNodeComponentBuilder
      implements CompanyPrimaryApplicantFlagNodeComponent.Builder {
    private CompanyPrimaryApplicantFlagNodeModule companyPrimaryApplicantFlagNodeModule;

    @Override
    public CompanyPrimaryApplicantFlagNodeComponent build() {
      if (companyPrimaryApplicantFlagNodeModule == null) {
        throw new IllegalStateException(
            CompanyPrimaryApplicantFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyPrimaryApplicantFlagNodeComponentImpl(this);
    }

    @Override
    public CompanyPrimaryApplicantFlagNodeComponentBuilder setCompanyPrimaryApplicantFlagNodeModule(
        CompanyPrimaryApplicantFlagNodeModule module) {
      this.companyPrimaryApplicantFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyPrimaryApplicantFlagNodeComponentImpl
      implements CompanyPrimaryApplicantFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<CompanyPrimaryApplicantFlagNodeRuleProvider>
        companyPrimaryApplicantFlagNodeRuleProviderMembersInjector;

    private Provider<CompanyPrimaryApplicantFlagNodeRuleProvider>
        companyPrimaryApplicantFlagNodeRuleProvider;

    private CompanyPrimaryApplicantFlagNodeComponentImpl(
        CompanyPrimaryApplicantFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyPrimaryApplicantFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyPrimaryApplicantFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.companyPrimaryApplicantFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyPrimaryApplicantFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.companyPrimaryApplicantFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              CompanyPrimaryApplicantFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.companyPrimaryApplicantFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.companyPrimaryApplicantFlagNodeRuleProviderMembersInjector =
          CompanyPrimaryApplicantFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.companyPrimaryApplicantFlagNodeRuleProvider =
          DoubleCheck.provider(
              CompanyPrimaryApplicantFlagNodeRuleProvider_Factory.create(
                  companyPrimaryApplicantFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyPrimaryApplicantFlagNodeRuleProvider
        getCompanyPrimaryApplicantFlagNodeRuleProvider() {
      return companyPrimaryApplicantFlagNodeRuleProvider.get();
    }
  }

  private final class CompanyAcnNodeComponentBuilder implements CompanyAcnNodeComponent.Builder {
    private CompanyAcnNodeModule companyAcnNodeModule;

    @Override
    public CompanyAcnNodeComponent build() {
      if (companyAcnNodeModule == null) {
        throw new IllegalStateException(
            CompanyAcnNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyAcnNodeComponentImpl(this);
    }

    @Override
    public CompanyAcnNodeComponentBuilder setCompanyAcnNodeModule(CompanyAcnNodeModule module) {
      this.companyAcnNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyAcnNodeComponentImpl implements CompanyAcnNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<CompanyAcnNodeRuleProvider> companyAcnNodeRuleProviderMembersInjector;

    private Provider<CompanyAcnNodeRuleProvider> companyAcnNodeRuleProvider;

    private CompanyAcnNodeComponentImpl(CompanyAcnNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyAcnNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyAcnNodeModule_ProvideUiNodeFactory.create(builder.companyAcnNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              CompanyAcnNodeModule_ProvideLeafUiNodeFactory.create(builder.companyAcnNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              CompanyAcnNodeModule_ProvideStringUiNodeFactory.create(builder.companyAcnNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.companyAcnNodeRuleProviderMembersInjector =
          CompanyAcnNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.companyAcnNodeRuleProvider =
          DoubleCheck.provider(
              CompanyAcnNodeRuleProvider_Factory.create(companyAcnNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyAcnNodeRuleProvider getCompanyAcnNodeRuleProvider() {
      return companyAcnNodeRuleProvider.get();
    }
  }

  private final class CompanyGeneralNodeComponentBuilder
      implements CompanyGeneralNodeComponent.Builder {
    private CompanyGeneralNodeModule companyGeneralNodeModule;

    @Override
    public CompanyGeneralNodeComponent build() {
      if (companyGeneralNodeModule == null) {
        throw new IllegalStateException(
            CompanyGeneralNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyGeneralNodeComponentImpl(this);
    }

    @Override
    public CompanyGeneralNodeComponentBuilder setCompanyGeneralNodeModule(
        CompanyGeneralNodeModule module) {
      this.companyGeneralNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyGeneralNodeComponentImpl implements CompanyGeneralNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<CompanyGeneralNodeRuleProvider>
        companyGeneralNodeRuleProviderMembersInjector;

    private Provider<CompanyGeneralNodeRuleProvider> companyGeneralNodeRuleProvider;

    private CompanyGeneralNodeComponentImpl(CompanyGeneralNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyGeneralNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyGeneralNodeModule_ProvideUiNodeFactory.create(
                  builder.companyGeneralNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              CompanyGeneralNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.companyGeneralNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.companyGeneralNodeRuleProviderMembersInjector =
          CompanyGeneralNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.companyGeneralNodeRuleProvider =
          DoubleCheck.provider(
              CompanyGeneralNodeRuleProvider_Factory.create(
                  companyGeneralNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyGeneralNodeRuleProvider getCompanyGeneralNodeRuleProvider() {
      return companyGeneralNodeRuleProvider.get();
    }
  }

  private final class CompanyTrustNodeComponentBuilder
      implements CompanyTrustNodeComponent.Builder {
    private CompanyTrustNodeModule companyTrustNodeModule;

    @Override
    public CompanyTrustNodeComponent build() {
      if (companyTrustNodeModule == null) {
        throw new IllegalStateException(
            CompanyTrustNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyTrustNodeComponentImpl(this);
    }

    @Override
    public CompanyTrustNodeComponentBuilder setCompanyTrustNodeModule(
        CompanyTrustNodeModule module) {
      this.companyTrustNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyTrustNodeComponentImpl implements CompanyTrustNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<CompanyTrustNodeRuleProvider>
        companyTrustNodeRuleProviderMembersInjector;

    private Provider<CompanyTrustNodeRuleProvider> companyTrustNodeRuleProvider;

    private CompanyTrustNodeComponentImpl(CompanyTrustNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyTrustNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyTrustNodeModule_ProvideUiNodeFactory.create(builder.companyTrustNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              CompanyTrustNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.companyTrustNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.companyTrustNodeRuleProviderMembersInjector =
          CompanyTrustNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.companyTrustNodeRuleProvider =
          DoubleCheck.provider(
              CompanyTrustNodeRuleProvider_Factory.create(
                  companyTrustNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyTrustNodeRuleProvider getCompanyTrustNodeRuleProvider() {
      return companyTrustNodeRuleProvider.get();
    }
  }

  private final class CompanyNodeComponentBuilder implements CompanyNodeComponent.Builder {
    private CompanyNodeModule companyNodeModule;

    @Override
    public CompanyNodeComponent build() {
      if (companyNodeModule == null) {
        throw new IllegalStateException(
            CompanyNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyNodeComponentImpl(this);
    }

    @Override
    public CompanyNodeComponentBuilder setCompanyNodeModule(CompanyNodeModule module) {
      this.companyNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyNodeComponentImpl implements CompanyNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<CompanyNodeRuleProvider> companyNodeRuleProviderMembersInjector;

    private Provider<CompanyNodeRuleProvider> companyNodeRuleProvider;

    private CompanyNodeComponentImpl(CompanyNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyNodeModule_ProvideUiNodeFactory.create(builder.companyNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              CompanyNodeModule_ProvideObjectUiNodeFactory.create(builder.companyNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.companyNodeRuleProviderMembersInjector =
          CompanyNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.companyNodeRuleProvider =
          DoubleCheck.provider(
              CompanyNodeRuleProvider_Factory.create(companyNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyNodeRuleProvider getCompanyNodeRuleProvider() {
      return companyNodeRuleProvider.get();
    }
  }

  private final class CompanyListNodeComponentBuilder implements CompanyListNodeComponent.Builder {
    private CompanyListNodeModule companyListNodeModule;

    @Override
    public CompanyListNodeComponent build() {
      if (companyListNodeModule == null) {
        throw new IllegalStateException(
            CompanyListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new CompanyListNodeComponentImpl(this);
    }

    @Override
    public CompanyListNodeComponentBuilder setCompanyListNodeModule(CompanyListNodeModule module) {
      this.companyListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class CompanyListNodeComponentImpl implements CompanyListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<CompanyListNodeRuleProvider> companyListNodeRuleProviderMembersInjector;

    private Provider<CompanyListNodeRuleProvider> companyListNodeRuleProvider;

    private CompanyListNodeComponentImpl(CompanyListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CompanyListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              CompanyListNodeModule_ProvideUiNodeFactory.create(builder.companyListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.companyListNodeRuleProviderMembersInjector =
          CompanyListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.companyListNodeRuleProvider =
          DoubleCheck.provider(
              CompanyListNodeRuleProvider_Factory.create(
                  companyListNodeRuleProviderMembersInjector));
    }

    @Override
    public CompanyListNodeRuleProvider getCompanyListNodeRuleProvider() {
      return companyListNodeRuleProvider.get();
    }
  }

  private final class SettlementDateNodeComponentBuilder
      implements SettlementDateNodeComponent.Builder {
    private SettlementDateNodeModule settlementDateNodeModule;

    @Override
    public SettlementDateNodeComponent build() {
      if (settlementDateNodeModule == null) {
        throw new IllegalStateException(
            SettlementDateNodeModule.class.getCanonicalName() + " must be set");
      }
      return new SettlementDateNodeComponentImpl(this);
    }

    @Override
    public SettlementDateNodeComponentBuilder setSettlementDateNodeModule(
        SettlementDateNodeModule module) {
      this.settlementDateNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SettlementDateNodeComponentImpl implements SettlementDateNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<SettlementDateNodeRuleProvider>
        settlementDateNodeRuleProviderMembersInjector;

    private Provider<SettlementDateNodeRuleProvider> settlementDateNodeRuleProvider;

    private SettlementDateNodeComponentImpl(SettlementDateNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SettlementDateNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              SettlementDateNodeModule_ProvideUiNodeFactory.create(
                  builder.settlementDateNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              SettlementDateNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.settlementDateNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              SettlementDateNodeModule_ProvideStringUiNodeFactory.create(
                  builder.settlementDateNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.settlementDateNodeRuleProviderMembersInjector =
          SettlementDateNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.settlementDateNodeRuleProvider =
          DoubleCheck.provider(
              SettlementDateNodeRuleProvider_Factory.create(
                  settlementDateNodeRuleProviderMembersInjector));
    }

    @Override
    public SettlementDateNodeRuleProvider getSettlementDateNodeRuleProvider() {
      return settlementDateNodeRuleProvider.get();
    }
  }

  private final class ProductTotalSecurityAmountNodeComponentBuilder
      implements ProductTotalSecurityAmountNodeComponent.Builder {
    private ProductTotalSecurityAmountNodeModule productTotalSecurityAmountNodeModule;

    @Override
    public ProductTotalSecurityAmountNodeComponent build() {
      if (productTotalSecurityAmountNodeModule == null) {
        throw new IllegalStateException(
            ProductTotalSecurityAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductTotalSecurityAmountNodeComponentImpl(this);
    }

    @Override
    public ProductTotalSecurityAmountNodeComponentBuilder setProductTotalSecurityAmountNodeModule(
        ProductTotalSecurityAmountNodeModule module) {
      this.productTotalSecurityAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductTotalSecurityAmountNodeComponentImpl
      implements ProductTotalSecurityAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductTotalSecurityAmountNodeRuleProvider>
        productTotalSecurityAmountNodeRuleProviderMembersInjector;

    private Provider<ProductTotalSecurityAmountNodeRuleProvider>
        productTotalSecurityAmountNodeRuleProvider;

    private ProductTotalSecurityAmountNodeComponentImpl(
        ProductTotalSecurityAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductTotalSecurityAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalSecurityAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.productTotalSecurityAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalSecurityAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productTotalSecurityAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalSecurityAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productTotalSecurityAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productTotalSecurityAmountNodeRuleProviderMembersInjector =
          ProductTotalSecurityAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productTotalSecurityAmountNodeRuleProvider =
          DoubleCheck.provider(
              ProductTotalSecurityAmountNodeRuleProvider_Factory.create(
                  productTotalSecurityAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductTotalSecurityAmountNodeRuleProvider
        getProductTotalSecurityAmountNodeRuleProvider() {
      return productTotalSecurityAmountNodeRuleProvider.get();
    }
  }

  private final class ProductLoanTypeNodeComponentBuilder
      implements ProductLoanTypeNodeComponent.Builder {
    private ProductLoanTypeNodeModule productLoanTypeNodeModule;

    @Override
    public ProductLoanTypeNodeComponent build() {
      if (productLoanTypeNodeModule == null) {
        throw new IllegalStateException(
            ProductLoanTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductLoanTypeNodeComponentImpl(this);
    }

    @Override
    public ProductLoanTypeNodeComponentBuilder setProductLoanTypeNodeModule(
        ProductLoanTypeNodeModule module) {
      this.productLoanTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductLoanTypeNodeComponentImpl implements ProductLoanTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductLoanTypeNodeRuleProvider>
        productLoanTypeNodeRuleProviderMembersInjector;

    private Provider<ProductLoanTypeNodeRuleProvider> productLoanTypeNodeRuleProvider;

    private ProductLoanTypeNodeComponentImpl(ProductLoanTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductLoanTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductLoanTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.productLoanTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductLoanTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productLoanTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductLoanTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productLoanTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productLoanTypeNodeRuleProviderMembersInjector =
          ProductLoanTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productLoanTypeNodeRuleProvider =
          DoubleCheck.provider(
              ProductLoanTypeNodeRuleProvider_Factory.create(
                  productLoanTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductLoanTypeNodeRuleProvider getProductLoanTypeNodeRuleProvider() {
      return productLoanTypeNodeRuleProvider.get();
    }
  }

  private final class ProductTotalLoanAmountNodeComponentBuilder
      implements ProductTotalLoanAmountNodeComponent.Builder {
    private ProductTotalLoanAmountNodeModule productTotalLoanAmountNodeModule;

    @Override
    public ProductTotalLoanAmountNodeComponent build() {
      if (productTotalLoanAmountNodeModule == null) {
        throw new IllegalStateException(
            ProductTotalLoanAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductTotalLoanAmountNodeComponentImpl(this);
    }

    @Override
    public ProductTotalLoanAmountNodeComponentBuilder setProductTotalLoanAmountNodeModule(
        ProductTotalLoanAmountNodeModule module) {
      this.productTotalLoanAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductTotalLoanAmountNodeComponentImpl
      implements ProductTotalLoanAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductTotalLoanAmountNodeRuleProvider>
        productTotalLoanAmountNodeRuleProviderMembersInjector;

    private Provider<ProductTotalLoanAmountNodeRuleProvider> productTotalLoanAmountNodeRuleProvider;

    private ProductTotalLoanAmountNodeComponentImpl(
        ProductTotalLoanAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductTotalLoanAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.productTotalLoanAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productTotalLoanAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productTotalLoanAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productTotalLoanAmountNodeRuleProviderMembersInjector =
          ProductTotalLoanAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productTotalLoanAmountNodeRuleProvider =
          DoubleCheck.provider(
              ProductTotalLoanAmountNodeRuleProvider_Factory.create(
                  productTotalLoanAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductTotalLoanAmountNodeRuleProvider getProductTotalLoanAmountNodeRuleProvider() {
      return productTotalLoanAmountNodeRuleProvider.get();
    }
  }

  private final class ProductTotalLvrLmiNodeComponentBuilder
      implements ProductTotalLvrLmiNodeComponent.Builder {
    private ProductTotalLvrLmiNodeModule productTotalLvrLmiNodeModule;

    @Override
    public ProductTotalLvrLmiNodeComponent build() {
      if (productTotalLvrLmiNodeModule == null) {
        throw new IllegalStateException(
            ProductTotalLvrLmiNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductTotalLvrLmiNodeComponentImpl(this);
    }

    @Override
    public ProductTotalLvrLmiNodeComponentBuilder setProductTotalLvrLmiNodeModule(
        ProductTotalLvrLmiNodeModule module) {
      this.productTotalLvrLmiNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductTotalLvrLmiNodeComponentImpl
      implements ProductTotalLvrLmiNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductTotalLvrLmiNodeRuleProvider>
        productTotalLvrLmiNodeRuleProviderMembersInjector;

    private Provider<ProductTotalLvrLmiNodeRuleProvider> productTotalLvrLmiNodeRuleProvider;

    private ProductTotalLvrLmiNodeComponentImpl(ProductTotalLvrLmiNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductTotalLvrLmiNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLvrLmiNodeModule_ProvideUiNodeFactory.create(
                  builder.productTotalLvrLmiNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLvrLmiNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productTotalLvrLmiNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLvrLmiNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productTotalLvrLmiNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productTotalLvrLmiNodeRuleProviderMembersInjector =
          ProductTotalLvrLmiNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productTotalLvrLmiNodeRuleProvider =
          DoubleCheck.provider(
              ProductTotalLvrLmiNodeRuleProvider_Factory.create(
                  productTotalLvrLmiNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductTotalLvrLmiNodeRuleProvider getProductTotalLvrLmiNodeRuleProvider() {
      return productTotalLvrLmiNodeRuleProvider.get();
    }
  }

  private final class ProductCustomerContributionNodeComponentBuilder
      implements ProductCustomerContributionNodeComponent.Builder {
    private ProductCustomerContributionNodeModule productCustomerContributionNodeModule;

    @Override
    public ProductCustomerContributionNodeComponent build() {
      if (productCustomerContributionNodeModule == null) {
        throw new IllegalStateException(
            ProductCustomerContributionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductCustomerContributionNodeComponentImpl(this);
    }

    @Override
    public ProductCustomerContributionNodeComponentBuilder setProductCustomerContributionNodeModule(
        ProductCustomerContributionNodeModule module) {
      this.productCustomerContributionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductCustomerContributionNodeComponentImpl
      implements ProductCustomerContributionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ProductCustomerContributionNodeRuleProvider>
        productCustomerContributionNodeRuleProviderMembersInjector;

    private Provider<ProductCustomerContributionNodeRuleProvider>
        productCustomerContributionNodeRuleProvider;

    private ProductCustomerContributionNodeComponentImpl(
        ProductCustomerContributionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductCustomerContributionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductCustomerContributionNodeModule_ProvideUiNodeFactory.create(
                  builder.productCustomerContributionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ProductCustomerContributionNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.productCustomerContributionNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.productCustomerContributionNodeRuleProviderMembersInjector =
          ProductCustomerContributionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.productCustomerContributionNodeRuleProvider =
          DoubleCheck.provider(
              ProductCustomerContributionNodeRuleProvider_Factory.create(
                  productCustomerContributionNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductCustomerContributionNodeRuleProvider
        getProductCustomerContributionNodeRuleProvider() {
      return productCustomerContributionNodeRuleProvider.get();
    }
  }

  private final class ProductRequestedAmountNodeComponentBuilder
      implements ProductRequestedAmountNodeComponent.Builder {
    private ProductRequestedAmountNodeModule productRequestedAmountNodeModule;

    @Override
    public ProductRequestedAmountNodeComponent build() {
      if (productRequestedAmountNodeModule == null) {
        throw new IllegalStateException(
            ProductRequestedAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductRequestedAmountNodeComponentImpl(this);
    }

    @Override
    public ProductRequestedAmountNodeComponentBuilder setProductRequestedAmountNodeModule(
        ProductRequestedAmountNodeModule module) {
      this.productRequestedAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductRequestedAmountNodeComponentImpl
      implements ProductRequestedAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductRequestedAmountNodeRuleProvider>
        productRequestedAmountNodeRuleProviderMembersInjector;

    private Provider<ProductRequestedAmountNodeRuleProvider> productRequestedAmountNodeRuleProvider;

    private ProductRequestedAmountNodeComponentImpl(
        ProductRequestedAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductRequestedAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductRequestedAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.productRequestedAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductRequestedAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productRequestedAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductRequestedAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productRequestedAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productRequestedAmountNodeRuleProviderMembersInjector =
          ProductRequestedAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productRequestedAmountNodeRuleProvider =
          DoubleCheck.provider(
              ProductRequestedAmountNodeRuleProvider_Factory.create(
                  productRequestedAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductRequestedAmountNodeRuleProvider getProductRequestedAmountNodeRuleProvider() {
      return productRequestedAmountNodeRuleProvider.get();
    }
  }

  private final class ProductFixedTermNodeComponentBuilder
      implements ProductFixedTermNodeComponent.Builder {
    private ProductFixedTermNodeModule productFixedTermNodeModule;

    @Override
    public ProductFixedTermNodeComponent build() {
      if (productFixedTermNodeModule == null) {
        throw new IllegalStateException(
            ProductFixedTermNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductFixedTermNodeComponentImpl(this);
    }

    @Override
    public ProductFixedTermNodeComponentBuilder setProductFixedTermNodeModule(
        ProductFixedTermNodeModule module) {
      this.productFixedTermNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductFixedTermNodeComponentImpl implements ProductFixedTermNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductFixedTermNodeRuleProvider>
        productFixedTermNodeRuleProviderMembersInjector;

    private Provider<ProductFixedTermNodeRuleProvider> productFixedTermNodeRuleProvider;

    private ProductFixedTermNodeComponentImpl(ProductFixedTermNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductFixedTermNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductFixedTermNodeModule_ProvideUiNodeFactory.create(
                  builder.productFixedTermNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductFixedTermNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productFixedTermNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductFixedTermNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productFixedTermNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productFixedTermNodeRuleProviderMembersInjector =
          ProductFixedTermNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productFixedTermNodeRuleProvider =
          DoubleCheck.provider(
              ProductFixedTermNodeRuleProvider_Factory.create(
                  productFixedTermNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductFixedTermNodeRuleProvider getProductFixedTermNodeRuleProvider() {
      return productFixedTermNodeRuleProvider.get();
    }
  }

  private final class ProductGroupNodeComponentBuilder
      implements ProductGroupNodeComponent.Builder {
    private ProductGroupNodeModule productGroupNodeModule;

    @Override
    public ProductGroupNodeComponent build() {
      if (productGroupNodeModule == null) {
        throw new IllegalStateException(
            ProductGroupNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductGroupNodeComponentImpl(this);
    }

    @Override
    public ProductGroupNodeComponentBuilder setProductGroupNodeModule(
        ProductGroupNodeModule module) {
      this.productGroupNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductGroupNodeComponentImpl implements ProductGroupNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductGroupNodeRuleProvider>
        productGroupNodeRuleProviderMembersInjector;

    private Provider<ProductGroupNodeRuleProvider> productGroupNodeRuleProvider;

    private ProductGroupNodeComponentImpl(ProductGroupNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductGroupNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductGroupNodeModule_ProvideUiNodeFactory.create(builder.productGroupNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductGroupNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productGroupNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductGroupNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productGroupNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productGroupNodeRuleProviderMembersInjector =
          ProductGroupNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productGroupNodeRuleProvider =
          DoubleCheck.provider(
              ProductGroupNodeRuleProvider_Factory.create(
                  productGroupNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductGroupNodeRuleProvider getProductGroupNodeRuleProvider() {
      return productGroupNodeRuleProvider.get();
    }
  }

  private final class ProductPaymentTypeNodeComponentBuilder
      implements ProductPaymentTypeNodeComponent.Builder {
    private ProductPaymentTypeNodeModule productPaymentTypeNodeModule;

    @Override
    public ProductPaymentTypeNodeComponent build() {
      if (productPaymentTypeNodeModule == null) {
        throw new IllegalStateException(
            ProductPaymentTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductPaymentTypeNodeComponentImpl(this);
    }

    @Override
    public ProductPaymentTypeNodeComponentBuilder setProductPaymentTypeNodeModule(
        ProductPaymentTypeNodeModule module) {
      this.productPaymentTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductPaymentTypeNodeComponentImpl
      implements ProductPaymentTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductPaymentTypeNodeRuleProvider>
        productPaymentTypeNodeRuleProviderMembersInjector;

    private Provider<ProductPaymentTypeNodeRuleProvider> productPaymentTypeNodeRuleProvider;

    private ProductPaymentTypeNodeComponentImpl(ProductPaymentTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductPaymentTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductPaymentTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.productPaymentTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductPaymentTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productPaymentTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductPaymentTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productPaymentTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productPaymentTypeNodeRuleProviderMembersInjector =
          ProductPaymentTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productPaymentTypeNodeRuleProvider =
          DoubleCheck.provider(
              ProductPaymentTypeNodeRuleProvider_Factory.create(
                  productPaymentTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductPaymentTypeNodeRuleProvider getProductPaymentTypeNodeRuleProvider() {
      return productPaymentTypeNodeRuleProvider.get();
    }
  }

  private final class ProductLendingPurposeNodeComponentBuilder
      implements ProductLendingPurposeNodeComponent.Builder {
    private ProductLendingPurposeNodeModule productLendingPurposeNodeModule;

    @Override
    public ProductLendingPurposeNodeComponent build() {
      if (productLendingPurposeNodeModule == null) {
        throw new IllegalStateException(
            ProductLendingPurposeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductLendingPurposeNodeComponentImpl(this);
    }

    @Override
    public ProductLendingPurposeNodeComponentBuilder setProductLendingPurposeNodeModule(
        ProductLendingPurposeNodeModule module) {
      this.productLendingPurposeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductLendingPurposeNodeComponentImpl
      implements ProductLendingPurposeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductLendingPurposeNodeRuleProvider>
        productLendingPurposeNodeRuleProviderMembersInjector;

    private Provider<ProductLendingPurposeNodeRuleProvider> productLendingPurposeNodeRuleProvider;

    private ProductLendingPurposeNodeComponentImpl(
        ProductLendingPurposeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductLendingPurposeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductLendingPurposeNodeModule_ProvideUiNodeFactory.create(
                  builder.productLendingPurposeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductLendingPurposeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productLendingPurposeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductLendingPurposeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productLendingPurposeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productLendingPurposeNodeRuleProviderMembersInjector =
          ProductLendingPurposeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productLendingPurposeNodeRuleProvider =
          DoubleCheck.provider(
              ProductLendingPurposeNodeRuleProvider_Factory.create(
                  productLendingPurposeNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductLendingPurposeNodeRuleProvider getProductLendingPurposeNodeRuleProvider() {
      return productLendingPurposeNodeRuleProvider.get();
    }
  }

  private final class ProductConsolidationFlagNodeComponentBuilder
      implements ProductConsolidationFlagNodeComponent.Builder {
    private ProductConsolidationFlagNodeModule productConsolidationFlagNodeModule;

    @Override
    public ProductConsolidationFlagNodeComponent build() {
      if (productConsolidationFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductConsolidationFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductConsolidationFlagNodeComponentImpl(this);
    }

    @Override
    public ProductConsolidationFlagNodeComponentBuilder setProductConsolidationFlagNodeModule(
        ProductConsolidationFlagNodeModule module) {
      this.productConsolidationFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductConsolidationFlagNodeComponentImpl
      implements ProductConsolidationFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductConsolidationFlagNodeRuleProvider>
        productConsolidationFlagNodeRuleProviderMembersInjector;

    private Provider<ProductConsolidationFlagNodeRuleProvider>
        productConsolidationFlagNodeRuleProvider;

    private ProductConsolidationFlagNodeComponentImpl(
        ProductConsolidationFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductConsolidationFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductConsolidationFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productConsolidationFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductConsolidationFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productConsolidationFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductConsolidationFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productConsolidationFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productConsolidationFlagNodeRuleProviderMembersInjector =
          ProductConsolidationFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productConsolidationFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductConsolidationFlagNodeRuleProvider_Factory.create(
                  productConsolidationFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductConsolidationFlagNodeRuleProvider getProductConsolidationFlagNodeRuleProvider() {
      return productConsolidationFlagNodeRuleProvider.get();
    }
  }

  private final class ProductCostRecuctionFlagNodeComponentBuilder
      implements ProductCostRecuctionFlagNodeComponent.Builder {
    private ProductCostRecuctionFlagNodeModule productCostRecuctionFlagNodeModule;

    @Override
    public ProductCostRecuctionFlagNodeComponent build() {
      if (productCostRecuctionFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductCostRecuctionFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductCostRecuctionFlagNodeComponentImpl(this);
    }

    @Override
    public ProductCostRecuctionFlagNodeComponentBuilder setProductCostRecuctionFlagNodeModule(
        ProductCostRecuctionFlagNodeModule module) {
      this.productCostRecuctionFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductCostRecuctionFlagNodeComponentImpl
      implements ProductCostRecuctionFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductCostRecuctionFlagNodeRuleProvider>
        productCostRecuctionFlagNodeRuleProviderMembersInjector;

    private Provider<ProductCostRecuctionFlagNodeRuleProvider>
        productCostRecuctionFlagNodeRuleProvider;

    private ProductCostRecuctionFlagNodeComponentImpl(
        ProductCostRecuctionFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductCostRecuctionFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductCostRecuctionFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productCostRecuctionFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductCostRecuctionFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productCostRecuctionFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductCostRecuctionFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productCostRecuctionFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productCostRecuctionFlagNodeRuleProviderMembersInjector =
          ProductCostRecuctionFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productCostRecuctionFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductCostRecuctionFlagNodeRuleProvider_Factory.create(
                  productCostRecuctionFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductCostRecuctionFlagNodeRuleProvider getProductCostRecuctionFlagNodeRuleProvider() {
      return productCostRecuctionFlagNodeRuleProvider.get();
    }
  }

  private final class ProductAccountHolderListNodeComponentBuilder
      implements ProductAccountHolderListNodeComponent.Builder {
    private ProductAccountHolderListNodeModule productAccountHolderListNodeModule;

    @Override
    public ProductAccountHolderListNodeComponent build() {
      if (productAccountHolderListNodeModule == null) {
        throw new IllegalStateException(
            ProductAccountHolderListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductAccountHolderListNodeComponentImpl(this);
    }

    @Override
    public ProductAccountHolderListNodeComponentBuilder setProductAccountHolderListNodeModule(
        ProductAccountHolderListNodeModule module) {
      this.productAccountHolderListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductAccountHolderListNodeComponentImpl
      implements ProductAccountHolderListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<ProductAccountHolderListNodeRuleProvider>
        productAccountHolderListNodeRuleProviderMembersInjector;

    private Provider<ProductAccountHolderListNodeRuleProvider>
        productAccountHolderListNodeRuleProvider;

    private ProductAccountHolderListNodeComponentImpl(
        ProductAccountHolderListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductAccountHolderListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductAccountHolderListNodeModule_ProvideUiNodeFactory.create(
                  builder.productAccountHolderListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.productAccountHolderListNodeRuleProviderMembersInjector =
          ProductAccountHolderListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.productAccountHolderListNodeRuleProvider =
          DoubleCheck.provider(
              ProductAccountHolderListNodeRuleProvider_Factory.create(
                  productAccountHolderListNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductAccountHolderListNodeRuleProvider getProductAccountHolderListNodeRuleProvider() {
      return productAccountHolderListNodeRuleProvider.get();
    }
  }

  private final class ProductLoanPrimaryPurposeNodeComponentBuilder
      implements ProductLoanPrimaryPurposeNodeComponent.Builder {
    private ProductLoanPrimaryPurposeNodeModule productLoanPrimaryPurposeNodeModule;

    @Override
    public ProductLoanPrimaryPurposeNodeComponent build() {
      if (productLoanPrimaryPurposeNodeModule == null) {
        throw new IllegalStateException(
            ProductLoanPrimaryPurposeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductLoanPrimaryPurposeNodeComponentImpl(this);
    }

    @Override
    public ProductLoanPrimaryPurposeNodeComponentBuilder setProductLoanPrimaryPurposeNodeModule(
        ProductLoanPrimaryPurposeNodeModule module) {
      this.productLoanPrimaryPurposeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductLoanPrimaryPurposeNodeComponentImpl
      implements ProductLoanPrimaryPurposeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductLoanPrimaryPurposeNodeRuleProvider>
        productLoanPrimaryPurposeNodeRuleProviderMembersInjector;

    private Provider<ProductLoanPrimaryPurposeNodeRuleProvider>
        productLoanPrimaryPurposeNodeRuleProvider;

    private ProductLoanPrimaryPurposeNodeComponentImpl(
        ProductLoanPrimaryPurposeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductLoanPrimaryPurposeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductLoanPrimaryPurposeNodeModule_ProvideUiNodeFactory.create(
                  builder.productLoanPrimaryPurposeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductLoanPrimaryPurposeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productLoanPrimaryPurposeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductLoanPrimaryPurposeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productLoanPrimaryPurposeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productLoanPrimaryPurposeNodeRuleProviderMembersInjector =
          ProductLoanPrimaryPurposeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productLoanPrimaryPurposeNodeRuleProvider =
          DoubleCheck.provider(
              ProductLoanPrimaryPurposeNodeRuleProvider_Factory.create(
                  productLoanPrimaryPurposeNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductLoanPrimaryPurposeNodeRuleProvider
        getProductLoanPrimaryPurposeNodeRuleProvider() {
      return productLoanPrimaryPurposeNodeRuleProvider.get();
    }
  }

  private final class ProductTotalLoanTermNodeComponentBuilder
      implements ProductTotalLoanTermNodeComponent.Builder {
    private ProductTotalLoanTermNodeModule productTotalLoanTermNodeModule;

    @Override
    public ProductTotalLoanTermNodeComponent build() {
      if (productTotalLoanTermNodeModule == null) {
        throw new IllegalStateException(
            ProductTotalLoanTermNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductTotalLoanTermNodeComponentImpl(this);
    }

    @Override
    public ProductTotalLoanTermNodeComponentBuilder setProductTotalLoanTermNodeModule(
        ProductTotalLoanTermNodeModule module) {
      this.productTotalLoanTermNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductTotalLoanTermNodeComponentImpl
      implements ProductTotalLoanTermNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductTotalLoanTermNodeRuleProvider>
        productTotalLoanTermNodeRuleProviderMembersInjector;

    private Provider<ProductTotalLoanTermNodeRuleProvider> productTotalLoanTermNodeRuleProvider;

    private ProductTotalLoanTermNodeComponentImpl(
        ProductTotalLoanTermNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductTotalLoanTermNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanTermNodeModule_ProvideUiNodeFactory.create(
                  builder.productTotalLoanTermNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanTermNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productTotalLoanTermNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanTermNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productTotalLoanTermNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productTotalLoanTermNodeRuleProviderMembersInjector =
          ProductTotalLoanTermNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productTotalLoanTermNodeRuleProvider =
          DoubleCheck.provider(
              ProductTotalLoanTermNodeRuleProvider_Factory.create(
                  productTotalLoanTermNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductTotalLoanTermNodeRuleProvider getProductTotalLoanTermNodeRuleProvider() {
      return productTotalLoanTermNodeRuleProvider.get();
    }
  }

  private final class ProductDissatisfactionFlagNodeComponentBuilder
      implements ProductDissatisfactionFlagNodeComponent.Builder {
    private ProductDissatisfactionFlagNodeModule productDissatisfactionFlagNodeModule;

    @Override
    public ProductDissatisfactionFlagNodeComponent build() {
      if (productDissatisfactionFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductDissatisfactionFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductDissatisfactionFlagNodeComponentImpl(this);
    }

    @Override
    public ProductDissatisfactionFlagNodeComponentBuilder setProductDissatisfactionFlagNodeModule(
        ProductDissatisfactionFlagNodeModule module) {
      this.productDissatisfactionFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductDissatisfactionFlagNodeComponentImpl
      implements ProductDissatisfactionFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductDissatisfactionFlagNodeRuleProvider>
        productDissatisfactionFlagNodeRuleProviderMembersInjector;

    private Provider<ProductDissatisfactionFlagNodeRuleProvider>
        productDissatisfactionFlagNodeRuleProvider;

    private ProductDissatisfactionFlagNodeComponentImpl(
        ProductDissatisfactionFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductDissatisfactionFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductDissatisfactionFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productDissatisfactionFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductDissatisfactionFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productDissatisfactionFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductDissatisfactionFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productDissatisfactionFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productDissatisfactionFlagNodeRuleProviderMembersInjector =
          ProductDissatisfactionFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productDissatisfactionFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductDissatisfactionFlagNodeRuleProvider_Factory.create(
                  productDissatisfactionFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductDissatisfactionFlagNodeRuleProvider
        getProductDissatisfactionFlagNodeRuleProvider() {
      return productDissatisfactionFlagNodeRuleProvider.get();
    }
  }

  private final class ProductNameNodeComponentBuilder implements ProductNameNodeComponent.Builder {
    private ProductNameNodeModule productNameNodeModule;

    @Override
    public ProductNameNodeComponent build() {
      if (productNameNodeModule == null) {
        throw new IllegalStateException(
            ProductNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductNameNodeComponentImpl(this);
    }

    @Override
    public ProductNameNodeComponentBuilder setProductNameNodeModule(ProductNameNodeModule module) {
      this.productNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductNameNodeComponentImpl implements ProductNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductNameNodeRuleProvider> productNameNodeRuleProviderMembersInjector;

    private Provider<ProductNameNodeRuleProvider> productNameNodeRuleProvider;

    private ProductNameNodeComponentImpl(ProductNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductNameNodeModule_ProvideUiNodeFactory.create(builder.productNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductNameNodeModule_ProvideLeafUiNodeFactory.create(builder.productNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productNameNodeRuleProviderMembersInjector =
          ProductNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productNameNodeRuleProvider =
          DoubleCheck.provider(
              ProductNameNodeRuleProvider_Factory.create(
                  productNameNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductNameNodeRuleProvider getProductNameNodeRuleProvider() {
      return productNameNodeRuleProvider.get();
    }
  }

  private final class ProductSpecificFeaturesFlagNodeComponentBuilder
      implements ProductSpecificFeaturesFlagNodeComponent.Builder {
    private ProductSpecificFeaturesFlagNodeModule productSpecificFeaturesFlagNodeModule;

    @Override
    public ProductSpecificFeaturesFlagNodeComponent build() {
      if (productSpecificFeaturesFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductSpecificFeaturesFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductSpecificFeaturesFlagNodeComponentImpl(this);
    }

    @Override
    public ProductSpecificFeaturesFlagNodeComponentBuilder setProductSpecificFeaturesFlagNodeModule(
        ProductSpecificFeaturesFlagNodeModule module) {
      this.productSpecificFeaturesFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductSpecificFeaturesFlagNodeComponentImpl
      implements ProductSpecificFeaturesFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductSpecificFeaturesFlagNodeRuleProvider>
        productSpecificFeaturesFlagNodeRuleProviderMembersInjector;

    private Provider<ProductSpecificFeaturesFlagNodeRuleProvider>
        productSpecificFeaturesFlagNodeRuleProvider;

    private ProductSpecificFeaturesFlagNodeComponentImpl(
        ProductSpecificFeaturesFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductSpecificFeaturesFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductSpecificFeaturesFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productSpecificFeaturesFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductSpecificFeaturesFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productSpecificFeaturesFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductSpecificFeaturesFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productSpecificFeaturesFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productSpecificFeaturesFlagNodeRuleProviderMembersInjector =
          ProductSpecificFeaturesFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productSpecificFeaturesFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductSpecificFeaturesFlagNodeRuleProvider_Factory.create(
                  productSpecificFeaturesFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductSpecificFeaturesFlagNodeRuleProvider
        getProductSpecificFeaturesFlagNodeRuleProvider() {
      return productSpecificFeaturesFlagNodeRuleProvider.get();
    }
  }

  private final class ProductConstructionApplicationFlagNodeComponentBuilder
      implements ProductConstructionApplicationFlagNodeComponent.Builder {
    private ProductConstructionApplicationFlagNodeModule
        productConstructionApplicationFlagNodeModule;

    @Override
    public ProductConstructionApplicationFlagNodeComponent build() {
      if (productConstructionApplicationFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductConstructionApplicationFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductConstructionApplicationFlagNodeComponentImpl(this);
    }

    @Override
    public ProductConstructionApplicationFlagNodeComponentBuilder
        setProductConstructionApplicationFlagNodeModule(
            ProductConstructionApplicationFlagNodeModule module) {
      this.productConstructionApplicationFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductConstructionApplicationFlagNodeComponentImpl
      implements ProductConstructionApplicationFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductConstructionApplicationFlagNodeRuleProvider>
        productConstructionApplicationFlagNodeRuleProviderMembersInjector;

    private Provider<ProductConstructionApplicationFlagNodeRuleProvider>
        productConstructionApplicationFlagNodeRuleProvider;

    private ProductConstructionApplicationFlagNodeComponentImpl(
        ProductConstructionApplicationFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductConstructionApplicationFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductConstructionApplicationFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productConstructionApplicationFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductConstructionApplicationFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productConstructionApplicationFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductConstructionApplicationFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productConstructionApplicationFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productConstructionApplicationFlagNodeRuleProviderMembersInjector =
          ProductConstructionApplicationFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productConstructionApplicationFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductConstructionApplicationFlagNodeRuleProvider_Factory.create(
                  productConstructionApplicationFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductConstructionApplicationFlagNodeRuleProvider
        getProductConstructionApplicationFlagNodeRuleProvider() {
      return productConstructionApplicationFlagNodeRuleProvider.get();
    }
  }

  private final class ProductInterestOnlyTermNodeComponentBuilder
      implements ProductInterestOnlyTermNodeComponent.Builder {
    private ProductInterestOnlyTermNodeModule productInterestOnlyTermNodeModule;

    @Override
    public ProductInterestOnlyTermNodeComponent build() {
      if (productInterestOnlyTermNodeModule == null) {
        throw new IllegalStateException(
            ProductInterestOnlyTermNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductInterestOnlyTermNodeComponentImpl(this);
    }

    @Override
    public ProductInterestOnlyTermNodeComponentBuilder setProductInterestOnlyTermNodeModule(
        ProductInterestOnlyTermNodeModule module) {
      this.productInterestOnlyTermNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductInterestOnlyTermNodeComponentImpl
      implements ProductInterestOnlyTermNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductInterestOnlyTermNodeRuleProvider>
        productInterestOnlyTermNodeRuleProviderMembersInjector;

    private Provider<ProductInterestOnlyTermNodeRuleProvider>
        productInterestOnlyTermNodeRuleProvider;

    private ProductInterestOnlyTermNodeComponentImpl(
        ProductInterestOnlyTermNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductInterestOnlyTermNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductInterestOnlyTermNodeModule_ProvideUiNodeFactory.create(
                  builder.productInterestOnlyTermNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductInterestOnlyTermNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productInterestOnlyTermNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductInterestOnlyTermNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productInterestOnlyTermNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productInterestOnlyTermNodeRuleProviderMembersInjector =
          ProductInterestOnlyTermNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productInterestOnlyTermNodeRuleProvider =
          DoubleCheck.provider(
              ProductInterestOnlyTermNodeRuleProvider_Factory.create(
                  productInterestOnlyTermNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductInterestOnlyTermNodeRuleProvider getProductInterestOnlyTermNodeRuleProvider() {
      return productInterestOnlyTermNodeRuleProvider.get();
    }
  }

  private final class ProductDescriptionNodeComponentBuilder
      implements ProductDescriptionNodeComponent.Builder {
    private ProductDescriptionNodeModule productDescriptionNodeModule;

    @Override
    public ProductDescriptionNodeComponent build() {
      if (productDescriptionNodeModule == null) {
        throw new IllegalStateException(
            ProductDescriptionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductDescriptionNodeComponentImpl(this);
    }

    @Override
    public ProductDescriptionNodeComponentBuilder setProductDescriptionNodeModule(
        ProductDescriptionNodeModule module) {
      this.productDescriptionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductDescriptionNodeComponentImpl
      implements ProductDescriptionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ProductDescriptionNodeRuleProvider>
        productDescriptionNodeRuleProviderMembersInjector;

    private Provider<ProductDescriptionNodeRuleProvider> productDescriptionNodeRuleProvider;

    private ProductDescriptionNodeComponentImpl(ProductDescriptionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductDescriptionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductDescriptionNodeModule_ProvideUiNodeFactory.create(
                  builder.productDescriptionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ProductDescriptionNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.productDescriptionNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.productDescriptionNodeRuleProviderMembersInjector =
          ProductDescriptionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.productDescriptionNodeRuleProvider =
          DoubleCheck.provider(
              ProductDescriptionNodeRuleProvider_Factory.create(
                  productDescriptionNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductDescriptionNodeRuleProvider getProductDescriptionNodeRuleProvider() {
      return productDescriptionNodeRuleProvider.get();
    }
  }

  private final class ProductRewardsMembershipNodeComponentBuilder
      implements ProductRewardsMembershipNodeComponent.Builder {
    private ProductRewardsMembershipNodeModule productRewardsMembershipNodeModule;

    @Override
    public ProductRewardsMembershipNodeComponent build() {
      if (productRewardsMembershipNodeModule == null) {
        throw new IllegalStateException(
            ProductRewardsMembershipNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductRewardsMembershipNodeComponentImpl(this);
    }

    @Override
    public ProductRewardsMembershipNodeComponentBuilder setProductRewardsMembershipNodeModule(
        ProductRewardsMembershipNodeModule module) {
      this.productRewardsMembershipNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductRewardsMembershipNodeComponentImpl
      implements ProductRewardsMembershipNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductRewardsMembershipNodeRuleProvider>
        productRewardsMembershipNodeRuleProviderMembersInjector;

    private Provider<ProductRewardsMembershipNodeRuleProvider>
        productRewardsMembershipNodeRuleProvider;

    private ProductRewardsMembershipNodeComponentImpl(
        ProductRewardsMembershipNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductRewardsMembershipNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductRewardsMembershipNodeModule_ProvideUiNodeFactory.create(
                  builder.productRewardsMembershipNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductRewardsMembershipNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productRewardsMembershipNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductRewardsMembershipNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productRewardsMembershipNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productRewardsMembershipNodeRuleProviderMembersInjector =
          ProductRewardsMembershipNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productRewardsMembershipNodeRuleProvider =
          DoubleCheck.provider(
              ProductRewardsMembershipNodeRuleProvider_Factory.create(
                  productRewardsMembershipNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductRewardsMembershipNodeRuleProvider getProductRewardsMembershipNodeRuleProvider() {
      return productRewardsMembershipNodeRuleProvider.get();
    }
  }

  private final class ProductCardHodlerNameNodeComponentBuilder
      implements ProductCardHodlerNameNodeComponent.Builder {
    private ProductCardHodlerNameNodeModule productCardHodlerNameNodeModule;

    @Override
    public ProductCardHodlerNameNodeComponent build() {
      if (productCardHodlerNameNodeModule == null) {
        throw new IllegalStateException(
            ProductCardHodlerNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductCardHodlerNameNodeComponentImpl(this);
    }

    @Override
    public ProductCardHodlerNameNodeComponentBuilder setProductCardHodlerNameNodeModule(
        ProductCardHodlerNameNodeModule module) {
      this.productCardHodlerNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductCardHodlerNameNodeComponentImpl
      implements ProductCardHodlerNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductCardHodlerNameNodeRuleProvider>
        productCardHodlerNameNodeRuleProviderMembersInjector;

    private Provider<ProductCardHodlerNameNodeRuleProvider> productCardHodlerNameNodeRuleProvider;

    private ProductCardHodlerNameNodeComponentImpl(
        ProductCardHodlerNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductCardHodlerNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductCardHodlerNameNodeModule_ProvideUiNodeFactory.create(
                  builder.productCardHodlerNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductCardHodlerNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productCardHodlerNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductCardHodlerNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productCardHodlerNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productCardHodlerNameNodeRuleProviderMembersInjector =
          ProductCardHodlerNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productCardHodlerNameNodeRuleProvider =
          DoubleCheck.provider(
              ProductCardHodlerNameNodeRuleProvider_Factory.create(
                  productCardHodlerNameNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductCardHodlerNameNodeRuleProvider getProductCardHodlerNameNodeRuleProvider() {
      return productCardHodlerNameNodeRuleProvider.get();
    }
  }

  private final class ProductRewardsProgramNodeComponentBuilder
      implements ProductRewardsProgramNodeComponent.Builder {
    private ProductRewardsProgramNodeModule productRewardsProgramNodeModule;

    @Override
    public ProductRewardsProgramNodeComponent build() {
      if (productRewardsProgramNodeModule == null) {
        throw new IllegalStateException(
            ProductRewardsProgramNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductRewardsProgramNodeComponentImpl(this);
    }

    @Override
    public ProductRewardsProgramNodeComponentBuilder setProductRewardsProgramNodeModule(
        ProductRewardsProgramNodeModule module) {
      this.productRewardsProgramNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductRewardsProgramNodeComponentImpl
      implements ProductRewardsProgramNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductRewardsProgramNodeRuleProvider>
        productRewardsProgramNodeRuleProviderMembersInjector;

    private Provider<ProductRewardsProgramNodeRuleProvider> productRewardsProgramNodeRuleProvider;

    private ProductRewardsProgramNodeComponentImpl(
        ProductRewardsProgramNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductRewardsProgramNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductRewardsProgramNodeModule_ProvideUiNodeFactory.create(
                  builder.productRewardsProgramNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductRewardsProgramNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productRewardsProgramNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductRewardsProgramNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productRewardsProgramNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productRewardsProgramNodeRuleProviderMembersInjector =
          ProductRewardsProgramNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productRewardsProgramNodeRuleProvider =
          DoubleCheck.provider(
              ProductRewardsProgramNodeRuleProvider_Factory.create(
                  productRewardsProgramNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductRewardsProgramNodeRuleProvider getProductRewardsProgramNodeRuleProvider() {
      return productRewardsProgramNodeRuleProvider.get();
    }
  }

  private final class ProductCardHolderNodeComponentBuilder
      implements ProductCardHolderNodeComponent.Builder {
    private ProductCardHolderNodeModule productCardHolderNodeModule;

    @Override
    public ProductCardHolderNodeComponent build() {
      if (productCardHolderNodeModule == null) {
        throw new IllegalStateException(
            ProductCardHolderNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductCardHolderNodeComponentImpl(this);
    }

    @Override
    public ProductCardHolderNodeComponentBuilder setProductCardHolderNodeModule(
        ProductCardHolderNodeModule module) {
      this.productCardHolderNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductCardHolderNodeComponentImpl implements ProductCardHolderNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ProductCardHolderNodeRuleProvider>
        productCardHolderNodeRuleProviderMembersInjector;

    private Provider<ProductCardHolderNodeRuleProvider> productCardHolderNodeRuleProvider;

    private ProductCardHolderNodeComponentImpl(ProductCardHolderNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductCardHolderNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductCardHolderNodeModule_ProvideUiNodeFactory.create(
                  builder.productCardHolderNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ProductCardHolderNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.productCardHolderNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.productCardHolderNodeRuleProviderMembersInjector =
          ProductCardHolderNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.productCardHolderNodeRuleProvider =
          DoubleCheck.provider(
              ProductCardHolderNodeRuleProvider_Factory.create(
                  productCardHolderNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductCardHolderNodeRuleProvider getProductCardHolderNodeRuleProvider() {
      return productCardHolderNodeRuleProvider.get();
    }
  }

  private final class ProductCreditCardFlagNodeComponentBuilder
      implements ProductCreditCardFlagNodeComponent.Builder {
    private ProductCreditCardFlagNodeModule productCreditCardFlagNodeModule;

    @Override
    public ProductCreditCardFlagNodeComponent build() {
      if (productCreditCardFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductCreditCardFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductCreditCardFlagNodeComponentImpl(this);
    }

    @Override
    public ProductCreditCardFlagNodeComponentBuilder setProductCreditCardFlagNodeModule(
        ProductCreditCardFlagNodeModule module) {
      this.productCreditCardFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductCreditCardFlagNodeComponentImpl
      implements ProductCreditCardFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductCreditCardFlagNodeRuleProvider>
        productCreditCardFlagNodeRuleProviderMembersInjector;

    private Provider<ProductCreditCardFlagNodeRuleProvider> productCreditCardFlagNodeRuleProvider;

    private ProductCreditCardFlagNodeComponentImpl(
        ProductCreditCardFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductCreditCardFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productCreditCardFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productCreditCardFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productCreditCardFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productCreditCardFlagNodeRuleProviderMembersInjector =
          ProductCreditCardFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productCreditCardFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductCreditCardFlagNodeRuleProvider_Factory.create(
                  productCreditCardFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductCreditCardFlagNodeRuleProvider getProductCreditCardFlagNodeRuleProvider() {
      return productCreditCardFlagNodeRuleProvider.get();
    }
  }

  private final class ProductExpressConsentFlagNodeComponentBuilder
      implements ProductExpressConsentFlagNodeComponent.Builder {
    private ProductExpressConsentFlagNodeModule productExpressConsentFlagNodeModule;

    @Override
    public ProductExpressConsentFlagNodeComponent build() {
      if (productExpressConsentFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductExpressConsentFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductExpressConsentFlagNodeComponentImpl(this);
    }

    @Override
    public ProductExpressConsentFlagNodeComponentBuilder setProductExpressConsentFlagNodeModule(
        ProductExpressConsentFlagNodeModule module) {
      this.productExpressConsentFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductExpressConsentFlagNodeComponentImpl
      implements ProductExpressConsentFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductExpressConsentFlagNodeRuleProvider>
        productExpressConsentFlagNodeRuleProviderMembersInjector;

    private Provider<ProductExpressConsentFlagNodeRuleProvider>
        productExpressConsentFlagNodeRuleProvider;

    private ProductExpressConsentFlagNodeComponentImpl(
        ProductExpressConsentFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductExpressConsentFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductExpressConsentFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productExpressConsentFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductExpressConsentFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productExpressConsentFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductExpressConsentFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productExpressConsentFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productExpressConsentFlagNodeRuleProviderMembersInjector =
          ProductExpressConsentFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productExpressConsentFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductExpressConsentFlagNodeRuleProvider_Factory.create(
                  productExpressConsentFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductExpressConsentFlagNodeRuleProvider
        getProductExpressConsentFlagNodeRuleProvider() {
      return productExpressConsentFlagNodeRuleProvider.get();
    }
  }

  private final class Product100PercentOffsetFlagNodeComponentBuilder
      implements Product100PercentOffsetFlagNodeComponent.Builder {
    private Product100PercentOffsetFlagNodeModule product100PercentOffsetFlagNodeModule;

    @Override
    public Product100PercentOffsetFlagNodeComponent build() {
      if (product100PercentOffsetFlagNodeModule == null) {
        throw new IllegalStateException(
            Product100PercentOffsetFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new Product100PercentOffsetFlagNodeComponentImpl(this);
    }

    @Override
    public Product100PercentOffsetFlagNodeComponentBuilder setProduct100PercentOffsetFlagNodeModule(
        Product100PercentOffsetFlagNodeModule module) {
      this.product100PercentOffsetFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class Product100PercentOffsetFlagNodeComponentImpl
      implements Product100PercentOffsetFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<Product100PercentOffsetFlagNodeRuleProvider>
        product100PercentOffsetFlagNodeRuleProviderMembersInjector;

    private Provider<Product100PercentOffsetFlagNodeRuleProvider>
        product100PercentOffsetFlagNodeRuleProvider;

    private Product100PercentOffsetFlagNodeComponentImpl(
        Product100PercentOffsetFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final Product100PercentOffsetFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              Product100PercentOffsetFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.product100PercentOffsetFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              Product100PercentOffsetFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.product100PercentOffsetFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              Product100PercentOffsetFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.product100PercentOffsetFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.product100PercentOffsetFlagNodeRuleProviderMembersInjector =
          Product100PercentOffsetFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.product100PercentOffsetFlagNodeRuleProvider =
          DoubleCheck.provider(
              Product100PercentOffsetFlagNodeRuleProvider_Factory.create(
                  product100PercentOffsetFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public Product100PercentOffsetFlagNodeRuleProvider
        getProduct100PercentOffsetFlagNodeRuleProvider() {
      return product100PercentOffsetFlagNodeRuleProvider.get();
    }
  }

  private final class ProductCreditCardTypeNodeComponentBuilder
      implements ProductCreditCardTypeNodeComponent.Builder {
    private ProductCreditCardTypeNodeModule productCreditCardTypeNodeModule;

    @Override
    public ProductCreditCardTypeNodeComponent build() {
      if (productCreditCardTypeNodeModule == null) {
        throw new IllegalStateException(
            ProductCreditCardTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductCreditCardTypeNodeComponentImpl(this);
    }

    @Override
    public ProductCreditCardTypeNodeComponentBuilder setProductCreditCardTypeNodeModule(
        ProductCreditCardTypeNodeModule module) {
      this.productCreditCardTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductCreditCardTypeNodeComponentImpl
      implements ProductCreditCardTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductCreditCardTypeNodeRuleProvider>
        productCreditCardTypeNodeRuleProviderMembersInjector;

    private Provider<ProductCreditCardTypeNodeRuleProvider> productCreditCardTypeNodeRuleProvider;

    private ProductCreditCardTypeNodeComponentImpl(
        ProductCreditCardTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductCreditCardTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.productCreditCardTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productCreditCardTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productCreditCardTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productCreditCardTypeNodeRuleProviderMembersInjector =
          ProductCreditCardTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productCreditCardTypeNodeRuleProvider =
          DoubleCheck.provider(
              ProductCreditCardTypeNodeRuleProvider_Factory.create(
                  productCreditCardTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductCreditCardTypeNodeRuleProvider getProductCreditCardTypeNodeRuleProvider() {
      return productCreditCardTypeNodeRuleProvider.get();
    }
  }

  private final class ProductRepaymentFrequencyNodeComponentBuilder
      implements ProductRepaymentFrequencyNodeComponent.Builder {
    private ProductRepaymentFrequencyNodeModule productRepaymentFrequencyNodeModule;

    @Override
    public ProductRepaymentFrequencyNodeComponent build() {
      if (productRepaymentFrequencyNodeModule == null) {
        throw new IllegalStateException(
            ProductRepaymentFrequencyNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductRepaymentFrequencyNodeComponentImpl(this);
    }

    @Override
    public ProductRepaymentFrequencyNodeComponentBuilder setProductRepaymentFrequencyNodeModule(
        ProductRepaymentFrequencyNodeModule module) {
      this.productRepaymentFrequencyNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductRepaymentFrequencyNodeComponentImpl
      implements ProductRepaymentFrequencyNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductRepaymentFrequencyNodeRuleProvider>
        productRepaymentFrequencyNodeRuleProviderMembersInjector;

    private Provider<ProductRepaymentFrequencyNodeRuleProvider>
        productRepaymentFrequencyNodeRuleProvider;

    private ProductRepaymentFrequencyNodeComponentImpl(
        ProductRepaymentFrequencyNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductRepaymentFrequencyNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductRepaymentFrequencyNodeModule_ProvideUiNodeFactory.create(
                  builder.productRepaymentFrequencyNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductRepaymentFrequencyNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productRepaymentFrequencyNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductRepaymentFrequencyNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productRepaymentFrequencyNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productRepaymentFrequencyNodeRuleProviderMembersInjector =
          ProductRepaymentFrequencyNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productRepaymentFrequencyNodeRuleProvider =
          DoubleCheck.provider(
              ProductRepaymentFrequencyNodeRuleProvider_Factory.create(
                  productRepaymentFrequencyNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductRepaymentFrequencyNodeRuleProvider
        getProductRepaymentFrequencyNodeRuleProvider() {
      return productRepaymentFrequencyNodeRuleProvider.get();
    }
  }

  private final class ProductPackageNameNodeComponentBuilder
      implements ProductPackageNameNodeComponent.Builder {
    private ProductPackageNameNodeModule productPackageNameNodeModule;

    @Override
    public ProductPackageNameNodeComponent build() {
      if (productPackageNameNodeModule == null) {
        throw new IllegalStateException(
            ProductPackageNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductPackageNameNodeComponentImpl(this);
    }

    @Override
    public ProductPackageNameNodeComponentBuilder setProductPackageNameNodeModule(
        ProductPackageNameNodeModule module) {
      this.productPackageNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductPackageNameNodeComponentImpl
      implements ProductPackageNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductPackageNameNodeRuleProvider>
        productPackageNameNodeRuleProviderMembersInjector;

    private Provider<ProductPackageNameNodeRuleProvider> productPackageNameNodeRuleProvider;

    private ProductPackageNameNodeComponentImpl(ProductPackageNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductPackageNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductPackageNameNodeModule_ProvideUiNodeFactory.create(
                  builder.productPackageNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductPackageNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productPackageNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductPackageNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productPackageNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productPackageNameNodeRuleProviderMembersInjector =
          ProductPackageNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productPackageNameNodeRuleProvider =
          DoubleCheck.provider(
              ProductPackageNameNodeRuleProvider_Factory.create(
                  productPackageNameNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductPackageNameNodeRuleProvider getProductPackageNameNodeRuleProvider() {
      return productPackageNameNodeRuleProvider.get();
    }
  }

  private final class ProductTransactionAccountFlagNodeComponentBuilder
      implements ProductTransactionAccountFlagNodeComponent.Builder {
    private ProductTransactionAccountFlagNodeModule productTransactionAccountFlagNodeModule;

    @Override
    public ProductTransactionAccountFlagNodeComponent build() {
      if (productTransactionAccountFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductTransactionAccountFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductTransactionAccountFlagNodeComponentImpl(this);
    }

    @Override
    public ProductTransactionAccountFlagNodeComponentBuilder
        setProductTransactionAccountFlagNodeModule(ProductTransactionAccountFlagNodeModule module) {
      this.productTransactionAccountFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductTransactionAccountFlagNodeComponentImpl
      implements ProductTransactionAccountFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductTransactionAccountFlagNodeRuleProvider>
        productTransactionAccountFlagNodeRuleProviderMembersInjector;

    private Provider<ProductTransactionAccountFlagNodeRuleProvider>
        productTransactionAccountFlagNodeRuleProvider;

    private ProductTransactionAccountFlagNodeComponentImpl(
        ProductTransactionAccountFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductTransactionAccountFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductTransactionAccountFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productTransactionAccountFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductTransactionAccountFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productTransactionAccountFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductTransactionAccountFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productTransactionAccountFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productTransactionAccountFlagNodeRuleProviderMembersInjector =
          ProductTransactionAccountFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productTransactionAccountFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductTransactionAccountFlagNodeRuleProvider_Factory.create(
                  productTransactionAccountFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductTransactionAccountFlagNodeRuleProvider
        getProductTransactionAccountFlagNodeRuleProvider() {
      return productTransactionAccountFlagNodeRuleProvider.get();
    }
  }

  private final class ProductOptOutReasonNodeComponentBuilder
      implements ProductOptOutReasonNodeComponent.Builder {
    private ProductOptOutReasonNodeModule productOptOutReasonNodeModule;

    @Override
    public ProductOptOutReasonNodeComponent build() {
      if (productOptOutReasonNodeModule == null) {
        throw new IllegalStateException(
            ProductOptOutReasonNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductOptOutReasonNodeComponentImpl(this);
    }

    @Override
    public ProductOptOutReasonNodeComponentBuilder setProductOptOutReasonNodeModule(
        ProductOptOutReasonNodeModule module) {
      this.productOptOutReasonNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductOptOutReasonNodeComponentImpl
      implements ProductOptOutReasonNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ProductOptOutReasonNodeRuleProvider>
        productOptOutReasonNodeRuleProviderMembersInjector;

    private Provider<ProductOptOutReasonNodeRuleProvider> productOptOutReasonNodeRuleProvider;

    private ProductOptOutReasonNodeComponentImpl(ProductOptOutReasonNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductOptOutReasonNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductOptOutReasonNodeModule_ProvideUiNodeFactory.create(
                  builder.productOptOutReasonNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductOptOutReasonNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productOptOutReasonNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ProductOptOutReasonNodeModule_ProvideStringUiNodeFactory.create(
                  builder.productOptOutReasonNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.productOptOutReasonNodeRuleProviderMembersInjector =
          ProductOptOutReasonNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.productOptOutReasonNodeRuleProvider =
          DoubleCheck.provider(
              ProductOptOutReasonNodeRuleProvider_Factory.create(
                  productOptOutReasonNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductOptOutReasonNodeRuleProvider getProductOptOutReasonNodeRuleProvider() {
      return productOptOutReasonNodeRuleProvider.get();
    }
  }

  private final class ProductCreditCardLimitNodeComponentBuilder
      implements ProductCreditCardLimitNodeComponent.Builder {
    private ProductCreditCardLimitNodeModule productCreditCardLimitNodeModule;

    @Override
    public ProductCreditCardLimitNodeComponent build() {
      if (productCreditCardLimitNodeModule == null) {
        throw new IllegalStateException(
            ProductCreditCardLimitNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductCreditCardLimitNodeComponentImpl(this);
    }

    @Override
    public ProductCreditCardLimitNodeComponentBuilder setProductCreditCardLimitNodeModule(
        ProductCreditCardLimitNodeModule module) {
      this.productCreditCardLimitNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductCreditCardLimitNodeComponentImpl
      implements ProductCreditCardLimitNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductCreditCardLimitNodeRuleProvider>
        productCreditCardLimitNodeRuleProviderMembersInjector;

    private Provider<ProductCreditCardLimitNodeRuleProvider> productCreditCardLimitNodeRuleProvider;

    private ProductCreditCardLimitNodeComponentImpl(
        ProductCreditCardLimitNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductCreditCardLimitNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardLimitNodeModule_ProvideUiNodeFactory.create(
                  builder.productCreditCardLimitNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardLimitNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productCreditCardLimitNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductCreditCardLimitNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productCreditCardLimitNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productCreditCardLimitNodeRuleProviderMembersInjector =
          ProductCreditCardLimitNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productCreditCardLimitNodeRuleProvider =
          DoubleCheck.provider(
              ProductCreditCardLimitNodeRuleProvider_Factory.create(
                  productCreditCardLimitNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductCreditCardLimitNodeRuleProvider getProductCreditCardLimitNodeRuleProvider() {
      return productCreditCardLimitNodeRuleProvider.get();
    }
  }

  private final class ProductRateLockFlagNodeComponentBuilder
      implements ProductRateLockFlagNodeComponent.Builder {
    private ProductRateLockFlagNodeModule productRateLockFlagNodeModule;

    @Override
    public ProductRateLockFlagNodeComponent build() {
      if (productRateLockFlagNodeModule == null) {
        throw new IllegalStateException(
            ProductRateLockFlagNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductRateLockFlagNodeComponentImpl(this);
    }

    @Override
    public ProductRateLockFlagNodeComponentBuilder setProductRateLockFlagNodeModule(
        ProductRateLockFlagNodeModule module) {
      this.productRateLockFlagNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductRateLockFlagNodeComponentImpl
      implements ProductRateLockFlagNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BooleanUiNode<?>> provideBooleanUiNodeProvider;

    private Provider<BooleanFixedValueValidationRule> booleanFixedValueValidationRuleProvider;

    private MembersInjector<ProductRateLockFlagNodeRuleProvider>
        productRateLockFlagNodeRuleProviderMembersInjector;

    private Provider<ProductRateLockFlagNodeRuleProvider> productRateLockFlagNodeRuleProvider;

    private ProductRateLockFlagNodeComponentImpl(ProductRateLockFlagNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductRateLockFlagNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductRateLockFlagNodeModule_ProvideUiNodeFactory.create(
                  builder.productRateLockFlagNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductRateLockFlagNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productRateLockFlagNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBooleanUiNodeProvider =
          DoubleCheck.provider(
              ProductRateLockFlagNodeModule_ProvideBooleanUiNodeFactory.create(
                  builder.productRateLockFlagNodeModule));

      this.booleanFixedValueValidationRuleProvider =
          BooleanFixedValueValidationRule_Factory.create(
              MembersInjectors.<BooleanFixedValueValidationRule>noOp(),
              provideBooleanUiNodeProvider);

      this.productRateLockFlagNodeRuleProviderMembersInjector =
          ProductRateLockFlagNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              booleanFixedValueValidationRuleProvider);

      this.productRateLockFlagNodeRuleProvider =
          DoubleCheck.provider(
              ProductRateLockFlagNodeRuleProvider_Factory.create(
                  productRateLockFlagNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductRateLockFlagNodeRuleProvider getProductRateLockFlagNodeRuleProvider() {
      return productRateLockFlagNodeRuleProvider.get();
    }
  }

  private final class ProductFeaturesNodeComponentBuilder
      implements ProductFeaturesNodeComponent.Builder {
    private ProductFeaturesNodeModule productFeaturesNodeModule;

    @Override
    public ProductFeaturesNodeComponent build() {
      if (productFeaturesNodeModule == null) {
        throw new IllegalStateException(
            ProductFeaturesNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductFeaturesNodeComponentImpl(this);
    }

    @Override
    public ProductFeaturesNodeComponentBuilder setProductFeaturesNodeModule(
        ProductFeaturesNodeModule module) {
      this.productFeaturesNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductFeaturesNodeComponentImpl implements ProductFeaturesNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ProductFeaturesNodeRuleProvider>
        productFeaturesNodeRuleProviderMembersInjector;

    private Provider<ProductFeaturesNodeRuleProvider> productFeaturesNodeRuleProvider;

    private ProductFeaturesNodeComponentImpl(ProductFeaturesNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductFeaturesNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductFeaturesNodeModule_ProvideUiNodeFactory.create(
                  builder.productFeaturesNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ProductFeaturesNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.productFeaturesNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.productFeaturesNodeRuleProviderMembersInjector =
          ProductFeaturesNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.productFeaturesNodeRuleProvider =
          DoubleCheck.provider(
              ProductFeaturesNodeRuleProvider_Factory.create(
                  productFeaturesNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductFeaturesNodeRuleProvider getProductFeaturesNodeRuleProvider() {
      return productFeaturesNodeRuleProvider.get();
    }
  }

  private final class ProductNodeComponentBuilder implements ProductNodeComponent.Builder {
    private ProductNodeModule productNodeModule;

    @Override
    public ProductNodeComponent build() {
      if (productNodeModule == null) {
        throw new IllegalStateException(
            ProductNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductNodeComponentImpl(this);
    }

    @Override
    public ProductNodeComponentBuilder setProductNodeModule(ProductNodeModule module) {
      this.productNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductNodeComponentImpl implements ProductNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ProductNodeRuleProvider> productNodeRuleProviderMembersInjector;

    private Provider<ProductNodeRuleProvider> productNodeRuleProvider;

    private ProductNodeComponentImpl(ProductNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductNodeModule_ProvideUiNodeFactory.create(builder.productNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ProductNodeModule_ProvideObjectUiNodeFactory.create(builder.productNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.productNodeRuleProviderMembersInjector =
          ProductNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.productNodeRuleProvider =
          DoubleCheck.provider(
              ProductNodeRuleProvider_Factory.create(productNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductNodeRuleProvider getProductNodeRuleProvider() {
      return productNodeRuleProvider.get();
    }
  }

  private final class ProductListNodeComponentBuilder implements ProductListNodeComponent.Builder {
    private ProductListNodeModule productListNodeModule;

    @Override
    public ProductListNodeComponent build() {
      if (productListNodeModule == null) {
        throw new IllegalStateException(
            ProductListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductListNodeComponentImpl(this);
    }

    @Override
    public ProductListNodeComponentBuilder setProductListNodeModule(ProductListNodeModule module) {
      this.productListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductListNodeComponentImpl implements ProductListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<ProductListNodeRuleProvider> productListNodeRuleProviderMembersInjector;

    private Provider<ProductListNodeRuleProvider> productListNodeRuleProvider;

    private ProductListNodeComponentImpl(ProductListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductListNodeModule_ProvideUiNodeFactory.create(builder.productListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.productListNodeRuleProviderMembersInjector =
          ProductListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.productListNodeRuleProvider =
          DoubleCheck.provider(
              ProductListNodeRuleProvider_Factory.create(
                  productListNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductListNodeRuleProvider getProductListNodeRuleProvider() {
      return productListNodeRuleProvider.get();
    }
  }

  private final class ProductTotalLoanLmiAmountNodeComponentBuilder
      implements ProductTotalLoanLmiAmountNodeComponent.Builder {
    private ProductTotalLoanLmiAmountNodeModule productTotalLoanLmiAmountNodeModule;

    @Override
    public ProductTotalLoanLmiAmountNodeComponent build() {
      if (productTotalLoanLmiAmountNodeModule == null) {
        throw new IllegalStateException(
            ProductTotalLoanLmiAmountNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductTotalLoanLmiAmountNodeComponentImpl(this);
    }

    @Override
    public ProductTotalLoanLmiAmountNodeComponentBuilder setProductTotalLoanLmiAmountNodeModule(
        ProductTotalLoanLmiAmountNodeModule module) {
      this.productTotalLoanLmiAmountNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductTotalLoanLmiAmountNodeComponentImpl
      implements ProductTotalLoanLmiAmountNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductTotalLoanLmiAmountNodeRuleProvider>
        productTotalLoanLmiAmountNodeRuleProviderMembersInjector;

    private Provider<ProductTotalLoanLmiAmountNodeRuleProvider>
        productTotalLoanLmiAmountNodeRuleProvider;

    private ProductTotalLoanLmiAmountNodeComponentImpl(
        ProductTotalLoanLmiAmountNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductTotalLoanLmiAmountNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanLmiAmountNodeModule_ProvideUiNodeFactory.create(
                  builder.productTotalLoanLmiAmountNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanLmiAmountNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productTotalLoanLmiAmountNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLoanLmiAmountNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productTotalLoanLmiAmountNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productTotalLoanLmiAmountNodeRuleProviderMembersInjector =
          ProductTotalLoanLmiAmountNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productTotalLoanLmiAmountNodeRuleProvider =
          DoubleCheck.provider(
              ProductTotalLoanLmiAmountNodeRuleProvider_Factory.create(
                  productTotalLoanLmiAmountNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductTotalLoanLmiAmountNodeRuleProvider
        getProductTotalLoanLmiAmountNodeRuleProvider() {
      return productTotalLoanLmiAmountNodeRuleProvider.get();
    }
  }

  private final class ProductFeesNodeComponentBuilder implements ProductFeesNodeComponent.Builder {
    private ProductFeesNodeModule productFeesNodeModule;

    @Override
    public ProductFeesNodeComponent build() {
      if (productFeesNodeModule == null) {
        throw new IllegalStateException(
            ProductFeesNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductFeesNodeComponentImpl(this);
    }

    @Override
    public ProductFeesNodeComponentBuilder setProductFeesNodeModule(ProductFeesNodeModule module) {
      this.productFeesNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductFeesNodeComponentImpl implements ProductFeesNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ProductFeesNodeRuleProvider> productFeesNodeRuleProviderMembersInjector;

    private Provider<ProductFeesNodeRuleProvider> productFeesNodeRuleProvider;

    private ProductFeesNodeComponentImpl(ProductFeesNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductFeesNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductFeesNodeModule_ProvideUiNodeFactory.create(builder.productFeesNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ProductFeesNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.productFeesNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.productFeesNodeRuleProviderMembersInjector =
          ProductFeesNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.productFeesNodeRuleProvider =
          DoubleCheck.provider(
              ProductFeesNodeRuleProvider_Factory.create(
                  productFeesNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductFeesNodeRuleProvider getProductFeesNodeRuleProvider() {
      return productFeesNodeRuleProvider.get();
    }
  }

  private final class ProductTotalLvrNodeComponentBuilder
      implements ProductTotalLvrNodeComponent.Builder {
    private ProductTotalLvrNodeModule productTotalLvrNodeModule;

    @Override
    public ProductTotalLvrNodeComponent build() {
      if (productTotalLvrNodeModule == null) {
        throw new IllegalStateException(
            ProductTotalLvrNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductTotalLvrNodeComponentImpl(this);
    }

    @Override
    public ProductTotalLvrNodeComponentBuilder setProductTotalLvrNodeModule(
        ProductTotalLvrNodeModule module) {
      this.productTotalLvrNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductTotalLvrNodeComponentImpl implements ProductTotalLvrNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<BigDecimalUiNode<?>> provideBigDecimalUiNodeProvider;

    private Provider<RangeValidationRule> rangeValidationRuleProvider;

    private Provider<NumberFormatValidationRule> numberFormatValidationRuleProvider;

    private MembersInjector<ProductTotalLvrNodeRuleProvider>
        productTotalLvrNodeRuleProviderMembersInjector;

    private Provider<ProductTotalLvrNodeRuleProvider> productTotalLvrNodeRuleProvider;

    private ProductTotalLvrNodeComponentImpl(ProductTotalLvrNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductTotalLvrNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLvrNodeModule_ProvideUiNodeFactory.create(
                  builder.productTotalLvrNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLvrNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.productTotalLvrNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideBigDecimalUiNodeProvider =
          DoubleCheck.provider(
              ProductTotalLvrNodeModule_ProvideBigDecimalUiNodeFactory.create(
                  builder.productTotalLvrNodeModule));

      this.rangeValidationRuleProvider =
          RangeValidationRule_Factory.create(
              MembersInjectors.<RangeValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.numberFormatValidationRuleProvider =
          NumberFormatValidationRule_Factory.create(
              MembersInjectors.<NumberFormatValidationRule>noOp(), provideBigDecimalUiNodeProvider);

      this.productTotalLvrNodeRuleProviderMembersInjector =
          ProductTotalLvrNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              rangeValidationRuleProvider,
              numberFormatValidationRuleProvider);

      this.productTotalLvrNodeRuleProvider =
          DoubleCheck.provider(
              ProductTotalLvrNodeRuleProvider_Factory.create(
                  productTotalLvrNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductTotalLvrNodeRuleProvider getProductTotalLvrNodeRuleProvider() {
      return productTotalLvrNodeRuleProvider.get();
    }
  }

  private final class ProductsNodeComponentBuilder implements ProductsNodeComponent.Builder {
    private ProductsNodeModule productsNodeModule;

    @Override
    public ProductsNodeComponent build() {
      if (productsNodeModule == null) {
        throw new IllegalStateException(
            ProductsNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ProductsNodeComponentImpl(this);
    }

    @Override
    public ProductsNodeComponentBuilder setProductsNodeModule(ProductsNodeModule module) {
      this.productsNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ProductsNodeComponentImpl implements ProductsNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<ProductsNodeRuleProvider> productsNodeRuleProviderMembersInjector;

    private Provider<ProductsNodeRuleProvider> productsNodeRuleProvider;

    private ProductsNodeComponentImpl(ProductsNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProductsNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ProductsNodeModule_ProvideUiNodeFactory.create(builder.productsNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ProductsNodeModule_ProvideObjectUiNodeFactory.create(builder.productsNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.productsNodeRuleProviderMembersInjector =
          ProductsNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.productsNodeRuleProvider =
          DoubleCheck.provider(
              ProductsNodeRuleProvider_Factory.create(productsNodeRuleProviderMembersInjector));
    }

    @Override
    public ProductsNodeRuleProvider getProductsNodeRuleProvider() {
      return productsNodeRuleProvider.get();
    }
  }

  private final class ErrorNodeComponentBuilder implements ErrorNodeComponent.Builder {
    private ErrorNodeModule errorNodeModule;

    @Override
    public ErrorNodeComponent build() {
      if (errorNodeModule == null) {
        throw new IllegalStateException(ErrorNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ErrorNodeComponentImpl(this);
    }

    @Override
    public ErrorNodeComponentBuilder setErrorNodeModule(ErrorNodeModule module) {
      this.errorNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ErrorNodeComponentImpl implements ErrorNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private MembersInjector<ErrorNodeRuleProvider> errorNodeRuleProviderMembersInjector;

    private Provider<ErrorNodeRuleProvider> errorNodeRuleProvider;

    private ErrorNodeComponentImpl(ErrorNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ErrorNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ErrorNodeModule_ProvideUiNodeFactory.create(builder.errorNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ErrorNodeModule_ProvideLeafUiNodeFactory.create(builder.errorNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.errorNodeRuleProviderMembersInjector =
          ErrorNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider, leafValueRequiredValidationRuleProvider);

      this.errorNodeRuleProvider =
          DoubleCheck.provider(
              ErrorNodeRuleProvider_Factory.create(errorNodeRuleProviderMembersInjector));
    }

    @Override
    public ErrorNodeRuleProvider getErrorNodeRuleProvider() {
      return errorNodeRuleProvider.get();
    }
  }

  private final class ErrorListNodeComponentBuilder implements ErrorListNodeComponent.Builder {
    private ErrorListNodeModule errorListNodeModule;

    @Override
    public ErrorListNodeComponent build() {
      if (errorListNodeModule == null) {
        throw new IllegalStateException(
            ErrorListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ErrorListNodeComponentImpl(this);
    }

    @Override
    public ErrorListNodeComponentBuilder setErrorListNodeModule(ErrorListNodeModule module) {
      this.errorListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ErrorListNodeComponentImpl implements ErrorListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ErrorListNode> provideErrorListNodeProvider;

    private Provider<ChangeFocusErrorRuleImpl> changeFocusErrorRuleImplProvider;

    private Provider<ChangeFocusErrorRule> provideChangeFocusErrorRuleProvider;

    private MembersInjector<ErrorListNodeRuleProvider> errorListNodeRuleProviderMembersInjector;

    private Provider<ErrorListNodeRuleProvider> errorListNodeRuleProvider;

    private ErrorListNodeComponentImpl(ErrorListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ErrorListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ErrorListNodeModule_ProvideUiNodeFactory.create(builder.errorListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideErrorListNodeProvider =
          DoubleCheck.provider(
              ErrorListNodeModule_ProvideErrorListNodeFactory.create(builder.errorListNodeModule));

      this.changeFocusErrorRuleImplProvider =
          ChangeFocusErrorRuleImpl_Factory.create(
              MembersInjectors.<ChangeFocusErrorRuleImpl>noOp(), provideErrorListNodeProvider);

      this.provideChangeFocusErrorRuleProvider = (Provider) changeFocusErrorRuleImplProvider;

      this.errorListNodeRuleProviderMembersInjector =
          ErrorListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider, provideChangeFocusErrorRuleProvider);

      this.errorListNodeRuleProvider =
          DoubleCheck.provider(
              ErrorListNodeRuleProvider_Factory.create(errorListNodeRuleProviderMembersInjector));
    }

    @Override
    public ErrorListNodeRuleProvider getErrorListNodeRuleProvider() {
      return errorListNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyDobNodeComponentBuilder
      implements ThirdPartyDobNodeComponent.Builder {
    private ThirdPartyDobNodeModule thirdPartyDobNodeModule;

    @Override
    public ThirdPartyDobNodeComponent build() {
      if (thirdPartyDobNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyDobNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyDobNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyDobNodeComponentBuilder setThirdPartyDobNodeModule(
        ThirdPartyDobNodeModule module) {
      this.thirdPartyDobNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyDobNodeComponentImpl implements ThirdPartyDobNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private Provider<DobNode<?>> provideDobNodeProvider;

    private Provider<DobRangeValidationRuleImpl> dobRangeValidationRuleImplProvider;

    private Provider<DobRangeValidationRule> provideDobRangeValidationRuleProvider;

    private MembersInjector<ThirdPartyDobNodeRuleProvider>
        thirdPartyDobNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyDobNodeRuleProvider> thirdPartyDobNodeRuleProvider;

    private ThirdPartyDobNodeComponentImpl(ThirdPartyDobNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyDobNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDobNodeModule_ProvideUiNodeFactory.create(builder.thirdPartyDobNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDobNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyDobNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDobNodeModule_ProvideStringUiNodeFactory.create(
                  builder.thirdPartyDobNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.provideDobNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDobNodeModule_ProvideDobNodeFactory.create(
                  builder.thirdPartyDobNodeModule));

      this.dobRangeValidationRuleImplProvider =
          DobRangeValidationRuleImpl_Factory.create(
              MembersInjectors.<DobRangeValidationRuleImpl>noOp(), provideDobNodeProvider);

      this.provideDobRangeValidationRuleProvider = (Provider) dobRangeValidationRuleImplProvider;

      this.thirdPartyDobNodeRuleProviderMembersInjector =
          ThirdPartyDobNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider,
              provideDobRangeValidationRuleProvider);

      this.thirdPartyDobNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyDobNodeRuleProvider_Factory.create(
                  thirdPartyDobNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyDobNodeRuleProvider getThirdPartyDobNodeRuleProvider() {
      return thirdPartyDobNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyWorkPhoneNodeComponentBuilder
      implements ThirdPartyWorkPhoneNodeComponent.Builder {
    private ThirdPartyWorkPhoneNodeModule thirdPartyWorkPhoneNodeModule;

    @Override
    public ThirdPartyWorkPhoneNodeComponent build() {
      if (thirdPartyWorkPhoneNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyWorkPhoneNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyWorkPhoneNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyWorkPhoneNodeComponentBuilder setThirdPartyWorkPhoneNodeModule(
        ThirdPartyWorkPhoneNodeModule module) {
      this.thirdPartyWorkPhoneNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyWorkPhoneNodeComponentImpl
      implements ThirdPartyWorkPhoneNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<TelephoneNode<?>> provideTelephoneNodeProvider;

    private Provider<TelephoneCompleteRuleImpl> telephoneCompleteRuleImplProvider;

    private Provider<TelephoneCompleteRule> provideTelephoneCompleteRuleProvider;

    private MembersInjector<ThirdPartyWorkPhoneNodeRuleProvider>
        thirdPartyWorkPhoneNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyWorkPhoneNodeRuleProvider> thirdPartyWorkPhoneNodeRuleProvider;

    private ThirdPartyWorkPhoneNodeComponentImpl(ThirdPartyWorkPhoneNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyWorkPhoneNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyWorkPhoneNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyWorkPhoneNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyWorkPhoneNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyWorkPhoneNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideTelephoneNodeProvider =
          DoubleCheck.provider(
              ThirdPartyWorkPhoneNodeModule_ProvideTelephoneNodeFactory.create(
                  builder.thirdPartyWorkPhoneNodeModule));

      this.telephoneCompleteRuleImplProvider =
          TelephoneCompleteRuleImpl_Factory.create(
              MembersInjectors.<TelephoneCompleteRuleImpl>noOp(), provideTelephoneNodeProvider);

      this.provideTelephoneCompleteRuleProvider = (Provider) telephoneCompleteRuleImplProvider;

      this.thirdPartyWorkPhoneNodeRuleProviderMembersInjector =
          ThirdPartyWorkPhoneNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              provideTelephoneCompleteRuleProvider);

      this.thirdPartyWorkPhoneNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyWorkPhoneNodeRuleProvider_Factory.create(
                  thirdPartyWorkPhoneNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyWorkPhoneNodeRuleProvider getThirdPartyWorkPhoneNodeRuleProvider() {
      return thirdPartyWorkPhoneNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyLastNameNodeComponentBuilder
      implements ThirdPartyLastNameNodeComponent.Builder {
    private ThirdPartyLastNameNodeModule thirdPartyLastNameNodeModule;

    @Override
    public ThirdPartyLastNameNodeComponent build() {
      if (thirdPartyLastNameNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyLastNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyLastNameNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyLastNameNodeComponentBuilder setThirdPartyLastNameNodeModule(
        ThirdPartyLastNameNodeModule module) {
      this.thirdPartyLastNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyLastNameNodeComponentImpl
      implements ThirdPartyLastNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ThirdPartyLastNameNodeRuleProvider>
        thirdPartyLastNameNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyLastNameNodeRuleProvider> thirdPartyLastNameNodeRuleProvider;

    private ThirdPartyLastNameNodeComponentImpl(ThirdPartyLastNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyLastNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyLastNameNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyLastNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyLastNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyLastNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyLastNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.thirdPartyLastNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.thirdPartyLastNameNodeRuleProviderMembersInjector =
          ThirdPartyLastNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.thirdPartyLastNameNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyLastNameNodeRuleProvider_Factory.create(
                  thirdPartyLastNameNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyLastNameNodeRuleProvider getThirdPartyLastNameNodeRuleProvider() {
      return thirdPartyLastNameNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyCompanyNameNodeComponentBuilder
      implements ThirdPartyCompanyNameNodeComponent.Builder {
    private ThirdPartyCompanyNameNodeModule thirdPartyCompanyNameNodeModule;

    @Override
    public ThirdPartyCompanyNameNodeComponent build() {
      if (thirdPartyCompanyNameNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyCompanyNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyCompanyNameNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyCompanyNameNodeComponentBuilder setThirdPartyCompanyNameNodeModule(
        ThirdPartyCompanyNameNodeModule module) {
      this.thirdPartyCompanyNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyCompanyNameNodeComponentImpl
      implements ThirdPartyCompanyNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ThirdPartyCompanyNameNodeRuleProvider>
        thirdPartyCompanyNameNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyCompanyNameNodeRuleProvider> thirdPartyCompanyNameNodeRuleProvider;

    private ThirdPartyCompanyNameNodeComponentImpl(
        ThirdPartyCompanyNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyCompanyNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyCompanyNameNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyCompanyNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyCompanyNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyCompanyNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyCompanyNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.thirdPartyCompanyNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.thirdPartyCompanyNameNodeRuleProviderMembersInjector =
          ThirdPartyCompanyNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.thirdPartyCompanyNameNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyCompanyNameNodeRuleProvider_Factory.create(
                  thirdPartyCompanyNameNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyCompanyNameNodeRuleProvider getThirdPartyCompanyNameNodeRuleProvider() {
      return thirdPartyCompanyNameNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyAddressNodeComponentBuilder
      implements ThirdPartyAddressNodeComponent.Builder {
    private ThirdPartyAddressNodeModule thirdPartyAddressNodeModule;

    @Override
    public ThirdPartyAddressNodeComponent build() {
      if (thirdPartyAddressNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyAddressNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyAddressNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyAddressNodeComponentBuilder setThirdPartyAddressNodeModule(
        ThirdPartyAddressNodeModule module) {
      this.thirdPartyAddressNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyAddressNodeComponentImpl implements ThirdPartyAddressNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<AddressNode<?>> provideAddressNodeProvider;

    private Provider<UpdateAddressRefListRuleImpl> updateAddressRefListRuleImplProvider;

    private Provider<UpdateAddressRefListRule> provideUpdateAddressRefListRuleProvider;

    private MembersInjector<ThirdPartyAddressNodeRuleProvider>
        thirdPartyAddressNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyAddressNodeRuleProvider> thirdPartyAddressNodeRuleProvider;

    private ThirdPartyAddressNodeComponentImpl(ThirdPartyAddressNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyAddressNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyAddressNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyAddressNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyAddressNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.thirdPartyAddressNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideAddressNodeProvider =
          DoubleCheck.provider(
              ThirdPartyAddressNodeModule_ProvideAddressNodeFactory.create(
                  builder.thirdPartyAddressNodeModule));

      this.updateAddressRefListRuleImplProvider =
          UpdateAddressRefListRuleImpl_Factory.create(
              MembersInjectors.<UpdateAddressRefListRuleImpl>noOp(), provideAddressNodeProvider);

      this.provideUpdateAddressRefListRuleProvider =
          (Provider) updateAddressRefListRuleImplProvider;

      this.thirdPartyAddressNodeRuleProviderMembersInjector =
          ThirdPartyAddressNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideUpdateAddressRefListRuleProvider);

      this.thirdPartyAddressNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyAddressNodeRuleProvider_Factory.create(
                  thirdPartyAddressNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyAddressNodeRuleProvider getThirdPartyAddressNodeRuleProvider() {
      return thirdPartyAddressNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyEmailNodeComponentBuilder
      implements ThirdPartyEmailNodeComponent.Builder {
    private ThirdPartyEmailNodeModule thirdPartyEmailNodeModule;

    @Override
    public ThirdPartyEmailNodeComponent build() {
      if (thirdPartyEmailNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyEmailNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyEmailNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyEmailNodeComponentBuilder setThirdPartyEmailNodeModule(
        ThirdPartyEmailNodeModule module) {
      this.thirdPartyEmailNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyEmailNodeComponentImpl implements ThirdPartyEmailNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ThirdPartyEmailNodeRuleProvider>
        thirdPartyEmailNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyEmailNodeRuleProvider> thirdPartyEmailNodeRuleProvider;

    private ThirdPartyEmailNodeComponentImpl(ThirdPartyEmailNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyEmailNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyEmailNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyEmailNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyEmailNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyEmailNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyEmailNodeModule_ProvideStringUiNodeFactory.create(
                  builder.thirdPartyEmailNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.thirdPartyEmailNodeRuleProviderMembersInjector =
          ThirdPartyEmailNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.thirdPartyEmailNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyEmailNodeRuleProvider_Factory.create(
                  thirdPartyEmailNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyEmailNodeRuleProvider getThirdPartyEmailNodeRuleProvider() {
      return thirdPartyEmailNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyTypeNodeComponentBuilder
      implements ThirdPartyTypeNodeComponent.Builder {
    private ThirdPartyTypeNodeModule thirdPartyTypeNodeModule;

    @Override
    public ThirdPartyTypeNodeComponent build() {
      if (thirdPartyTypeNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyTypeNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyTypeNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyTypeNodeComponentBuilder setThirdPartyTypeNodeModule(
        ThirdPartyTypeNodeModule module) {
      this.thirdPartyTypeNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyTypeNodeComponentImpl implements ThirdPartyTypeNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ThirdPartyTypeNodeRuleProvider>
        thirdPartyTypeNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyTypeNodeRuleProvider> thirdPartyTypeNodeRuleProvider;

    private ThirdPartyTypeNodeComponentImpl(ThirdPartyTypeNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyTypeNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyTypeNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyTypeNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyTypeNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyTypeNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyTypeNodeModule_ProvideStringUiNodeFactory.create(
                  builder.thirdPartyTypeNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.thirdPartyTypeNodeRuleProviderMembersInjector =
          ThirdPartyTypeNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.thirdPartyTypeNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyTypeNodeRuleProvider_Factory.create(
                  thirdPartyTypeNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyTypeNodeRuleProvider getThirdPartyTypeNodeRuleProvider() {
      return thirdPartyTypeNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyTitleNodeComponentBuilder
      implements ThirdPartyTitleNodeComponent.Builder {
    private ThirdPartyTitleNodeModule thirdPartyTitleNodeModule;

    @Override
    public ThirdPartyTitleNodeComponent build() {
      if (thirdPartyTitleNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyTitleNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyTitleNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyTitleNodeComponentBuilder setThirdPartyTitleNodeModule(
        ThirdPartyTitleNodeModule module) {
      this.thirdPartyTitleNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyTitleNodeComponentImpl implements ThirdPartyTitleNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ThirdPartyTitleNodeRuleProvider>
        thirdPartyTitleNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyTitleNodeRuleProvider> thirdPartyTitleNodeRuleProvider;

    private ThirdPartyTitleNodeComponentImpl(ThirdPartyTitleNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyTitleNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyTitleNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyTitleNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyTitleNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyTitleNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyTitleNodeModule_ProvideStringUiNodeFactory.create(
                  builder.thirdPartyTitleNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.thirdPartyTitleNodeRuleProviderMembersInjector =
          ThirdPartyTitleNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.thirdPartyTitleNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyTitleNodeRuleProvider_Factory.create(
                  thirdPartyTitleNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyTitleNodeRuleProvider getThirdPartyTitleNodeRuleProvider() {
      return thirdPartyTitleNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyDescriptionNodeComponentBuilder
      implements ThirdPartyDescriptionNodeComponent.Builder {
    private ThirdPartyDescriptionNodeModule thirdPartyDescriptionNodeModule;

    @Override
    public ThirdPartyDescriptionNodeComponent build() {
      if (thirdPartyDescriptionNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyDescriptionNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyDescriptionNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyDescriptionNodeComponentBuilder setThirdPartyDescriptionNodeModule(
        ThirdPartyDescriptionNodeModule module) {
      this.thirdPartyDescriptionNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyDescriptionNodeComponentImpl
      implements ThirdPartyDescriptionNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ThirdPartyDescriptionNodeRuleProvider>
        thirdPartyDescriptionNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyDescriptionNodeRuleProvider> thirdPartyDescriptionNodeRuleProvider;

    private ThirdPartyDescriptionNodeComponentImpl(
        ThirdPartyDescriptionNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyDescriptionNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDescriptionNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyDescriptionNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDescriptionNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyDescriptionNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyDescriptionNodeModule_ProvideStringUiNodeFactory.create(
                  builder.thirdPartyDescriptionNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.thirdPartyDescriptionNodeRuleProviderMembersInjector =
          ThirdPartyDescriptionNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.thirdPartyDescriptionNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyDescriptionNodeRuleProvider_Factory.create(
                  thirdPartyDescriptionNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyDescriptionNodeRuleProvider getThirdPartyDescriptionNodeRuleProvider() {
      return thirdPartyDescriptionNodeRuleProvider.get();
    }
  }

  private final class ThirdPartyFirstNameNodeComponentBuilder
      implements ThirdPartyFirstNameNodeComponent.Builder {
    private ThirdPartyFirstNameNodeModule thirdPartyFirstNameNodeModule;

    @Override
    public ThirdPartyFirstNameNodeComponent build() {
      if (thirdPartyFirstNameNodeModule == null) {
        throw new IllegalStateException(
            ThirdPartyFirstNameNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ThirdPartyFirstNameNodeComponentImpl(this);
    }

    @Override
    public ThirdPartyFirstNameNodeComponentBuilder setThirdPartyFirstNameNodeModule(
        ThirdPartyFirstNameNodeModule module) {
      this.thirdPartyFirstNameNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ThirdPartyFirstNameNodeComponentImpl
      implements ThirdPartyFirstNameNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<ThirdPartyFirstNameNodeRuleProvider>
        thirdPartyFirstNameNodeRuleProviderMembersInjector;

    private Provider<ThirdPartyFirstNameNodeRuleProvider> thirdPartyFirstNameNodeRuleProvider;

    private ThirdPartyFirstNameNodeComponentImpl(ThirdPartyFirstNameNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ThirdPartyFirstNameNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyFirstNameNodeModule_ProvideUiNodeFactory.create(
                  builder.thirdPartyFirstNameNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyFirstNameNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.thirdPartyFirstNameNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              ThirdPartyFirstNameNodeModule_ProvideStringUiNodeFactory.create(
                  builder.thirdPartyFirstNameNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.thirdPartyFirstNameNodeRuleProviderMembersInjector =
          ThirdPartyFirstNameNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.thirdPartyFirstNameNodeRuleProvider =
          DoubleCheck.provider(
              ThirdPartyFirstNameNodeRuleProvider_Factory.create(
                  thirdPartyFirstNameNodeRuleProviderMembersInjector));
    }

    @Override
    public ThirdPartyFirstNameNodeRuleProvider getThirdPartyFirstNameNodeRuleProvider() {
      return thirdPartyFirstNameNodeRuleProvider.get();
    }
  }

  private final class RelatedPartyNodeComponentBuilder
      implements RelatedPartyNodeComponent.Builder {
    private RelatedPartyNodeModule relatedPartyNodeModule;

    @Override
    public RelatedPartyNodeComponent build() {
      if (relatedPartyNodeModule == null) {
        throw new IllegalStateException(
            RelatedPartyNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RelatedPartyNodeComponentImpl(this);
    }

    @Override
    public RelatedPartyNodeComponentBuilder setRelatedPartyNodeModule(
        RelatedPartyNodeModule module) {
      this.relatedPartyNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RelatedPartyNodeComponentImpl implements RelatedPartyNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<RelatedPartyNodeRuleProvider>
        relatedPartyNodeRuleProviderMembersInjector;

    private Provider<RelatedPartyNodeRuleProvider> relatedPartyNodeRuleProvider;

    private RelatedPartyNodeComponentImpl(RelatedPartyNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RelatedPartyNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RelatedPartyNodeModule_ProvideUiNodeFactory.create(builder.relatedPartyNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              RelatedPartyNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.relatedPartyNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.relatedPartyNodeRuleProviderMembersInjector =
          RelatedPartyNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.relatedPartyNodeRuleProvider =
          DoubleCheck.provider(
              RelatedPartyNodeRuleProvider_Factory.create(
                  relatedPartyNodeRuleProviderMembersInjector));
    }

    @Override
    public RelatedPartyNodeRuleProvider getRelatedPartyNodeRuleProvider() {
      return relatedPartyNodeRuleProvider.get();
    }
  }

  private final class RelatedPartyListNodeComponentBuilder
      implements RelatedPartyListNodeComponent.Builder {
    private RelatedPartyListNodeModule relatedPartyListNodeModule;

    @Override
    public RelatedPartyListNodeComponent build() {
      if (relatedPartyListNodeModule == null) {
        throw new IllegalStateException(
            RelatedPartyListNodeModule.class.getCanonicalName() + " must be set");
      }
      return new RelatedPartyListNodeComponentImpl(this);
    }

    @Override
    public RelatedPartyListNodeComponentBuilder setRelatedPartyListNodeModule(
        RelatedPartyListNodeModule module) {
      this.relatedPartyListNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class RelatedPartyListNodeComponentImpl implements RelatedPartyListNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private MembersInjector<RelatedPartyListNodeRuleProvider>
        relatedPartyListNodeRuleProviderMembersInjector;

    private Provider<RelatedPartyListNodeRuleProvider> relatedPartyListNodeRuleProvider;

    private RelatedPartyListNodeComponentImpl(RelatedPartyListNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RelatedPartyListNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              RelatedPartyListNodeModule_ProvideUiNodeFactory.create(
                  builder.relatedPartyListNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.relatedPartyListNodeRuleProviderMembersInjector =
          RelatedPartyListNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider);

      this.relatedPartyListNodeRuleProvider =
          DoubleCheck.provider(
              RelatedPartyListNodeRuleProvider_Factory.create(
                  relatedPartyListNodeRuleProviderMembersInjector));
    }

    @Override
    public RelatedPartyListNodeRuleProvider getRelatedPartyListNodeRuleProvider() {
      return relatedPartyListNodeRuleProvider.get();
    }
  }

  private final class AdditionalCommentNodeComponentBuilder
      implements AdditionalCommentNodeComponent.Builder {
    private AdditionalCommentNodeModule additionalCommentNodeModule;

    @Override
    public AdditionalCommentNodeComponent build() {
      if (additionalCommentNodeModule == null) {
        throw new IllegalStateException(
            AdditionalCommentNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AdditionalCommentNodeComponentImpl(this);
    }

    @Override
    public AdditionalCommentNodeComponentBuilder setAdditionalCommentNodeModule(
        AdditionalCommentNodeModule module) {
      this.additionalCommentNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AdditionalCommentNodeComponentImpl implements AdditionalCommentNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<LeafUiNode<?, ?>> provideLeafUiNodeProvider;

    private Provider<LeafValueRequiredValidationRule> leafValueRequiredValidationRuleProvider;

    private Provider<StringUiNode<?>> provideStringUiNodeProvider;

    private Provider<PatternValidationRule> patternValidationRuleProvider;

    private Provider<LengthValidationRule> lengthValidationRuleProvider;

    private Provider<InvalidCharPreChangeRule> invalidCharPreChangeRuleProvider;

    private MembersInjector<AdditionalCommentNodeRuleProvider>
        additionalCommentNodeRuleProviderMembersInjector;

    private Provider<AdditionalCommentNodeRuleProvider> additionalCommentNodeRuleProvider;

    private AdditionalCommentNodeComponentImpl(AdditionalCommentNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AdditionalCommentNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AdditionalCommentNodeModule_ProvideUiNodeFactory.create(
                  builder.additionalCommentNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideLeafUiNodeProvider =
          DoubleCheck.provider(
              AdditionalCommentNodeModule_ProvideLeafUiNodeFactory.create(
                  builder.additionalCommentNodeModule));

      this.leafValueRequiredValidationRuleProvider =
          LeafValueRequiredValidationRule_Factory.create(
              MembersInjectors.<LeafValueRequiredValidationRule>noOp(), provideLeafUiNodeProvider);

      this.provideStringUiNodeProvider =
          DoubleCheck.provider(
              AdditionalCommentNodeModule_ProvideStringUiNodeFactory.create(
                  builder.additionalCommentNodeModule));

      this.patternValidationRuleProvider =
          PatternValidationRule_Factory.create(
              MembersInjectors.<PatternValidationRule>noOp(), provideStringUiNodeProvider);

      this.lengthValidationRuleProvider =
          LengthValidationRule_Factory.create(
              MembersInjectors.<LengthValidationRule>noOp(), provideStringUiNodeProvider);

      this.invalidCharPreChangeRuleProvider =
          InvalidCharPreChangeRule_Factory.create(
              MembersInjectors.<InvalidCharPreChangeRule>noOp(), provideStringUiNodeProvider);

      this.additionalCommentNodeRuleProviderMembersInjector =
          AdditionalCommentNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              leafValueRequiredValidationRuleProvider,
              patternValidationRuleProvider,
              lengthValidationRuleProvider,
              invalidCharPreChangeRuleProvider);

      this.additionalCommentNodeRuleProvider =
          DoubleCheck.provider(
              AdditionalCommentNodeRuleProvider_Factory.create(
                  additionalCommentNodeRuleProviderMembersInjector));
    }

    @Override
    public AdditionalCommentNodeRuleProvider getAdditionalCommentNodeRuleProvider() {
      return additionalCommentNodeRuleProvider.get();
    }
  }

  private final class AdditionalNodeComponentBuilder implements AdditionalNodeComponent.Builder {
    private AdditionalNodeModule additionalNodeModule;

    @Override
    public AdditionalNodeComponent build() {
      if (additionalNodeModule == null) {
        throw new IllegalStateException(
            AdditionalNodeModule.class.getCanonicalName() + " must be set");
      }
      return new AdditionalNodeComponentImpl(this);
    }

    @Override
    public AdditionalNodeComponentBuilder setAdditionalNodeModule(AdditionalNodeModule module) {
      this.additionalNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class AdditionalNodeComponentImpl implements AdditionalNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private MembersInjector<AdditionalNodeRuleProvider> additionalNodeRuleProviderMembersInjector;

    private Provider<AdditionalNodeRuleProvider> additionalNodeRuleProvider;

    private AdditionalNodeComponentImpl(AdditionalNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AdditionalNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              AdditionalNodeModule_ProvideUiNodeFactory.create(builder.additionalNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              AdditionalNodeModule_ProvideObjectUiNodeFactory.create(builder.additionalNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.additionalNodeRuleProviderMembersInjector =
          AdditionalNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider);

      this.additionalNodeRuleProvider =
          DoubleCheck.provider(
              AdditionalNodeRuleProvider_Factory.create(additionalNodeRuleProviderMembersInjector));
    }

    @Override
    public AdditionalNodeRuleProvider getAdditionalNodeRuleProvider() {
      return additionalNodeRuleProvider.get();
    }
  }

  private final class ApplicationNodeComponentBuilder implements ApplicationNodeComponent.Builder {
    private ApplicationNodeModule applicationNodeModule;

    @Override
    public ApplicationNodeComponent build() {
      if (applicationNodeModule == null) {
        throw new IllegalStateException(
            ApplicationNodeModule.class.getCanonicalName() + " must be set");
      }
      return new ApplicationNodeComponentImpl(this);
    }

    @Override
    public ApplicationNodeComponentBuilder setApplicationNodeModule(ApplicationNodeModule module) {
      this.applicationNodeModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ApplicationNodeComponentImpl implements ApplicationNodeComponent {
    private Provider<UiNode<?>> provideUiNodeProvider;

    private Provider<ClearErrorsForDisabledNodeRule> clearErrorsForDisabledNodeRuleProvider;

    private Provider<ObjectUiNode<?>> provideObjectUiNodeProvider;

    private Provider<ObjectValueRequiredValidationRule> objectValueRequiredValidationRuleProvider;

    private Provider<UpdateObjectHasValueRule> updateObjectHasValueRuleProvider;

    private Provider<ApplicationNode> provideApplicationNodeProvider;

    private Provider<CreateErrorNodeRuleImpl> createErrorNodeRuleImplProvider;

    private Provider<CreateErrorNodeRule> provideCreateErrorNodeRuleProvider;

    private Provider<ShowErrorListRuleImpl> showErrorListRuleImplProvider;

    private Provider<ShowErrorListRule> provideShowErrorListRuleProvider;

    private MembersInjector<ApplicationNodeRuleProvider> applicationNodeRuleProviderMembersInjector;

    private Provider<ApplicationNodeRuleProvider> applicationNodeRuleProvider;

    private ApplicationNodeComponentImpl(ApplicationNodeComponentBuilder builder) {
      assert builder != null;
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationNodeComponentBuilder builder) {

      this.provideUiNodeProvider =
          DoubleCheck.provider(
              ApplicationNodeModule_ProvideUiNodeFactory.create(builder.applicationNodeModule));

      this.clearErrorsForDisabledNodeRuleProvider =
          ClearErrorsForDisabledNodeRule_Factory.create(
              MembersInjectors.<ClearErrorsForDisabledNodeRule>noOp(), provideUiNodeProvider);

      this.provideObjectUiNodeProvider =
          DoubleCheck.provider(
              ApplicationNodeModule_ProvideObjectUiNodeFactory.create(
                  builder.applicationNodeModule));

      this.objectValueRequiredValidationRuleProvider =
          ObjectValueRequiredValidationRule_Factory.create(
              MembersInjectors.<ObjectValueRequiredValidationRule>noOp(),
              provideObjectUiNodeProvider);

      this.updateObjectHasValueRuleProvider =
          UpdateObjectHasValueRule_Factory.create(
              MembersInjectors.<UpdateObjectHasValueRule>noOp(), provideObjectUiNodeProvider);

      this.provideApplicationNodeProvider =
          DoubleCheck.provider(
              ApplicationNodeModule_ProvideApplicationNodeFactory.create(
                  builder.applicationNodeModule));

      this.createErrorNodeRuleImplProvider =
          CreateErrorNodeRuleImpl_Factory.create(
              MembersInjectors.<CreateErrorNodeRuleImpl>noOp(), provideApplicationNodeProvider);

      this.provideCreateErrorNodeRuleProvider = (Provider) createErrorNodeRuleImplProvider;

      this.showErrorListRuleImplProvider =
          ShowErrorListRuleImpl_Factory.create(
              MembersInjectors.<ShowErrorListRuleImpl>noOp(), provideApplicationNodeProvider);

      this.provideShowErrorListRuleProvider = (Provider) showErrorListRuleImplProvider;

      this.applicationNodeRuleProviderMembersInjector =
          ApplicationNodeRuleProvider_MembersInjector.create(
              clearErrorsForDisabledNodeRuleProvider,
              objectValueRequiredValidationRuleProvider,
              updateObjectHasValueRuleProvider,
              provideCreateErrorNodeRuleProvider,
              provideShowErrorListRuleProvider);

      this.applicationNodeRuleProvider =
          DoubleCheck.provider(
              ApplicationNodeRuleProvider_Factory.create(
                  applicationNodeRuleProviderMembersInjector));
    }

    @Override
    public ApplicationNodeRuleProvider getApplicationNodeRuleProvider() {
      return applicationNodeRuleProvider.get();
    }
  }
}
